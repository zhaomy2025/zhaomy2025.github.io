{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Java文件目录操作核心类.md","hash":"decef595e8b5c2c4de8fe6858f0005daf5ef4922","modified":1741244402830},{"_id":"source/_posts/GitHub-Pages-Hexo搭建个人网站.md","hash":"96074df2d1c7df06a5169e03ff3e58a4c2c5574b","modified":1745982035955},{"_id":"source/_posts/Java学习路线.md","hash":"ba215b9ba61429eaca121aaab57ae7809f679301","modified":1741249557115},{"_id":"source/_posts/Java基础知识点.md","hash":"f3b50f4270c311cdc7337c213fed48546b6f0f40","modified":1741760459459},{"_id":"source/_posts/Java泛型机制.md","hash":"9c14d86941b1e4dc337282d5db91fdd775bb92bc","modified":1741769358664},{"_id":"source/_posts/Java注解机制.md","hash":"17174b37272c1dc3323e5d0a07f98a74b69f872f","modified":1741854052837},{"_id":"source/_posts/Next主题个性化配置.md","hash":"76beaacd755f8f8e17781ab7070ca333d706fca7","modified":1741251814223},{"_id":"source/_posts/Java异常处理.md","hash":"33781815f4849d9b20780b649a101dfe6bdec03d","modified":1741760728851},{"_id":"source/_posts/Linux-Shell.md","hash":"8251200782ec6fc3aa82c532e6c9a76a36298e35","modified":1741163589165},{"_id":"source/_posts/Linux常用命令.md","hash":"121edb924434ada146786b59ecd45a7745306974","modified":1741163589144},{"_id":"source/_posts/【语言对比】集合.md","hash":"9c74d19a5aec07a7f48aeb1498fac50b0de6d59f","modified":1746509790578},{"_id":"source/about/index.md","hash":"d4466a9a9eea56c2ba60de663f77a706bbc66e40","modified":1741234477416},{"_id":"source/_posts/【Hexo】更高级的Markdown渲染器.md","hash":"81232dadf1df76a9e9b315fb8003bcdc2003437b","modified":1741251814214},{"_id":"source/categories/index.md","hash":"41815e1ff4a0c29c7dfa4691a1d60fd076b6d098","modified":1741163514859},{"_id":"source/tags/index.md","hash":"b13d4df0c9f5bfe9178f1b382ad99387dff7acec","modified":1741164725447},{"_id":"source/_posts/技术书单.md","hash":"eb1d1c95e1b72d7d5215585a13bc3795b990fa95","modified":1742798313552},{"_id":"source/_posts/正则表达式在不同语言中的对比.md","hash":"25730a887ca6404843b5f3322a1a8dc4095deeba","modified":1742530559011},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"312fa7c1ae472e18d88f6d01c54dc6f32f66255c","modified":1740985238127},{"_id":"node_modules/hexo-theme-next/package.json","hash":"26e77380c9dd66388b9fd34eb9aac3e0ad510731","modified":1740985237808},{"_id":"node_modules/hexo-theme-next/README.md","hash":"5dd295594b92dbe07b0376b505f29fb3884e77f9","modified":1740985237826},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dbbd054721541f4d1f4fed4bc983bc19ff1f259a","modified":1740985238124},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1740985237818},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1740985237810},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1740985237812},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1740985237824},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1740985238132},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1740985238129},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1740985238137},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1740985238122},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1740985238136},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1740985238130},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1740985238134},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1740985238144},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1740985238138},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1740985238141},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1740985238143},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1740985238147},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1740985238149},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1740985238146},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1740985238153},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1740985238140},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1740985238155},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1740985238158},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1740985238160},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1740985238157},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1740985238161},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1740985238169},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1740985238166},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1740985237827},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1740985238164},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1740985237834},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1740985237880},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1740985238167},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1740985237903},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1740985237930},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1740985237844},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1740985237941},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1740985237815},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1740985238152},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"285d5c4dffb97da659851fb6e53379a614619fd9","modified":1740985237821},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1740985237817},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1740985237852},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1740985237885},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1740985237934},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1740985237861},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1740985237904},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"51704a2eadb0d363762ebf2e44994696e0843e40","modified":1740985237872},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1740985237948},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"21567f1810f861b0a33db6514a4fcf18fb98467d","modified":1740985237822},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1740985237929},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1740985237856},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1740985237915},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1740985237829},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1740985237732},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1740985237951},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1740985237756},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1740985237875},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1740985237713},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1740985237900},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1740985237786},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1740985237766},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1740985237931},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1740985237770},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"f2d45eb3f03662033608075e3fa895498d08712d","modified":1740985237719},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1740985237776},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1740985237778},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1740985237773},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1740985237775},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1740985237677},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1740985237703},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1740985237675},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1740985237679},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1740985237761},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1740985237734},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1740985237742},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1740985237725},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1740985237747},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1740985237793},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1740985237782},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1740985237960},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1740985237805},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1740985237979},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1740985237804},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740985237955},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1740985238068},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1740985238057},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740985237953},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1740985237672},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1740985238121},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740985237957},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1740985237691},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1740985238120},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1740985237699},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1740985237767},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1740985237658},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1740985237779},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1740985237772},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1740985237689},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1740985237792},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d7954a623be2ee9fe3eadc785b17c17afac6c34d","modified":1740985237798},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1740985237895},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1740985237896},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1740985237785},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1740985237939},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1740985237867},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1740985237790},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1740985237869},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1740985237838},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1740985237919},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1740985237924},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1740985237925},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1740985237868},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1740985237923},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1740985237843},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1740985237921},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1740985237901},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1740985237871},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1740985237839},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1740985237943},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1740985237835},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1740985237850},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1740985237933},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1740985237917},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1740985237937},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1740985237864},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1740985237899},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1740985237865},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1740985237946},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1740985237893},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1740985237849},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1740985237911},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1740985237944},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1740985237847},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1740985237854},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1740985237853},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1740985237862},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1740985237882},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1740985237873},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1740985237947},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1740985237877},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1740985237888},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1740985237883},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1740985237832},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1740985237889},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1740985237891},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1740985237735},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1740985237729},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1740985237682},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1740985237795},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1740985237697},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1740985237692},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1740985237802},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1740985237700},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1740985237705},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1740985237720},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1740985237708},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1740985237799},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1740985237749},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1740985237886},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1740985237842},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1740985237857},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1740985237737},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1740985237898},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1740985237768},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1740985237879},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1740985237907},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1740985237949},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"e814de4dab6aee6153d0a46438c231f94ed05e73","modified":1740985237997},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1740985238063},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1740985238065},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1740985238075},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1740985237663},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1740985238020},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1740985237989},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1740985238025},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1740985237788},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1740985238090},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1740985237714},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d898944f9a68da04c9c9bc4afeec4b5595b76783","modified":1740985237992},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1740985238064},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1740985238038},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1740985238007},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1740985237780},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1740985238010},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1740985238044},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1740985238067},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1740985238112},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1740985238116},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1740985237971},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1740985237975},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1740985237963},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1740985237966},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1740985238050},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1740985237972},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1740985237981},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1740985238072},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1740985237982},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1740985237976},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1740985237969},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1740985238048},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1740985237985},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1740985237987},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1740985238051},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1740985238053},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1740985237973},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1740985237688},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1740985237724},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1740985237984},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1740985237669},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1740985237728},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1740985237759},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1740985237978},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1740985237794},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1740985237706},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1740985237685},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1740985237738},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1740985237710},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1740985237741},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1740985237722},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1740985237801},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1740985237751},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1740985237758},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1740985237716},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1740985237745},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1740985237783},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"111f60e26b82b4d5be4357737e9273617778c9a9","modified":1740985237666},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1740985237806},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4262628e173b16c4c6c18f817173dd103fb9e9a8","modified":1740985237753},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1740985238076},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1740985238078},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1740985238030},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1740985238081},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1740985238083},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1740985237764},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1740985238080},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1740985238084},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1740985238086},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1740985238087},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1740985238006},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1740985238089},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1740985238093},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1740985238035},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1740985238027},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1740985238114},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1740985238008},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1740985238017},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1740985238059},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1740985238021},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1740985238032},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1740985238022},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1740985238117},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1740985238095},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1740985238003},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1740985238041},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1740985238036},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1740985238060},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1740985238091},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1740985238043},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1740985238109},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1740985238108},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1740985238096},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1740985238098},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1740985238018},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"86b110899eaae51b85c4c95eadfe7a912e58a813","modified":1740985238099},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1740985238100},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1740985238000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1740985238104},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1740985238102},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1740985238105},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1740985238024},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1740985238110},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1740985238014},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1740985238107},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1740985238062},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1740985238046},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1740985238056},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1740985238113},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1740985238073},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1740985238118},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1740985238054},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1740985238070},{"_id":"source/books/index.md","hash":"df46fbe2cb75d5a209326218957fb383a163ccb0","modified":1742880235088},{"_id":"source/_posts/数据库物化视图未更新问题分析与解决.md","hash":"15818517c2119cd4caf9166bc08ba99d45744401","modified":1744184005508},{"_id":"source/resources/index.md","hash":"4aa3032718756cd4dd20a1cc7b4c33d935e14404","modified":1742879987028},{"_id":"source/projects/index.md","hash":"52edc31a17b29754c72107d3d8ee6f1c938cd11e","modified":1742879867755},{"_id":"source/tools/index.md","hash":"f3938515238333947bff66540ad0739b178376a2","modified":1742880242507},{"_id":"source/_posts/Java对象格式化.md","hash":"e4da8eef2d2ddee73785154040364e38e1139eaf","modified":1745284732482},{"_id":"source/_posts/数据库定时任务与物化视图常用命令大全.md","hash":"a7557c685647a7adbdebd5f729eb3526c5161e2d","modified":1743662609277},{"_id":"source/_posts/Java动态调试技术原理.md","hash":"683950b70f2b87cfa0d98d7ff452df475a01baf9","modified":1744261805440},{"_id":"source/_posts/Oracle和MySQL中将多行数据合并为一行.md","hash":"cc0f01c3cfc14f51d9ea1fcd237af8a743774d20","modified":1745284767589},{"_id":"source/_posts/Java-Agent.md","hash":"62d80ded22167614c265c201b3d4642212d5ccd4","modified":1745981308052},{"_id":"source/_posts/VuePress.md","hash":"de84407ca25683c36356901c78043c0c4e5f02b0","modified":1747122650928}],"Category":[{"name":"Hexo教程","_id":"cm8o1f167000464v4763bey4h"},{"name":"Java","_id":"cm8o1f16c000a64v4hyr7043h"},{"name":"Java中级","parent":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16m000t64v4hsej3y0w"},{"name":"Java基础","parent":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16n000x64v4f7a9cknl"},{"name":"Linux","_id":"cm8o1f16p001764v43cyn7a2m"},{"name":"Next主题","parent":"cm8o1f167000464v4763bey4h","_id":"cm8o1f16p001d64v4hbj21ln7"},{"name":"Markdown","parent":"cm8o1f167000464v4763bey4h","_id":"cm8o1f16r001p64v4bm5l6syw"},{"name":"语言对比","_id":"cm8o1f16s001v64v4ci6s5fkx"},{"name":"常用类库","parent":"cm8o1f16n000x64v4f7a9cknl","_id":"cm8o1f16u002964v49b8k7z74"},{"name":"Java杂项","parent":"cm8o1f16c000a64v4hyr7043h","_id":"cm99lvlfp0003bov4ctos3u7a"},{"name":"数据库","_id":"cm99lvlfr0005bov47c0tcb2z"},{"name":"Oracle","parent":"cm99lvlfr0005bov47c0tcb2z","_id":"cm99lvlft000cbov4clpdfe0g"},{"name":"定时任务","parent":"cm99lvlft000cbov4clpdfe0g","_id":"cm99lvlfv000gbov4hdtzg4x1"},{"name":"物化视图","parent":"cm99lvlft000cbov4clpdfe0g","_id":"cm99lvlfw000kbov4gq0jhf69"},{"name":"Java高级","parent":"cm8o1f16c000a64v4hyr7043h","_id":"cm9cbtqrk0004hov4b8o9edu1"},{"name":"聚合函数","parent":"cm99lvlfr0005bov47c0tcb2z","_id":"cm9cbtqrp0006hov47tuqcq3v"},{"name":"JVM和性能调优","parent":"cm9cbtqrk0004hov4b8o9edu1","_id":"cm9cbtqrs0009hov493fvb4g0"},{"name":"静态网站生成器","_id":"cmaeyu3iq000144v4czyu37b5"}],"Data":[],"Page":[{"title":"标签","date":"2025-03-05T08:51:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-03-05 16:51:39\ntype: \"tags\"\n---\n","updated":"2025-03-05T08:52:05.447Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm8o1f15x000064v40ye73g0p","content":"","excerpt":"","more":""},{"title":"关于","date":"2025-03-06T02:55:00.000Z","type":"about","_content":"测试","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2025-03-06 10:55:00\ntype: \"about\"\n---\n测试","updated":"2025-03-06T04:14:37.416Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm8o1f164000264v4fj7t99q0","content":"<p>测试</p>\n","excerpt":"","more":"<p>测试</p>\n"},{"title":"文章分类","date":"2025-03-05T08:31:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2025-03-05 16:31:03\ntype: \"categories\"\n---\n","updated":"2025-03-05T08:31:54.859Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm8o1f169000664v494259xb0","content":"","excerpt":"","more":""},{"title":"books","date":"2025-03-25T05:23:55.000Z","_content":"","source":"books/index.md","raw":"---\ntitle: books\ndate: 2025-03-25 13:23:55\n---\n","updated":"2025-03-25T05:23:55.088Z","path":"books/index.html","comments":1,"layout":"page","_id":"cm8wgjx9q0000u0v45g2t1nz1","content":"","excerpt":"","more":""},{"title":"resources","date":"2025-03-25T05:19:47.000Z","_content":"","source":"resources/index.md","raw":"---\ntitle: resources\ndate: 2025-03-25 13:19:47\n---\n","updated":"2025-03-25T05:19:47.028Z","path":"resources/index.html","comments":1,"layout":"page","_id":"cm8wgjx9v0002u0v42y2c9yhq","content":"","excerpt":"","more":""},{"title":"projects","date":"2025-03-25T05:17:47.000Z","_content":"","source":"projects/index.md","raw":"---\ntitle: projects\ndate: 2025-03-25 13:17:47\n---\n","updated":"2025-03-25T05:17:47.755Z","path":"projects/index.html","comments":1,"layout":"page","_id":"cm8wgjx9w0003u0v4fdhbes0v","content":"","excerpt":"","more":""},{"title":"tools","date":"2025-03-25T05:24:02.000Z","_content":"","source":"tools/index.md","raw":"---\ntitle: tools\ndate: 2025-03-25 13:24:02\n---\n","updated":"2025-03-25T05:24:02.507Z","path":"tools/index.html","comments":1,"layout":"page","_id":"cm8wgjx9x0004u0v449fl4uvg","content":"","excerpt":"","more":""}],"Post":[{"title":"GitHub Pages + Hexo搭建个人网站","date":"2025-03-03T06:59:10.000Z","_content":"# 准备环境\n准备一个 GitHub 账号并新建一个仓库，仓库名称为 `<username>.github.io`。\n\n安装 Node.js 和 Git。\n\n## Node\n**hexo需要ES6 模块语法支持, ES6 模块语法在 Node.js 12.x 版本中引入，并在 Node.js 14.x 及更高版本中得到更好的支持。**\n\n## 同时使用GitHub和GitLab\n### 为每个平台生成不同的SSH密钥\n```git\nssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C \"youremail\"\n# 因为gitee已经配置了SSH,文件名为id_rsa,所以注释下面这条命令\n# ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C \"youremail\"\n```\n\n### 创建配置文件\n在 _**~/.ssh/**_ 目录下创建一个 _**config**_ 文件，用于配置不同平台的 SSH 连接信息。文件内容如下：\n\n```plain\n# GitHub\nHost github.com\nHostName github.com\nUser git\nIdentityFile ~/.ssh/id_rsa.github\n\n# Gitee\nHost gitee.com\nHostName gitee.com\nUser git\nIdentityFile ~/.ssh/id_rsa.gitee\n```\n\n### 添加 SSH 密钥到平台\n分别将生成的公钥添加到 GitHub 和 Gitee 的 SSH Key 设置中：\n\n+ GitHub: https://github.com/settings/keys\n+ Gitee: https://gitee.com/profile/sshkeys\n\n# 安装 Hexo\nHexo 是一个轻量级博客框架。\n\n```git\n# 安装Hexo\nnpm install hexo-cli -g\n# 进阶\n# npm install hexo\n# 初始化\nhexo init zhaomy2025.github.io\n# 安装依赖\ncd <site> && npm install\n# 启动服务器\nhexo s\n```\n\n# 部署网站\n在远程仓库中前往 Settings > Pages > Source，并将 Source 改为 GitHub Actions。\n\n在本地仓库中建立 .github/workflows/pages.yml，并填入以下内容：\n\n```yaml\nname: Pages\n\non:\n  push:\n    branches:\n      - main # default branch\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          submodules: recursive\n      - name: Use Node.js 20\n        uses: actions/setup-node@v4\n        with:\n          node-version: \"20\"\n      - name: Cache NPM dependencies\n        uses: actions/cache@v4\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./public\n  deploy:\n    needs: build\n    permissions:\n      pages: write\n      id-token: write\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n# 撰写文章\n```bash\nhexo n \"GitHub Pages + Hexo搭建个人网站\"\n```\n\n# 主题\n1. 安装主题包\n```bash\nnpm install hexo-theme-next\n```\n2. 打开站点配置文件 _config.yml，找到 `theme` 字段，并将其值更改为 `next`\n3. 将`node_modules/hexo-theme-next/_config.yml`文件复制到站点目录`themes`\n   注意不能放到`themes/next`目录下，因为创建该目录后，不会再从node_modules目录下查找文件，找不到文件导致报错`WARN  No layout: archives/index.html`\n4. 清除缓存再预览\n```bash\nhexo clean && hexo s\n```\n\n# 选择更高级的Markdown渲染器\nHexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成`hexo-renderer-markdown-it-plus`渲染器。","source":"_posts/GitHub-Pages-Hexo搭建个人网站.md","raw":"---\ntitle: GitHub Pages + Hexo搭建个人网站\ndate: 2025-03-03 14:59:10\ntags: \n- Hexo教程\ncategories: \n- Hexo教程\n---\n# 准备环境\n准备一个 GitHub 账号并新建一个仓库，仓库名称为 `<username>.github.io`。\n\n安装 Node.js 和 Git。\n\n## Node\n**hexo需要ES6 模块语法支持, ES6 模块语法在 Node.js 12.x 版本中引入，并在 Node.js 14.x 及更高版本中得到更好的支持。**\n\n## 同时使用GitHub和GitLab\n### 为每个平台生成不同的SSH密钥\n```git\nssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C \"youremail\"\n# 因为gitee已经配置了SSH,文件名为id_rsa,所以注释下面这条命令\n# ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C \"youremail\"\n```\n\n### 创建配置文件\n在 _**~/.ssh/**_ 目录下创建一个 _**config**_ 文件，用于配置不同平台的 SSH 连接信息。文件内容如下：\n\n```plain\n# GitHub\nHost github.com\nHostName github.com\nUser git\nIdentityFile ~/.ssh/id_rsa.github\n\n# Gitee\nHost gitee.com\nHostName gitee.com\nUser git\nIdentityFile ~/.ssh/id_rsa.gitee\n```\n\n### 添加 SSH 密钥到平台\n分别将生成的公钥添加到 GitHub 和 Gitee 的 SSH Key 设置中：\n\n+ GitHub: https://github.com/settings/keys\n+ Gitee: https://gitee.com/profile/sshkeys\n\n# 安装 Hexo\nHexo 是一个轻量级博客框架。\n\n```git\n# 安装Hexo\nnpm install hexo-cli -g\n# 进阶\n# npm install hexo\n# 初始化\nhexo init zhaomy2025.github.io\n# 安装依赖\ncd <site> && npm install\n# 启动服务器\nhexo s\n```\n\n# 部署网站\n在远程仓库中前往 Settings > Pages > Source，并将 Source 改为 GitHub Actions。\n\n在本地仓库中建立 .github/workflows/pages.yml，并填入以下内容：\n\n```yaml\nname: Pages\n\non:\n  push:\n    branches:\n      - main # default branch\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          submodules: recursive\n      - name: Use Node.js 20\n        uses: actions/setup-node@v4\n        with:\n          node-version: \"20\"\n      - name: Cache NPM dependencies\n        uses: actions/cache@v4\n        with:\n          path: node_modules\n          key: ${{ runner.OS }}-npm-cache\n          restore-keys: |\n            ${{ runner.OS }}-npm-cache\n      - name: Install Dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: ./public\n  deploy:\n    needs: build\n    permissions:\n      pages: write\n      id-token: write\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n# 撰写文章\n```bash\nhexo n \"GitHub Pages + Hexo搭建个人网站\"\n```\n\n# 主题\n1. 安装主题包\n```bash\nnpm install hexo-theme-next\n```\n2. 打开站点配置文件 _config.yml，找到 `theme` 字段，并将其值更改为 `next`\n3. 将`node_modules/hexo-theme-next/_config.yml`文件复制到站点目录`themes`\n   注意不能放到`themes/next`目录下，因为创建该目录后，不会再从node_modules目录下查找文件，找不到文件导致报错`WARN  No layout: archives/index.html`\n4. 清除缓存再预览\n```bash\nhexo clean && hexo s\n```\n\n# 选择更高级的Markdown渲染器\nHexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成`hexo-renderer-markdown-it-plus`渲染器。","slug":"GitHub-Pages-Hexo搭建个人网站","published":1,"updated":"2025-04-30T03:00:35.955Z","_id":"cm8o1f160000164v4dlfh5a2l","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"准备环境\"><a class=\"markdownIt-Anchor\" href=\"#准备环境\"></a> 准备环境</h1>\n<p>准备一个 GitHub 账号并新建一个仓库，仓库名称为 <code>&lt;username&gt;.github.io</code>。</p>\n<p>安装 Node.js 和 Git。</p>\n<h2 id=\"node\"><a class=\"markdownIt-Anchor\" href=\"#node\"></a> Node</h2>\n<p><strong>hexo需要ES6 模块语法支持, ES6 模块语法在 Node.js 12.x 版本中引入，并在 Node.js 14.x 及更高版本中得到更好的支持。</strong></p>\n<h2 id=\"同时使用github和gitlab\"><a class=\"markdownIt-Anchor\" href=\"#同时使用github和gitlab\"></a> 同时使用GitHub和GitLab</h2>\n<h3 id=\"为每个平台生成不同的ssh密钥\"><a class=\"markdownIt-Anchor\" href=\"#为每个平台生成不同的ssh密钥\"></a> 为每个平台生成不同的SSH密钥</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;youremail&quot;</span><br><span class=\"line\"># 因为gitee已经配置了SSH,文件名为id_rsa,所以注释下面这条命令</span><br><span class=\"line\"># ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建配置文件\"><a class=\"markdownIt-Anchor\" href=\"#创建配置文件\"></a> 创建配置文件</h3>\n<p>在 <em><strong>~/.ssh/</strong></em> 目录下创建一个 <em><strong>config</strong></em> 文件，用于配置不同平台的 SSH 连接信息。文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GitHub</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.github</span><br><span class=\"line\"></span><br><span class=\"line\"># Gitee</span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.gitee</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-ssh-密钥到平台\"><a class=\"markdownIt-Anchor\" href=\"#添加-ssh-密钥到平台\"></a> 添加 SSH 密钥到平台</h3>\n<p>分别将生成的公钥添加到 GitHub 和 Gitee 的 SSH Key 设置中：</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a></li>\n<li>Gitee: <a href=\"https://gitee.com/profile/sshkeys\">https://gitee.com/profile/sshkeys</a></li>\n</ul>\n<h1 id=\"安装-hexo\"><a class=\"markdownIt-Anchor\" href=\"#安装-hexo\"></a> 安装 Hexo</h1>\n<p>Hexo 是一个轻量级博客框架。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装Hexo</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"># 进阶</span><br><span class=\"line\"># npm install hexo</span><br><span class=\"line\"># 初始化</span><br><span class=\"line\">hexo init zhaomy2025.github.io</span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">cd &lt;site&gt; &amp;&amp; npm install</span><br><span class=\"line\"># 启动服务器</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h1 id=\"部署网站\"><a class=\"markdownIt-Anchor\" href=\"#部署网站\"></a> 部署网站</h1>\n<p>在远程仓库中前往 Settings &gt; Pages &gt; Source，并将 Source 改为 GitHub Actions。</p>\n<p>在本地仓库中建立 .github/workflows/pages.yml，并填入以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span> <span class=\"comment\"># default branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">submodules:</span> <span class=\"string\">recursive</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v4</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Upload</span> <span class=\"string\">Pages</span> <span class=\"string\">artifact</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-pages-artifact@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> <span class=\"string\">build</span></span><br><span class=\"line\">    <span class=\"attr\">permissions:</span></span><br><span class=\"line\">      <span class=\"attr\">pages:</span> <span class=\"string\">write</span></span><br><span class=\"line\">      <span class=\"attr\">id-token:</span> <span class=\"string\">write</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">github-pages</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.deployment.outputs.page_url</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">to</span> <span class=\"string\">GitHub</span> <span class=\"string\">Pages</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">deployment</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/deploy-pages@v4</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"撰写文章\"><a class=\"markdownIt-Anchor\" href=\"#撰写文章\"></a> 撰写文章</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">&quot;GitHub Pages + Hexo搭建个人网站&quot;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"主题\"><a class=\"markdownIt-Anchor\" href=\"#主题\"></a> 主题</h1>\n<ol>\n<li>安装主题包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>打开站点配置文件 _config.yml，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code></li>\n<li>将<code>node_modules/hexo-theme-next/_config.yml</code>文件复制到站点目录<code>themes</code><br />\n注意不能放到<code>themes/next</code>目录下，因为创建该目录后，不会再从node_modules目录下查找文件，找不到文件导致报错<code>WARN  No layout: archives/index.html</code></li>\n<li>清除缓存再预览</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择更高级的markdown渲染器\"><a class=\"markdownIt-Anchor\" href=\"#选择更高级的markdown渲染器\"></a> 选择更高级的Markdown渲染器</h1>\n<p>Hexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成<code>hexo-renderer-markdown-it-plus</code>渲染器。</p>\n","excerpt":"","more":"<h1 id=\"准备环境\"><a class=\"markdownIt-Anchor\" href=\"#准备环境\"></a> 准备环境</h1>\n<p>准备一个 GitHub 账号并新建一个仓库，仓库名称为 <code>&lt;username&gt;.github.io</code>。</p>\n<p>安装 Node.js 和 Git。</p>\n<h2 id=\"node\"><a class=\"markdownIt-Anchor\" href=\"#node\"></a> Node</h2>\n<p><strong>hexo需要ES6 模块语法支持, ES6 模块语法在 Node.js 12.x 版本中引入，并在 Node.js 14.x 及更高版本中得到更好的支持。</strong></p>\n<h2 id=\"同时使用github和gitlab\"><a class=\"markdownIt-Anchor\" href=\"#同时使用github和gitlab\"></a> 同时使用GitHub和GitLab</h2>\n<h3 id=\"为每个平台生成不同的ssh密钥\"><a class=\"markdownIt-Anchor\" href=\"#为每个平台生成不同的ssh密钥\"></a> 为每个平台生成不同的SSH密钥</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;youremail&quot;</span><br><span class=\"line\"># 因为gitee已经配置了SSH,文件名为id_rsa,所以注释下面这条命令</span><br><span class=\"line\"># ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建配置文件\"><a class=\"markdownIt-Anchor\" href=\"#创建配置文件\"></a> 创建配置文件</h3>\n<p>在 <em><strong>~/.ssh/</strong></em> 目录下创建一个 <em><strong>config</strong></em> 文件，用于配置不同平台的 SSH 连接信息。文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GitHub</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.github</span><br><span class=\"line\"></span><br><span class=\"line\"># Gitee</span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.gitee</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-ssh-密钥到平台\"><a class=\"markdownIt-Anchor\" href=\"#添加-ssh-密钥到平台\"></a> 添加 SSH 密钥到平台</h3>\n<p>分别将生成的公钥添加到 GitHub 和 Gitee 的 SSH Key 设置中：</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a></li>\n<li>Gitee: <a href=\"https://gitee.com/profile/sshkeys\">https://gitee.com/profile/sshkeys</a></li>\n</ul>\n<h1 id=\"安装-hexo\"><a class=\"markdownIt-Anchor\" href=\"#安装-hexo\"></a> 安装 Hexo</h1>\n<p>Hexo 是一个轻量级博客框架。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装Hexo</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"># 进阶</span><br><span class=\"line\"># npm install hexo</span><br><span class=\"line\"># 初始化</span><br><span class=\"line\">hexo init zhaomy2025.github.io</span><br><span class=\"line\"># 安装依赖</span><br><span class=\"line\">cd &lt;site&gt; &amp;&amp; npm install</span><br><span class=\"line\"># 启动服务器</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h1 id=\"部署网站\"><a class=\"markdownIt-Anchor\" href=\"#部署网站\"></a> 部署网站</h1>\n<p>在远程仓库中前往 Settings &gt; Pages &gt; Source，并将 Source 改为 GitHub Actions。</p>\n<p>在本地仓库中建立 .github/workflows/pages.yml，并填入以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">main</span> <span class=\"comment\"># default branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">submodules:</span> <span class=\"string\">recursive</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"number\">20</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&quot;20&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v4</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Upload</span> <span class=\"string\">Pages</span> <span class=\"string\">artifact</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-pages-artifact@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">./public</span></span><br><span class=\"line\">  <span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> <span class=\"string\">build</span></span><br><span class=\"line\">    <span class=\"attr\">permissions:</span></span><br><span class=\"line\">      <span class=\"attr\">pages:</span> <span class=\"string\">write</span></span><br><span class=\"line\">      <span class=\"attr\">id-token:</span> <span class=\"string\">write</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">github-pages</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.deployment.outputs.page_url</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">to</span> <span class=\"string\">GitHub</span> <span class=\"string\">Pages</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">deployment</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/deploy-pages@v4</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"撰写文章\"><a class=\"markdownIt-Anchor\" href=\"#撰写文章\"></a> 撰写文章</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n <span class=\"string\">&quot;GitHub Pages + Hexo搭建个人网站&quot;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"主题\"><a class=\"markdownIt-Anchor\" href=\"#主题\"></a> 主题</h1>\n<ol>\n<li>安装主题包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>打开站点配置文件 _config.yml，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code></li>\n<li>将<code>node_modules/hexo-theme-next/_config.yml</code>文件复制到站点目录<code>themes</code><br />\n注意不能放到<code>themes/next</code>目录下，因为创建该目录后，不会再从node_modules目录下查找文件，找不到文件导致报错<code>WARN  No layout: archives/index.html</code></li>\n<li>清除缓存再预览</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择更高级的markdown渲染器\"><a class=\"markdownIt-Anchor\" href=\"#选择更高级的markdown渲染器\"></a> 选择更高级的Markdown渲染器</h1>\n<p>Hexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成<code>hexo-renderer-markdown-it-plus</code>渲染器。</p>\n"},{"title":"Java异常处理","date":"2025-03-11T09:06:48.000Z","_content":"# 异常的层次结构\n``` \nThrowable\n├── Error\n│   ├── OutOfMemoryError\n│   ├── StackOverflowError\n│   └── NoClassDefFoundError\n│   └── IOError\n│   └── ThreadDeath\n│   └── LinkageError\n└── Exception\n    ├── RuntimeException\n    │   ├── NullPointerException 空指针异常\n    │   ├── NegativeArraySizeException  数组长度为负异常\n    │   ├── ArrayStoreException   数组中包含不兼容的值异常\n    │   ├── ArithmeticException 算术条件异常\n    │   ├── IllegalArgumentException 非法参数异常\n    │   ├── IllegalStateException 参数的状态不合适\n    │   ├── IndexOutOfBoundsException 索引越界异常\n    │   ├── ArrayIndexOutOfBoundsException 数组索引越界异常\n    │   ├── ClassCastException 类型转换异常\n    │   └── ClassNotFoundException 找不到类异常\n    └── 非运行时异常（Checked Exception）\n        ├── IOException\n        ├── SQLException\n        ├── FileNotFoundException\n```\n# 异常的捕获与处理\n异常捕获处理的方法通常有：\n- try-catch\n- try-catch-finally\n- try-finally\n- try-with-resource\n## try-finally\ntry-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。\n\nfinally遇见如下情况不会执行：\n- 在前面的代码中用了System.exit()退出程序。\n- finally语句块中发生了异常。\n- 程序所在的线程死亡。\n- 关闭CPU。\n## try-with-resource\ntry-with-resource是Java7引入的新语法，可以自动关闭资源，不需要手动关闭。如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。\ntry-with-resource的语法格式如下：\n```\ntry (资源类型 资源变量 = new 资源类型()) {\n    // 使用资源的代码\n} catch (异常类型 异常变量) {\n    // 处理异常的代码\n}\n```\ntry 代码块退出时，会自动调用资源变量的close方法，和把 close 方法放在 finally 代码块中不同的是，close 抛出异常会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。\n\n# 异常的使用建议\n## 只针对不正常的情况才使用异常\n异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。\n## 在 finally 块中清理资源或者使用 try-with-resource 语句\n禁止在try块的最后关闭资源（只有在没有异常抛出时才会执行）。\n## 不要捕获Throwable类\n如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。\n## 不要忽略异常\n如果在 catch 子句中不做任何处理，异常将被忽略，无法拿到足够的错误信息来定位问题。合理的做法是至少要记录异常的信息。\n## 不要记录并抛出异常\n会给同一个异常输出多条日志。\n仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。\n捕获并抛出异常时，最好提供更加有用的信息，可以将异常包装为自定义异常。（此时不需要记录原始异常，无论何时都不应该记录并抛出异常）\n## 包装异常时不要抛弃原始的异常\nException 类提供了特殊的构造函数方法，它接受一个 Throwable 作为参数。通过这种方式包装的自定义异常不会丢失堆栈跟踪和原始异常的信息。\n## 不要在finally块中使用return\ntry块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。\n```java\nint x = 0;\ntry {\n    return ++x;// x等于1，此处不返回\n} finally {\n    return ++x; // 返回的结果是2\n}\n```","source":"_posts/Java异常处理.md","raw":"---\ntitle: Java异常处理\ndate: 2025-03-11 17:06:48\ntags:\n  - Java\n  - Java基础\n  - Java异常处理\n  - 异常\ncategories:\n  - Java\n  - Java基础\n---\n# 异常的层次结构\n``` \nThrowable\n├── Error\n│   ├── OutOfMemoryError\n│   ├── StackOverflowError\n│   └── NoClassDefFoundError\n│   └── IOError\n│   └── ThreadDeath\n│   └── LinkageError\n└── Exception\n    ├── RuntimeException\n    │   ├── NullPointerException 空指针异常\n    │   ├── NegativeArraySizeException  数组长度为负异常\n    │   ├── ArrayStoreException   数组中包含不兼容的值异常\n    │   ├── ArithmeticException 算术条件异常\n    │   ├── IllegalArgumentException 非法参数异常\n    │   ├── IllegalStateException 参数的状态不合适\n    │   ├── IndexOutOfBoundsException 索引越界异常\n    │   ├── ArrayIndexOutOfBoundsException 数组索引越界异常\n    │   ├── ClassCastException 类型转换异常\n    │   └── ClassNotFoundException 找不到类异常\n    └── 非运行时异常（Checked Exception）\n        ├── IOException\n        ├── SQLException\n        ├── FileNotFoundException\n```\n# 异常的捕获与处理\n异常捕获处理的方法通常有：\n- try-catch\n- try-catch-finally\n- try-finally\n- try-with-resource\n## try-finally\ntry-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。\n\nfinally遇见如下情况不会执行：\n- 在前面的代码中用了System.exit()退出程序。\n- finally语句块中发生了异常。\n- 程序所在的线程死亡。\n- 关闭CPU。\n## try-with-resource\ntry-with-resource是Java7引入的新语法，可以自动关闭资源，不需要手动关闭。如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。\ntry-with-resource的语法格式如下：\n```\ntry (资源类型 资源变量 = new 资源类型()) {\n    // 使用资源的代码\n} catch (异常类型 异常变量) {\n    // 处理异常的代码\n}\n```\ntry 代码块退出时，会自动调用资源变量的close方法，和把 close 方法放在 finally 代码块中不同的是，close 抛出异常会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。\n\n# 异常的使用建议\n## 只针对不正常的情况才使用异常\n异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。\n## 在 finally 块中清理资源或者使用 try-with-resource 语句\n禁止在try块的最后关闭资源（只有在没有异常抛出时才会执行）。\n## 不要捕获Throwable类\n如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。\n## 不要忽略异常\n如果在 catch 子句中不做任何处理，异常将被忽略，无法拿到足够的错误信息来定位问题。合理的做法是至少要记录异常的信息。\n## 不要记录并抛出异常\n会给同一个异常输出多条日志。\n仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。\n捕获并抛出异常时，最好提供更加有用的信息，可以将异常包装为自定义异常。（此时不需要记录原始异常，无论何时都不应该记录并抛出异常）\n## 包装异常时不要抛弃原始的异常\nException 类提供了特殊的构造函数方法，它接受一个 Throwable 作为参数。通过这种方式包装的自定义异常不会丢失堆栈跟踪和原始异常的信息。\n## 不要在finally块中使用return\ntry块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。\n```java\nint x = 0;\ntry {\n    return ++x;// x等于1，此处不返回\n} finally {\n    return ++x; // 返回的结果是2\n}\n```","slug":"Java异常处理","published":1,"updated":"2025-03-12T06:25:28.851Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f164000364v45vhb07gj","content":"<h1 id=\"异常的层次结构\"><a class=\"markdownIt-Anchor\" href=\"#异常的层次结构\"></a> 异常的层次结构</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Throwable</span><br><span class=\"line\">├── Error</span><br><span class=\"line\">│   ├── OutOfMemoryError</span><br><span class=\"line\">│   ├── StackOverflowError</span><br><span class=\"line\">│   └── NoClassDefFoundError</span><br><span class=\"line\">│   └── IOError</span><br><span class=\"line\">│   └── ThreadDeath</span><br><span class=\"line\">│   └── LinkageError</span><br><span class=\"line\">└── Exception</span><br><span class=\"line\">    ├── RuntimeException</span><br><span class=\"line\">    │   ├── NullPointerException 空指针异常</span><br><span class=\"line\">    │   ├── NegativeArraySizeException  数组长度为负异常</span><br><span class=\"line\">    │   ├── ArrayStoreException   数组中包含不兼容的值异常</span><br><span class=\"line\">    │   ├── ArithmeticException 算术条件异常</span><br><span class=\"line\">    │   ├── IllegalArgumentException 非法参数异常</span><br><span class=\"line\">    │   ├── IllegalStateException 参数的状态不合适</span><br><span class=\"line\">    │   ├── IndexOutOfBoundsException 索引越界异常</span><br><span class=\"line\">    │   ├── ArrayIndexOutOfBoundsException 数组索引越界异常</span><br><span class=\"line\">    │   ├── ClassCastException 类型转换异常</span><br><span class=\"line\">    │   └── ClassNotFoundException 找不到类异常</span><br><span class=\"line\">    └── 非运行时异常（Checked Exception）</span><br><span class=\"line\">        ├── IOException</span><br><span class=\"line\">        ├── SQLException</span><br><span class=\"line\">        ├── FileNotFoundException</span><br></pre></td></tr></table></figure>\n<h1 id=\"异常的捕获与处理\"><a class=\"markdownIt-Anchor\" href=\"#异常的捕获与处理\"></a> 异常的捕获与处理</h1>\n<p>异常捕获处理的方法通常有：</p>\n<ul>\n<li>try-catch</li>\n<li>try-catch-finally</li>\n<li>try-finally</li>\n<li>try-with-resource</li>\n</ul>\n<h2 id=\"try-finally\"><a class=\"markdownIt-Anchor\" href=\"#try-finally\"></a> try-finally</h2>\n<p>try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。</p>\n<p>finally遇见如下情况不会执行：</p>\n<ul>\n<li>在前面的代码中用了System.exit()退出程序。</li>\n<li>finally语句块中发生了异常。</li>\n<li>程序所在的线程死亡。</li>\n<li>关闭CPU。</li>\n</ul>\n<h2 id=\"try-with-resource\"><a class=\"markdownIt-Anchor\" href=\"#try-with-resource\"></a> try-with-resource</h2>\n<p>try-with-resource是Java7引入的新语法，可以自动关闭资源，不需要手动关闭。如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。<br />\ntry-with-resource的语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try (资源类型 资源变量 = new 资源类型()) &#123;</span><br><span class=\"line\">    // 使用资源的代码</span><br><span class=\"line\">&#125; catch (异常类型 异常变量) &#123;</span><br><span class=\"line\">    // 处理异常的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>try 代码块退出时，会自动调用资源变量的close方法，和把 close 方法放在 finally 代码块中不同的是，close 抛出异常会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。</p>\n<h1 id=\"异常的使用建议\"><a class=\"markdownIt-Anchor\" href=\"#异常的使用建议\"></a> 异常的使用建议</h1>\n<h2 id=\"只针对不正常的情况才使用异常\"><a class=\"markdownIt-Anchor\" href=\"#只针对不正常的情况才使用异常\"></a> 只针对不正常的情况才使用异常</h2>\n<p>异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。</p>\n<h2 id=\"在-finally-块中清理资源或者使用-try-with-resource-语句\"><a class=\"markdownIt-Anchor\" href=\"#在-finally-块中清理资源或者使用-try-with-resource-语句\"></a> 在 finally 块中清理资源或者使用 try-with-resource 语句</h2>\n<p>禁止在try块的最后关闭资源（只有在没有异常抛出时才会执行）。</p>\n<h2 id=\"不要捕获throwable类\"><a class=\"markdownIt-Anchor\" href=\"#不要捕获throwable类\"></a> 不要捕获Throwable类</h2>\n<p>如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。</p>\n<h2 id=\"不要忽略异常\"><a class=\"markdownIt-Anchor\" href=\"#不要忽略异常\"></a> 不要忽略异常</h2>\n<p>如果在 catch 子句中不做任何处理，异常将被忽略，无法拿到足够的错误信息来定位问题。合理的做法是至少要记录异常的信息。</p>\n<h2 id=\"不要记录并抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#不要记录并抛出异常\"></a> 不要记录并抛出异常</h2>\n<p>会给同一个异常输出多条日志。<br />\n仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。<br />\n捕获并抛出异常时，最好提供更加有用的信息，可以将异常包装为自定义异常。（此时不需要记录原始异常，无论何时都不应该记录并抛出异常）</p>\n<h2 id=\"包装异常时不要抛弃原始的异常\"><a class=\"markdownIt-Anchor\" href=\"#包装异常时不要抛弃原始的异常\"></a> 包装异常时不要抛弃原始的异常</h2>\n<p>Exception 类提供了特殊的构造函数方法，它接受一个 Throwable 作为参数。通过这种方式包装的自定义异常不会丢失堆栈跟踪和原始异常的信息。</p>\n<h2 id=\"不要在finally块中使用return\"><a class=\"markdownIt-Anchor\" href=\"#不要在finally块中使用return\"></a> 不要在finally块中使用return</h2>\n<p>try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++x;<span class=\"comment\">// x等于1，此处不返回</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++x; <span class=\"comment\">// 返回的结果是2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"异常的层次结构\"><a class=\"markdownIt-Anchor\" href=\"#异常的层次结构\"></a> 异常的层次结构</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Throwable</span><br><span class=\"line\">├── Error</span><br><span class=\"line\">│   ├── OutOfMemoryError</span><br><span class=\"line\">│   ├── StackOverflowError</span><br><span class=\"line\">│   └── NoClassDefFoundError</span><br><span class=\"line\">│   └── IOError</span><br><span class=\"line\">│   └── ThreadDeath</span><br><span class=\"line\">│   └── LinkageError</span><br><span class=\"line\">└── Exception</span><br><span class=\"line\">    ├── RuntimeException</span><br><span class=\"line\">    │   ├── NullPointerException 空指针异常</span><br><span class=\"line\">    │   ├── NegativeArraySizeException  数组长度为负异常</span><br><span class=\"line\">    │   ├── ArrayStoreException   数组中包含不兼容的值异常</span><br><span class=\"line\">    │   ├── ArithmeticException 算术条件异常</span><br><span class=\"line\">    │   ├── IllegalArgumentException 非法参数异常</span><br><span class=\"line\">    │   ├── IllegalStateException 参数的状态不合适</span><br><span class=\"line\">    │   ├── IndexOutOfBoundsException 索引越界异常</span><br><span class=\"line\">    │   ├── ArrayIndexOutOfBoundsException 数组索引越界异常</span><br><span class=\"line\">    │   ├── ClassCastException 类型转换异常</span><br><span class=\"line\">    │   └── ClassNotFoundException 找不到类异常</span><br><span class=\"line\">    └── 非运行时异常（Checked Exception）</span><br><span class=\"line\">        ├── IOException</span><br><span class=\"line\">        ├── SQLException</span><br><span class=\"line\">        ├── FileNotFoundException</span><br></pre></td></tr></table></figure>\n<h1 id=\"异常的捕获与处理\"><a class=\"markdownIt-Anchor\" href=\"#异常的捕获与处理\"></a> 异常的捕获与处理</h1>\n<p>异常捕获处理的方法通常有：</p>\n<ul>\n<li>try-catch</li>\n<li>try-catch-finally</li>\n<li>try-finally</li>\n<li>try-with-resource</li>\n</ul>\n<h2 id=\"try-finally\"><a class=\"markdownIt-Anchor\" href=\"#try-finally\"></a> try-finally</h2>\n<p>try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。</p>\n<p>finally遇见如下情况不会执行：</p>\n<ul>\n<li>在前面的代码中用了System.exit()退出程序。</li>\n<li>finally语句块中发生了异常。</li>\n<li>程序所在的线程死亡。</li>\n<li>关闭CPU。</li>\n</ul>\n<h2 id=\"try-with-resource\"><a class=\"markdownIt-Anchor\" href=\"#try-with-resource\"></a> try-with-resource</h2>\n<p>try-with-resource是Java7引入的新语法，可以自动关闭资源，不需要手动关闭。如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。<br />\ntry-with-resource的语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try (资源类型 资源变量 = new 资源类型()) &#123;</span><br><span class=\"line\">    // 使用资源的代码</span><br><span class=\"line\">&#125; catch (异常类型 异常变量) &#123;</span><br><span class=\"line\">    // 处理异常的代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>try 代码块退出时，会自动调用资源变量的close方法，和把 close 方法放在 finally 代码块中不同的是，close 抛出异常会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。</p>\n<h1 id=\"异常的使用建议\"><a class=\"markdownIt-Anchor\" href=\"#异常的使用建议\"></a> 异常的使用建议</h1>\n<h2 id=\"只针对不正常的情况才使用异常\"><a class=\"markdownIt-Anchor\" href=\"#只针对不正常的情况才使用异常\"></a> 只针对不正常的情况才使用异常</h2>\n<p>异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。</p>\n<h2 id=\"在-finally-块中清理资源或者使用-try-with-resource-语句\"><a class=\"markdownIt-Anchor\" href=\"#在-finally-块中清理资源或者使用-try-with-resource-语句\"></a> 在 finally 块中清理资源或者使用 try-with-resource 语句</h2>\n<p>禁止在try块的最后关闭资源（只有在没有异常抛出时才会执行）。</p>\n<h2 id=\"不要捕获throwable类\"><a class=\"markdownIt-Anchor\" href=\"#不要捕获throwable类\"></a> 不要捕获Throwable类</h2>\n<p>如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。</p>\n<h2 id=\"不要忽略异常\"><a class=\"markdownIt-Anchor\" href=\"#不要忽略异常\"></a> 不要忽略异常</h2>\n<p>如果在 catch 子句中不做任何处理，异常将被忽略，无法拿到足够的错误信息来定位问题。合理的做法是至少要记录异常的信息。</p>\n<h2 id=\"不要记录并抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#不要记录并抛出异常\"></a> 不要记录并抛出异常</h2>\n<p>会给同一个异常输出多条日志。<br />\n仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。<br />\n捕获并抛出异常时，最好提供更加有用的信息，可以将异常包装为自定义异常。（此时不需要记录原始异常，无论何时都不应该记录并抛出异常）</p>\n<h2 id=\"包装异常时不要抛弃原始的异常\"><a class=\"markdownIt-Anchor\" href=\"#包装异常时不要抛弃原始的异常\"></a> 包装异常时不要抛弃原始的异常</h2>\n<p>Exception 类提供了特殊的构造函数方法，它接受一个 Throwable 作为参数。通过这种方式包装的自定义异常不会丢失堆栈跟踪和原始异常的信息。</p>\n<h2 id=\"不要在finally块中使用return\"><a class=\"markdownIt-Anchor\" href=\"#不要在finally块中使用return\"></a> 不要在finally块中使用return</h2>\n<p>try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++x;<span class=\"comment\">// x等于1，此处不返回</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++x; <span class=\"comment\">// 返回的结果是2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java学习路线","date":"2025-03-06T05:06:42.000Z","_content":"学习Java的路线可以分为几个阶段，从基础到高级，逐步深入。以下是一个常见的学习路线：\n\n# 基础阶段\n+ **Java简介**\n    - Java的历史和特点\n    - Java的应用领域\n    - JDK、JRE、JVM的区别\n+ **开发环境搭建**\n    - 安装JDK\n    - 配置环境变量\n    - 安装IDE（如IntelliJ IDEA、Eclipse）\n+ **基础语法**\n    - 数据类型、变量、常量\n    - 运算符\n    - 控制流程（if、switch、for、while等）\n    - 数组\n+ **面向对象编程（OOP）**\n    - 类和对象\n    - 继承、封装、多态\n    - 抽象类和接口\n    - 构造方法\n    - 方法重载和重写\n+ **异常处理**\n    - 异常的分类\n    - try-catch-finally\n    - 自定义异常\n+ **常用类库**\n    - String、StringBuilder、StringBuffer\n    - 集合框架（List、Set、Map等）\n    - 日期和时间处理\n    - 文件目录操作（对文件本身进行操作，而非文件内容，File、Path、Files、Paths等）\n    - 输入输出流（I/O）\n\n# 中级阶段\n+ **泛型**\n    - 泛型类和泛型方法\n    - 类型擦除\n+ **集合框架深入**\n    - ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等\n    - 迭代器\n    - 比较器（Comparable和Comparator）\n+ **多线程编程**\n    - 线程的创建和启动\n    - 线程同步（synchronized、Lock）\n    - 线程池\n    - 并发工具类（CountDownLatch、CyclicBarrier等）\n+ **网络编程**\n    - Socket编程\n    - HTTP请求处理\n    - NIO（非阻塞I/O）\n+ **反射机制**\n    - Class类\n    - 获取类信息\n    - 动态代理\n+ **注解（Annotation）**\n    - 内置注解\n    - 自定义注解\n    - 注解处理器\n\n# 高级阶段\n+ **Java 8+ 新特性**\n    - Lambda表达式\n    - Stream API\n    - 新的日期和时间API（LocalDate、LocalTime等）\n    - Optional类\n+ **JVM和性能调优**\n    - JVM内存模型\n    - 垃圾回收机制\n    - JVM参数调优\n    - 性能监控工具（如JVisualVM、JConsole）\n+ **设计模式**\n    - 单例模式\n    - 工厂模式\n    - 观察者模式\n    - 装饰器模式等\n+ **数据库编程**\n    - JDBC连接数据库\n    - 事务管理\n    - ORM框架（如Hibernate、MyBatis）\n+ **Spring框架**\n    - Spring Core\n    - Spring MVC\n    - Spring Boot\n    - Spring Data JPA\n    - Spring Security\n+ **微服务架构**\n    - Spring Cloud\n    - 服务注册与发现（Eureka、Consul）\n    - 配置中心（Spring Cloud Config）\n    - 服务网关（Zuul、Gateway）\n    - 负载均衡（Ribbon）\n    - 熔断器（Hystrix）\n\n# 实战项目\n+ **小型项目**\n    - 图书管理系统\n    - 学生成绩管理系统\n+ **中型项目**\n    - 在线商城\n    - 博客系统\n+ **大型项目**\n    - 分布式电商平台\n    - 社交网络平台\n\n# 持续学习\n+ **参与开源项目**\n+ **阅读源码**\n+ **学习新技术**\n    - Kotlin\n    - Scala\n    - 云计算（Docker、Kubernetes）\n    - 大数据（Hadoop、Spark）\n\n# 工具和资源\n+ **版本控制**\n    - Git\n    - GitHub/GitLab\n+ **构建工具**\n    - Maven\n    - Gradle\n+ **测试工具**\n    - JUnit\n    - Mockito\n+ **学习资源**\n    - 书籍：《Java编程思想》、《Effective Java》\n    - 在线课程：Coursera、Udemy、慕课网\n    - 官方文档：Oracle Java Documentation\n\n# 社区和论坛\n+ Stack Overflow\n+ GitHub\n+ CSDN\n+ 掘金\n\n通过以上阶段的学习和实践，可以逐步掌握Java编程，并在实际项目中应用所学知识。\n\n\n\n![画板](https://cdn.nlark.com/yuque/0/2025/jpeg/21987629/1738719316130-af7cc101-fe0c-4151-a070-58af9f497ae0.jpeg)\n\n","source":"_posts/Java学习路线.md","raw":"---\ntitle: Java学习路线\ndate: 2025-03-06 13:06:42\ntags:\n  - Java\n  - 学习路线\ncategories:\n  - Java\n---\n学习Java的路线可以分为几个阶段，从基础到高级，逐步深入。以下是一个常见的学习路线：\n\n# 基础阶段\n+ **Java简介**\n    - Java的历史和特点\n    - Java的应用领域\n    - JDK、JRE、JVM的区别\n+ **开发环境搭建**\n    - 安装JDK\n    - 配置环境变量\n    - 安装IDE（如IntelliJ IDEA、Eclipse）\n+ **基础语法**\n    - 数据类型、变量、常量\n    - 运算符\n    - 控制流程（if、switch、for、while等）\n    - 数组\n+ **面向对象编程（OOP）**\n    - 类和对象\n    - 继承、封装、多态\n    - 抽象类和接口\n    - 构造方法\n    - 方法重载和重写\n+ **异常处理**\n    - 异常的分类\n    - try-catch-finally\n    - 自定义异常\n+ **常用类库**\n    - String、StringBuilder、StringBuffer\n    - 集合框架（List、Set、Map等）\n    - 日期和时间处理\n    - 文件目录操作（对文件本身进行操作，而非文件内容，File、Path、Files、Paths等）\n    - 输入输出流（I/O）\n\n# 中级阶段\n+ **泛型**\n    - 泛型类和泛型方法\n    - 类型擦除\n+ **集合框架深入**\n    - ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等\n    - 迭代器\n    - 比较器（Comparable和Comparator）\n+ **多线程编程**\n    - 线程的创建和启动\n    - 线程同步（synchronized、Lock）\n    - 线程池\n    - 并发工具类（CountDownLatch、CyclicBarrier等）\n+ **网络编程**\n    - Socket编程\n    - HTTP请求处理\n    - NIO（非阻塞I/O）\n+ **反射机制**\n    - Class类\n    - 获取类信息\n    - 动态代理\n+ **注解（Annotation）**\n    - 内置注解\n    - 自定义注解\n    - 注解处理器\n\n# 高级阶段\n+ **Java 8+ 新特性**\n    - Lambda表达式\n    - Stream API\n    - 新的日期和时间API（LocalDate、LocalTime等）\n    - Optional类\n+ **JVM和性能调优**\n    - JVM内存模型\n    - 垃圾回收机制\n    - JVM参数调优\n    - 性能监控工具（如JVisualVM、JConsole）\n+ **设计模式**\n    - 单例模式\n    - 工厂模式\n    - 观察者模式\n    - 装饰器模式等\n+ **数据库编程**\n    - JDBC连接数据库\n    - 事务管理\n    - ORM框架（如Hibernate、MyBatis）\n+ **Spring框架**\n    - Spring Core\n    - Spring MVC\n    - Spring Boot\n    - Spring Data JPA\n    - Spring Security\n+ **微服务架构**\n    - Spring Cloud\n    - 服务注册与发现（Eureka、Consul）\n    - 配置中心（Spring Cloud Config）\n    - 服务网关（Zuul、Gateway）\n    - 负载均衡（Ribbon）\n    - 熔断器（Hystrix）\n\n# 实战项目\n+ **小型项目**\n    - 图书管理系统\n    - 学生成绩管理系统\n+ **中型项目**\n    - 在线商城\n    - 博客系统\n+ **大型项目**\n    - 分布式电商平台\n    - 社交网络平台\n\n# 持续学习\n+ **参与开源项目**\n+ **阅读源码**\n+ **学习新技术**\n    - Kotlin\n    - Scala\n    - 云计算（Docker、Kubernetes）\n    - 大数据（Hadoop、Spark）\n\n# 工具和资源\n+ **版本控制**\n    - Git\n    - GitHub/GitLab\n+ **构建工具**\n    - Maven\n    - Gradle\n+ **测试工具**\n    - JUnit\n    - Mockito\n+ **学习资源**\n    - 书籍：《Java编程思想》、《Effective Java》\n    - 在线课程：Coursera、Udemy、慕课网\n    - 官方文档：Oracle Java Documentation\n\n# 社区和论坛\n+ Stack Overflow\n+ GitHub\n+ CSDN\n+ 掘金\n\n通过以上阶段的学习和实践，可以逐步掌握Java编程，并在实际项目中应用所学知识。\n\n\n\n![画板](https://cdn.nlark.com/yuque/0/2025/jpeg/21987629/1738719316130-af7cc101-fe0c-4151-a070-58af9f497ae0.jpeg)\n\n","slug":"Java学习路线","published":1,"updated":"2025-03-06T08:25:57.115Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f169000764v42w4bhppu","content":"<p>学习Java的路线可以分为几个阶段，从基础到高级，逐步深入。以下是一个常见的学习路线：</p>\n<h1 id=\"基础阶段\"><a class=\"markdownIt-Anchor\" href=\"#基础阶段\"></a> 基础阶段</h1>\n<ul>\n<li><strong>Java简介</strong>\n<ul>\n<li>Java的历史和特点</li>\n<li>Java的应用领域</li>\n<li>JDK、JRE、JVM的区别</li>\n</ul>\n</li>\n<li><strong>开发环境搭建</strong>\n<ul>\n<li>安装JDK</li>\n<li>配置环境变量</li>\n<li>安装IDE（如IntelliJ IDEA、Eclipse）</li>\n</ul>\n</li>\n<li><strong>基础语法</strong>\n<ul>\n<li>数据类型、变量、常量</li>\n<li>运算符</li>\n<li>控制流程（if、switch、for、while等）</li>\n<li>数组</li>\n</ul>\n</li>\n<li><strong>面向对象编程（OOP）</strong>\n<ul>\n<li>类和对象</li>\n<li>继承、封装、多态</li>\n<li>抽象类和接口</li>\n<li>构造方法</li>\n<li>方法重载和重写</li>\n</ul>\n</li>\n<li><strong>异常处理</strong>\n<ul>\n<li>异常的分类</li>\n<li>try-catch-finally</li>\n<li>自定义异常</li>\n</ul>\n</li>\n<li><strong>常用类库</strong>\n<ul>\n<li>String、StringBuilder、StringBuffer</li>\n<li>集合框架（List、Set、Map等）</li>\n<li>日期和时间处理</li>\n<li>文件目录操作（对文件本身进行操作，而非文件内容，File、Path、Files、Paths等）</li>\n<li>输入输出流（I/O）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"中级阶段\"><a class=\"markdownIt-Anchor\" href=\"#中级阶段\"></a> 中级阶段</h1>\n<ul>\n<li><strong>泛型</strong>\n<ul>\n<li>泛型类和泛型方法</li>\n<li>类型擦除</li>\n</ul>\n</li>\n<li><strong>集合框架深入</strong>\n<ul>\n<li>ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等</li>\n<li>迭代器</li>\n<li>比较器（Comparable和Comparator）</li>\n</ul>\n</li>\n<li><strong>多线程编程</strong>\n<ul>\n<li>线程的创建和启动</li>\n<li>线程同步（synchronized、Lock）</li>\n<li>线程池</li>\n<li>并发工具类（CountDownLatch、CyclicBarrier等）</li>\n</ul>\n</li>\n<li><strong>网络编程</strong>\n<ul>\n<li>Socket编程</li>\n<li>HTTP请求处理</li>\n<li>NIO（非阻塞I/O）</li>\n</ul>\n</li>\n<li><strong>反射机制</strong>\n<ul>\n<li>Class类</li>\n<li>获取类信息</li>\n<li>动态代理</li>\n</ul>\n</li>\n<li><strong>注解（Annotation）</strong>\n<ul>\n<li>内置注解</li>\n<li>自定义注解</li>\n<li>注解处理器</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"高级阶段\"><a class=\"markdownIt-Anchor\" href=\"#高级阶段\"></a> 高级阶段</h1>\n<ul>\n<li><strong>Java 8+ 新特性</strong>\n<ul>\n<li>Lambda表达式</li>\n<li>Stream API</li>\n<li>新的日期和时间API（LocalDate、LocalTime等）</li>\n<li>Optional类</li>\n</ul>\n</li>\n<li><strong>JVM和性能调优</strong>\n<ul>\n<li>JVM内存模型</li>\n<li>垃圾回收机制</li>\n<li>JVM参数调优</li>\n<li>性能监控工具（如JVisualVM、JConsole）</li>\n</ul>\n</li>\n<li><strong>设计模式</strong>\n<ul>\n<li>单例模式</li>\n<li>工厂模式</li>\n<li>观察者模式</li>\n<li>装饰器模式等</li>\n</ul>\n</li>\n<li><strong>数据库编程</strong>\n<ul>\n<li>JDBC连接数据库</li>\n<li>事务管理</li>\n<li>ORM框架（如Hibernate、MyBatis）</li>\n</ul>\n</li>\n<li><strong>Spring框架</strong>\n<ul>\n<li>Spring Core</li>\n<li>Spring MVC</li>\n<li>Spring Boot</li>\n<li>Spring Data JPA</li>\n<li>Spring Security</li>\n</ul>\n</li>\n<li><strong>微服务架构</strong>\n<ul>\n<li>Spring Cloud</li>\n<li>服务注册与发现（Eureka、Consul）</li>\n<li>配置中心（Spring Cloud Config）</li>\n<li>服务网关（Zuul、Gateway）</li>\n<li>负载均衡（Ribbon）</li>\n<li>熔断器（Hystrix）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"实战项目\"><a class=\"markdownIt-Anchor\" href=\"#实战项目\"></a> 实战项目</h1>\n<ul>\n<li><strong>小型项目</strong>\n<ul>\n<li>图书管理系统</li>\n<li>学生成绩管理系统</li>\n</ul>\n</li>\n<li><strong>中型项目</strong>\n<ul>\n<li>在线商城</li>\n<li>博客系统</li>\n</ul>\n</li>\n<li><strong>大型项目</strong>\n<ul>\n<li>分布式电商平台</li>\n<li>社交网络平台</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"持续学习\"><a class=\"markdownIt-Anchor\" href=\"#持续学习\"></a> 持续学习</h1>\n<ul>\n<li><strong>参与开源项目</strong></li>\n<li><strong>阅读源码</strong></li>\n<li><strong>学习新技术</strong>\n<ul>\n<li>Kotlin</li>\n<li>Scala</li>\n<li>云计算（Docker、Kubernetes）</li>\n<li>大数据（Hadoop、Spark）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"工具和资源\"><a class=\"markdownIt-Anchor\" href=\"#工具和资源\"></a> 工具和资源</h1>\n<ul>\n<li><strong>版本控制</strong>\n<ul>\n<li>Git</li>\n<li>GitHub/GitLab</li>\n</ul>\n</li>\n<li><strong>构建工具</strong>\n<ul>\n<li>Maven</li>\n<li>Gradle</li>\n</ul>\n</li>\n<li><strong>测试工具</strong>\n<ul>\n<li>JUnit</li>\n<li>Mockito</li>\n</ul>\n</li>\n<li><strong>学习资源</strong>\n<ul>\n<li>书籍：《Java编程思想》、《Effective Java》</li>\n<li>在线课程：Coursera、Udemy、慕课网</li>\n<li>官方文档：Oracle Java Documentation</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"社区和论坛\"><a class=\"markdownIt-Anchor\" href=\"#社区和论坛\"></a> 社区和论坛</h1>\n<ul>\n<li>Stack Overflow</li>\n<li>GitHub</li>\n<li>CSDN</li>\n<li>掘金</li>\n</ul>\n<p>通过以上阶段的学习和实践，可以逐步掌握Java编程，并在实际项目中应用所学知识。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2025/jpeg/21987629/1738719316130-af7cc101-fe0c-4151-a070-58af9f497ae0.jpeg\" alt=\"画板\" /></p>\n","excerpt":"","more":"<p>学习Java的路线可以分为几个阶段，从基础到高级，逐步深入。以下是一个常见的学习路线：</p>\n<h1 id=\"基础阶段\"><a class=\"markdownIt-Anchor\" href=\"#基础阶段\"></a> 基础阶段</h1>\n<ul>\n<li><strong>Java简介</strong>\n<ul>\n<li>Java的历史和特点</li>\n<li>Java的应用领域</li>\n<li>JDK、JRE、JVM的区别</li>\n</ul>\n</li>\n<li><strong>开发环境搭建</strong>\n<ul>\n<li>安装JDK</li>\n<li>配置环境变量</li>\n<li>安装IDE（如IntelliJ IDEA、Eclipse）</li>\n</ul>\n</li>\n<li><strong>基础语法</strong>\n<ul>\n<li>数据类型、变量、常量</li>\n<li>运算符</li>\n<li>控制流程（if、switch、for、while等）</li>\n<li>数组</li>\n</ul>\n</li>\n<li><strong>面向对象编程（OOP）</strong>\n<ul>\n<li>类和对象</li>\n<li>继承、封装、多态</li>\n<li>抽象类和接口</li>\n<li>构造方法</li>\n<li>方法重载和重写</li>\n</ul>\n</li>\n<li><strong>异常处理</strong>\n<ul>\n<li>异常的分类</li>\n<li>try-catch-finally</li>\n<li>自定义异常</li>\n</ul>\n</li>\n<li><strong>常用类库</strong>\n<ul>\n<li>String、StringBuilder、StringBuffer</li>\n<li>集合框架（List、Set、Map等）</li>\n<li>日期和时间处理</li>\n<li>文件目录操作（对文件本身进行操作，而非文件内容，File、Path、Files、Paths等）</li>\n<li>输入输出流（I/O）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"中级阶段\"><a class=\"markdownIt-Anchor\" href=\"#中级阶段\"></a> 中级阶段</h1>\n<ul>\n<li><strong>泛型</strong>\n<ul>\n<li>泛型类和泛型方法</li>\n<li>类型擦除</li>\n</ul>\n</li>\n<li><strong>集合框架深入</strong>\n<ul>\n<li>ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等</li>\n<li>迭代器</li>\n<li>比较器（Comparable和Comparator）</li>\n</ul>\n</li>\n<li><strong>多线程编程</strong>\n<ul>\n<li>线程的创建和启动</li>\n<li>线程同步（synchronized、Lock）</li>\n<li>线程池</li>\n<li>并发工具类（CountDownLatch、CyclicBarrier等）</li>\n</ul>\n</li>\n<li><strong>网络编程</strong>\n<ul>\n<li>Socket编程</li>\n<li>HTTP请求处理</li>\n<li>NIO（非阻塞I/O）</li>\n</ul>\n</li>\n<li><strong>反射机制</strong>\n<ul>\n<li>Class类</li>\n<li>获取类信息</li>\n<li>动态代理</li>\n</ul>\n</li>\n<li><strong>注解（Annotation）</strong>\n<ul>\n<li>内置注解</li>\n<li>自定义注解</li>\n<li>注解处理器</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"高级阶段\"><a class=\"markdownIt-Anchor\" href=\"#高级阶段\"></a> 高级阶段</h1>\n<ul>\n<li><strong>Java 8+ 新特性</strong>\n<ul>\n<li>Lambda表达式</li>\n<li>Stream API</li>\n<li>新的日期和时间API（LocalDate、LocalTime等）</li>\n<li>Optional类</li>\n</ul>\n</li>\n<li><strong>JVM和性能调优</strong>\n<ul>\n<li>JVM内存模型</li>\n<li>垃圾回收机制</li>\n<li>JVM参数调优</li>\n<li>性能监控工具（如JVisualVM、JConsole）</li>\n</ul>\n</li>\n<li><strong>设计模式</strong>\n<ul>\n<li>单例模式</li>\n<li>工厂模式</li>\n<li>观察者模式</li>\n<li>装饰器模式等</li>\n</ul>\n</li>\n<li><strong>数据库编程</strong>\n<ul>\n<li>JDBC连接数据库</li>\n<li>事务管理</li>\n<li>ORM框架（如Hibernate、MyBatis）</li>\n</ul>\n</li>\n<li><strong>Spring框架</strong>\n<ul>\n<li>Spring Core</li>\n<li>Spring MVC</li>\n<li>Spring Boot</li>\n<li>Spring Data JPA</li>\n<li>Spring Security</li>\n</ul>\n</li>\n<li><strong>微服务架构</strong>\n<ul>\n<li>Spring Cloud</li>\n<li>服务注册与发现（Eureka、Consul）</li>\n<li>配置中心（Spring Cloud Config）</li>\n<li>服务网关（Zuul、Gateway）</li>\n<li>负载均衡（Ribbon）</li>\n<li>熔断器（Hystrix）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"实战项目\"><a class=\"markdownIt-Anchor\" href=\"#实战项目\"></a> 实战项目</h1>\n<ul>\n<li><strong>小型项目</strong>\n<ul>\n<li>图书管理系统</li>\n<li>学生成绩管理系统</li>\n</ul>\n</li>\n<li><strong>中型项目</strong>\n<ul>\n<li>在线商城</li>\n<li>博客系统</li>\n</ul>\n</li>\n<li><strong>大型项目</strong>\n<ul>\n<li>分布式电商平台</li>\n<li>社交网络平台</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"持续学习\"><a class=\"markdownIt-Anchor\" href=\"#持续学习\"></a> 持续学习</h1>\n<ul>\n<li><strong>参与开源项目</strong></li>\n<li><strong>阅读源码</strong></li>\n<li><strong>学习新技术</strong>\n<ul>\n<li>Kotlin</li>\n<li>Scala</li>\n<li>云计算（Docker、Kubernetes）</li>\n<li>大数据（Hadoop、Spark）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"工具和资源\"><a class=\"markdownIt-Anchor\" href=\"#工具和资源\"></a> 工具和资源</h1>\n<ul>\n<li><strong>版本控制</strong>\n<ul>\n<li>Git</li>\n<li>GitHub/GitLab</li>\n</ul>\n</li>\n<li><strong>构建工具</strong>\n<ul>\n<li>Maven</li>\n<li>Gradle</li>\n</ul>\n</li>\n<li><strong>测试工具</strong>\n<ul>\n<li>JUnit</li>\n<li>Mockito</li>\n</ul>\n</li>\n<li><strong>学习资源</strong>\n<ul>\n<li>书籍：《Java编程思想》、《Effective Java》</li>\n<li>在线课程：Coursera、Udemy、慕课网</li>\n<li>官方文档：Oracle Java Documentation</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"社区和论坛\"><a class=\"markdownIt-Anchor\" href=\"#社区和论坛\"></a> 社区和论坛</h1>\n<ul>\n<li>Stack Overflow</li>\n<li>GitHub</li>\n<li>CSDN</li>\n<li>掘金</li>\n</ul>\n<p>通过以上阶段的学习和实践，可以逐步掌握Java编程，并在实际项目中应用所学知识。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2025/jpeg/21987629/1738719316130-af7cc101-fe0c-4151-a070-58af9f497ae0.jpeg\" alt=\"画板\" /></p>\n"},{"title":"Java基础知识点","date":"2025-03-10T08:22:08.000Z","_content":"本文主要对Java基础知识点进行总结。\n# 数据类型\n## 基本类型\nJava语言提供了以下基本数据类型：\n- 整型：byte、short、int、long\n- 浮点型：float、double\n- 字符型：char\n- 布尔型：boolean\n###  byte 转换为 String\n可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码。\n###  bytes 转换为 long\nString接收bytes的构造器转成String，再Long.parseLong()转换为long。\n### 隐式类型转化\n+= 隐式的将加操作的结果类型强制转换为持有结果的类型。\n如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。\n以下代码会出现编译错误，因为`s + 1`结果为 int 类型，不能隐式地将 int 类型下转型为 short 类型。\n```java\nshort s = 1; \ns = s + 1; // 编译错误\n```\n但是使用`+=`可以执行隐式类型转化，编译器会自动将 int 类型下转型为 short 类型。\n```java\nshort s = 1;\ns += 1; // 隐式类型转化，相当于 s = (short) (s + 1);\n```\n\n### 浮点数计算\n强制转换为整数，会舍弃小数部分，如需四舍五入，可加上0.5后再转换。\n\n## 包装类型\n基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。 \n包装类型都是不可变对象，不可变对象指对象一旦被创建，状态就不能再改变，任何修改都会创建一个新的对象。\n\n## 缓存池\nnew Integer(123) 与 Integer.valueOf(123) 的区别在于:\n- new Integer(123) 每次都会新建一个对象\n- Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用 \n  在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\n\n# 关键字\n## final\nfinal 关键字用来修饰变量、方法、类，表示该元素的值不能被修改。\n- final 修饰的变量必须在声明时初始化，而且只能初始化一次。\n- final 修饰的方法不能被重写。\n  private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\n- final 修饰的类不能被继承。\n\n## static\nstatic 关键字用来修饰成员变量、方法、代码块和内部类，表示该成员属于类，不依赖于实例。\n### 静态导包\n静态导包可以避免使用类名来访问静态成员，从而简化代码，但可读性大大降低。\n### 初始化顺序\n1. 父类静态变量、静态代码块\n2. 子类静态变量、静态代码块\n3. 父类实例变量、普通语句块\n4. 父类构造函数\n5. 子类实例变量、普通语句块\n6. 子类构造函数\n# 面向对象编程\n## 类与对象\n## 封装、继承、多态\n### this() & super()在构造方法中的区别调用\nsuper()必须写在子类构造方法的第一行, 否则编译不通过\nsuper从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行\n尽管可以用this调用一个构造器, 却不能调用2个\nthis和super不能出现在同一个构造器中, 否则编译不通过\nthis()、super()都指的对象,不可以在static环境中使用\n本质this指向本对象的指针。super是一个关键字\n\n# Object通用方法\nObject类提供了11个通用方法（其中wait()方法被重载了3次），这些方法可以应用于所有对象：\n- hashCode(),equals()\n- clone()\n- toString()\n- notify(),notifyAll(),wait()\n- getClass()\n- finalize()\n## equals()方法\nequals()方法用来判断两个对象是否相等，默认情况下，equals()方法比较的是对象的内存地址。重写equals()方法时，需要遵循以下规则：\n- 自反性：对于任何非空对象 x，x.equals(x) 应该返回 true。\n- 对称性：对于任何非空对象 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应该返回 true。\n- 传递性：对于任何非空对象 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应该返回 true。\n- 一致性：对于任何非空对象 x 和 y，只要 x.equals(y) 返回 true，那么反复调用 x.equals(y) 始终返回 true。\n- 对于任何非空对象 x，x.equals(null) 应该返回 false。\n## clone()方法\nObject类中的clone()方法是protected修饰的，因此不能直接调用，需要子类重写该方法。 子类重写clone()方法时，需要实现Cloneable接口。如果一个类没有实现Cloneable接口又调用了clone()方法，就会抛出CloneNotSupportedException异常。\n### clone()的替代方案\n使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。\n\n# 异常处理\n## 异常的分类\n在 Java 中，异常（Exception）是程序运行时发生的错误或异常情况。Java 的异常机制基于类的层次结构，所有异常类都继承自 Throwable 类。 异常主要分为两大类： Error 和 Exception。\n- Error 用来表示 JVM 无法处理的错误，通常不需要捕获和处理。如 OutOfMemoryError、StackOverflowError 等。\n- Exception 用来表示程序运行过程中可能出现的异常，通常可以捕获和处理，非为两种：\n  - 运行时异常（Unchecked Exception）：通常由程序逻辑错误引起，不需要在编译时显式捕获或声明，如NullPointerException、IndexOutOfBoundsException等。\n  - 非运行时异常（Checked Exception）：通常由外部因素引起（如文件不存在、网络中断等），必须在编译时显式捕获或声明，如IOException、SQLException等。\n``` \nThrowable\n├── Error\n│   ├── OutOfMemoryError\n│   ├── StackOverflowError\n│   └── NoClassDefFoundError\n│   └── IOError\n│   └── ThreadDeath\n│   └── LinkageError\n└── Exception\n    ├── RuntimeException\n    │   ├── NullPointerException\n    │   ├── IndexOutOfBoundsException\n    │   ├── ArithmeticException\n    │   ├── IllegalArgumentException\n    │   └── ClassCastException\n    └── 非运行时异常（Checked Exception）\n        ├── IOException\n        ├── SQLException\n        ├── FileNotFoundException\n        └── ClassNotFoundException\n```\n## 异常处理的语法\nJava 异常处理的语法格式如下：\n```java\ntry {\n    //可能发生异常的代码\n} catch (ExceptionType e) {\n    //捕获异常的处理代码\n} finally {\n    //不管是否发生异常，都会执行的代码\n}\n```\n- try 块：可能发生异常的代码。\n- catch 块：捕获异常的处理代码，可以有多个 catch 块，分别处理不同类型的异常。\n- finally 块：不管是否发生异常，都会执行的代码，通常用于释放资源。\n### finally 块\n当try和catch中有return时，finally仍然会执行，finally比return先执行\nfinally是在return后面的表达式运算后执行的，所以函数返回值是在finally执行前确定的。\n注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值\nfinally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电。\n\n# 常用类库\n## 字符串\n|比较内容|String|StringBuilder|StringBuffer|\n|----|---|----|----|\n|是否线程安全|是|否|是|\n|是否可变|否|是|是|\n|JDK版本||JDK5||\n\n","source":"_posts/Java基础知识点.md","raw":"---\ntitle: Java基础知识点\ndate: 2025-03-10 16:22:08\ntags:\n  - Java\n  - Java基础\ncategories:\n  - Java\n  - Java基础\n---\n本文主要对Java基础知识点进行总结。\n# 数据类型\n## 基本类型\nJava语言提供了以下基本数据类型：\n- 整型：byte、short、int、long\n- 浮点型：float、double\n- 字符型：char\n- 布尔型：boolean\n###  byte 转换为 String\n可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码。\n###  bytes 转换为 long\nString接收bytes的构造器转成String，再Long.parseLong()转换为long。\n### 隐式类型转化\n+= 隐式的将加操作的结果类型强制转换为持有结果的类型。\n如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。\n以下代码会出现编译错误，因为`s + 1`结果为 int 类型，不能隐式地将 int 类型下转型为 short 类型。\n```java\nshort s = 1; \ns = s + 1; // 编译错误\n```\n但是使用`+=`可以执行隐式类型转化，编译器会自动将 int 类型下转型为 short 类型。\n```java\nshort s = 1;\ns += 1; // 隐式类型转化，相当于 s = (short) (s + 1);\n```\n\n### 浮点数计算\n强制转换为整数，会舍弃小数部分，如需四舍五入，可加上0.5后再转换。\n\n## 包装类型\n基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。 \n包装类型都是不可变对象，不可变对象指对象一旦被创建，状态就不能再改变，任何修改都会创建一个新的对象。\n\n## 缓存池\nnew Integer(123) 与 Integer.valueOf(123) 的区别在于:\n- new Integer(123) 每次都会新建一个对象\n- Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用 \n  在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\n\n# 关键字\n## final\nfinal 关键字用来修饰变量、方法、类，表示该元素的值不能被修改。\n- final 修饰的变量必须在声明时初始化，而且只能初始化一次。\n- final 修饰的方法不能被重写。\n  private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\n- final 修饰的类不能被继承。\n\n## static\nstatic 关键字用来修饰成员变量、方法、代码块和内部类，表示该成员属于类，不依赖于实例。\n### 静态导包\n静态导包可以避免使用类名来访问静态成员，从而简化代码，但可读性大大降低。\n### 初始化顺序\n1. 父类静态变量、静态代码块\n2. 子类静态变量、静态代码块\n3. 父类实例变量、普通语句块\n4. 父类构造函数\n5. 子类实例变量、普通语句块\n6. 子类构造函数\n# 面向对象编程\n## 类与对象\n## 封装、继承、多态\n### this() & super()在构造方法中的区别调用\nsuper()必须写在子类构造方法的第一行, 否则编译不通过\nsuper从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行\n尽管可以用this调用一个构造器, 却不能调用2个\nthis和super不能出现在同一个构造器中, 否则编译不通过\nthis()、super()都指的对象,不可以在static环境中使用\n本质this指向本对象的指针。super是一个关键字\n\n# Object通用方法\nObject类提供了11个通用方法（其中wait()方法被重载了3次），这些方法可以应用于所有对象：\n- hashCode(),equals()\n- clone()\n- toString()\n- notify(),notifyAll(),wait()\n- getClass()\n- finalize()\n## equals()方法\nequals()方法用来判断两个对象是否相等，默认情况下，equals()方法比较的是对象的内存地址。重写equals()方法时，需要遵循以下规则：\n- 自反性：对于任何非空对象 x，x.equals(x) 应该返回 true。\n- 对称性：对于任何非空对象 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应该返回 true。\n- 传递性：对于任何非空对象 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应该返回 true。\n- 一致性：对于任何非空对象 x 和 y，只要 x.equals(y) 返回 true，那么反复调用 x.equals(y) 始终返回 true。\n- 对于任何非空对象 x，x.equals(null) 应该返回 false。\n## clone()方法\nObject类中的clone()方法是protected修饰的，因此不能直接调用，需要子类重写该方法。 子类重写clone()方法时，需要实现Cloneable接口。如果一个类没有实现Cloneable接口又调用了clone()方法，就会抛出CloneNotSupportedException异常。\n### clone()的替代方案\n使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。\n\n# 异常处理\n## 异常的分类\n在 Java 中，异常（Exception）是程序运行时发生的错误或异常情况。Java 的异常机制基于类的层次结构，所有异常类都继承自 Throwable 类。 异常主要分为两大类： Error 和 Exception。\n- Error 用来表示 JVM 无法处理的错误，通常不需要捕获和处理。如 OutOfMemoryError、StackOverflowError 等。\n- Exception 用来表示程序运行过程中可能出现的异常，通常可以捕获和处理，非为两种：\n  - 运行时异常（Unchecked Exception）：通常由程序逻辑错误引起，不需要在编译时显式捕获或声明，如NullPointerException、IndexOutOfBoundsException等。\n  - 非运行时异常（Checked Exception）：通常由外部因素引起（如文件不存在、网络中断等），必须在编译时显式捕获或声明，如IOException、SQLException等。\n``` \nThrowable\n├── Error\n│   ├── OutOfMemoryError\n│   ├── StackOverflowError\n│   └── NoClassDefFoundError\n│   └── IOError\n│   └── ThreadDeath\n│   └── LinkageError\n└── Exception\n    ├── RuntimeException\n    │   ├── NullPointerException\n    │   ├── IndexOutOfBoundsException\n    │   ├── ArithmeticException\n    │   ├── IllegalArgumentException\n    │   └── ClassCastException\n    └── 非运行时异常（Checked Exception）\n        ├── IOException\n        ├── SQLException\n        ├── FileNotFoundException\n        └── ClassNotFoundException\n```\n## 异常处理的语法\nJava 异常处理的语法格式如下：\n```java\ntry {\n    //可能发生异常的代码\n} catch (ExceptionType e) {\n    //捕获异常的处理代码\n} finally {\n    //不管是否发生异常，都会执行的代码\n}\n```\n- try 块：可能发生异常的代码。\n- catch 块：捕获异常的处理代码，可以有多个 catch 块，分别处理不同类型的异常。\n- finally 块：不管是否发生异常，都会执行的代码，通常用于释放资源。\n### finally 块\n当try和catch中有return时，finally仍然会执行，finally比return先执行\nfinally是在return后面的表达式运算后执行的，所以函数返回值是在finally执行前确定的。\n注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值\nfinally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电。\n\n# 常用类库\n## 字符串\n|比较内容|String|StringBuilder|StringBuffer|\n|----|---|----|----|\n|是否线程安全|是|否|是|\n|是否可变|否|是|是|\n|JDK版本||JDK5||\n\n","slug":"Java基础知识点","published":1,"updated":"2025-03-12T06:20:59.459Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16a000864v4an9zh7sz","content":"<p>本文主要对Java基础知识点进行总结。</p>\n<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\"></a> 数据类型</h1>\n<h2 id=\"基本类型\"><a class=\"markdownIt-Anchor\" href=\"#基本类型\"></a> 基本类型</h2>\n<p>Java语言提供了以下基本数据类型：</p>\n<ul>\n<li>整型：byte、short、int、long</li>\n<li>浮点型：float、double</li>\n<li>字符型：char</li>\n<li>布尔型：boolean</li>\n</ul>\n<h3 id=\"byte-转换为-string\"><a class=\"markdownIt-Anchor\" href=\"#byte-转换为-string\"></a> byte 转换为 String</h3>\n<p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码。</p>\n<h3 id=\"bytes-转换为-long\"><a class=\"markdownIt-Anchor\" href=\"#bytes-转换为-long\"></a> bytes 转换为 long</h3>\n<p>String接收bytes的构造器转成String，再Long.parseLong()转换为long。</p>\n<h3 id=\"隐式类型转化\"><a class=\"markdownIt-Anchor\" href=\"#隐式类型转化\"></a> 隐式类型转化</h3>\n<p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。<br />\n如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。<br />\n以下代码会出现编译错误，因为<code>s + 1</code>结果为 int 类型，不能隐式地将 int 类型下转型为 short 类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">short</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">s = s + <span class=\"number\">1</span>; <span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n<p>但是使用<code>+=</code>可以执行隐式类型转化，编译器会自动将 int 类型下转型为 short 类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">short</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">s += <span class=\"number\">1</span>; <span class=\"comment\">// 隐式类型转化，相当于 s = (short) (s + 1);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"浮点数计算\"><a class=\"markdownIt-Anchor\" href=\"#浮点数计算\"></a> 浮点数计算</h3>\n<p>强制转换为整数，会舍弃小数部分，如需四舍五入，可加上0.5后再转换。</p>\n<h2 id=\"包装类型\"><a class=\"markdownIt-Anchor\" href=\"#包装类型\"></a> 包装类型</h2>\n<p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。<br />\n包装类型都是不可变对象，不可变对象指对象一旦被创建，状态就不能再改变，任何修改都会创建一个新的对象。</p>\n<h2 id=\"缓存池\"><a class=\"markdownIt-Anchor\" href=\"#缓存池\"></a> 缓存池</h2>\n<p>new Integer(123) 与 Integer.valueOf(123) 的区别在于:</p>\n<ul>\n<li>new Integer(123) 每次都会新建一个对象</li>\n<li>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用<br />\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。</li>\n</ul>\n<h1 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\"></a> 关键字</h1>\n<h2 id=\"final\"><a class=\"markdownIt-Anchor\" href=\"#final\"></a> final</h2>\n<p>final 关键字用来修饰变量、方法、类，表示该元素的值不能被修改。</p>\n<ul>\n<li>final 修饰的变量必须在声明时初始化，而且只能初始化一次。</li>\n<li>final 修饰的方法不能被重写。<br />\nprivate 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</li>\n<li>final 修饰的类不能被继承。</li>\n</ul>\n<h2 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\"></a> static</h2>\n<p>static 关键字用来修饰成员变量、方法、代码块和内部类，表示该成员属于类，不依赖于实例。</p>\n<h3 id=\"静态导包\"><a class=\"markdownIt-Anchor\" href=\"#静态导包\"></a> 静态导包</h3>\n<p>静态导包可以避免使用类名来访问静态成员，从而简化代码，但可读性大大降低。</p>\n<h3 id=\"初始化顺序\"><a class=\"markdownIt-Anchor\" href=\"#初始化顺序\"></a> 初始化顺序</h3>\n<ol>\n<li>父类静态变量、静态代码块</li>\n<li>子类静态变量、静态代码块</li>\n<li>父类实例变量、普通语句块</li>\n<li>父类构造函数</li>\n<li>子类实例变量、普通语句块</li>\n<li>子类构造函数</li>\n</ol>\n<h1 id=\"面向对象编程\"><a class=\"markdownIt-Anchor\" href=\"#面向对象编程\"></a> 面向对象编程</h1>\n<h2 id=\"类与对象\"><a class=\"markdownIt-Anchor\" href=\"#类与对象\"></a> 类与对象</h2>\n<h2 id=\"封装-继承-多态\"><a class=\"markdownIt-Anchor\" href=\"#封装-继承-多态\"></a> 封装、继承、多态</h2>\n<h3 id=\"this-super在构造方法中的区别调用\"><a class=\"markdownIt-Anchor\" href=\"#this-super在构造方法中的区别调用\"></a> this() &amp; super()在构造方法中的区别调用</h3>\n<p>super()必须写在子类构造方法的第一行, 否则编译不通过<br />\nsuper从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行<br />\n尽管可以用this调用一个构造器, 却不能调用2个<br />\nthis和super不能出现在同一个构造器中, 否则编译不通过<br />\nthis()、super()都指的对象,不可以在static环境中使用<br />\n本质this指向本对象的指针。super是一个关键字</p>\n<h1 id=\"object通用方法\"><a class=\"markdownIt-Anchor\" href=\"#object通用方法\"></a> Object通用方法</h1>\n<p>Object类提供了11个通用方法（其中wait()方法被重载了3次），这些方法可以应用于所有对象：</p>\n<ul>\n<li>hashCode(),equals()</li>\n<li>clone()</li>\n<li>toString()</li>\n<li>notify(),notifyAll(),wait()</li>\n<li>getClass()</li>\n<li>finalize()</li>\n</ul>\n<h2 id=\"equals方法\"><a class=\"markdownIt-Anchor\" href=\"#equals方法\"></a> equals()方法</h2>\n<p>equals()方法用来判断两个对象是否相等，默认情况下，equals()方法比较的是对象的内存地址。重写equals()方法时，需要遵循以下规则：</p>\n<ul>\n<li>自反性：对于任何非空对象 x，x.equals(x) 应该返回 true。</li>\n<li>对称性：对于任何非空对象 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应该返回 true。</li>\n<li>传递性：对于任何非空对象 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应该返回 true。</li>\n<li>一致性：对于任何非空对象 x 和 y，只要 x.equals(y) 返回 true，那么反复调用 x.equals(y) 始终返回 true。</li>\n<li>对于任何非空对象 x，x.equals(null) 应该返回 false。</li>\n</ul>\n<h2 id=\"clone方法\"><a class=\"markdownIt-Anchor\" href=\"#clone方法\"></a> clone()方法</h2>\n<p>Object类中的clone()方法是protected修饰的，因此不能直接调用，需要子类重写该方法。 子类重写clone()方法时，需要实现Cloneable接口。如果一个类没有实现Cloneable接口又调用了clone()方法，就会抛出CloneNotSupportedException异常。</p>\n<h3 id=\"clone的替代方案\"><a class=\"markdownIt-Anchor\" href=\"#clone的替代方案\"></a> clone()的替代方案</h3>\n<p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。</p>\n<h1 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h1>\n<h2 id=\"异常的分类\"><a class=\"markdownIt-Anchor\" href=\"#异常的分类\"></a> 异常的分类</h2>\n<p>在 Java 中，异常（Exception）是程序运行时发生的错误或异常情况。Java 的异常机制基于类的层次结构，所有异常类都继承自 Throwable 类。 异常主要分为两大类： Error 和 Exception。</p>\n<ul>\n<li>Error 用来表示 JVM 无法处理的错误，通常不需要捕获和处理。如 OutOfMemoryError、StackOverflowError 等。</li>\n<li>Exception 用来表示程序运行过程中可能出现的异常，通常可以捕获和处理，非为两种：\n<ul>\n<li>运行时异常（Unchecked Exception）：通常由程序逻辑错误引起，不需要在编译时显式捕获或声明，如NullPointerException、IndexOutOfBoundsException等。</li>\n<li>非运行时异常（Checked Exception）：通常由外部因素引起（如文件不存在、网络中断等），必须在编译时显式捕获或声明，如IOException、SQLException等。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Throwable</span><br><span class=\"line\">├── Error</span><br><span class=\"line\">│   ├── OutOfMemoryError</span><br><span class=\"line\">│   ├── StackOverflowError</span><br><span class=\"line\">│   └── NoClassDefFoundError</span><br><span class=\"line\">│   └── IOError</span><br><span class=\"line\">│   └── ThreadDeath</span><br><span class=\"line\">│   └── LinkageError</span><br><span class=\"line\">└── Exception</span><br><span class=\"line\">    ├── RuntimeException</span><br><span class=\"line\">    │   ├── NullPointerException</span><br><span class=\"line\">    │   ├── IndexOutOfBoundsException</span><br><span class=\"line\">    │   ├── ArithmeticException</span><br><span class=\"line\">    │   ├── IllegalArgumentException</span><br><span class=\"line\">    │   └── ClassCastException</span><br><span class=\"line\">    └── 非运行时异常（Checked Exception）</span><br><span class=\"line\">        ├── IOException</span><br><span class=\"line\">        ├── SQLException</span><br><span class=\"line\">        ├── FileNotFoundException</span><br><span class=\"line\">        └── ClassNotFoundException</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理的语法\"><a class=\"markdownIt-Anchor\" href=\"#异常处理的语法\"></a> 异常处理的语法</h2>\n<p>Java 异常处理的语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可能发生异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//捕获异常的处理代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//不管是否发生异常，都会执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>try 块：可能发生异常的代码。</li>\n<li>catch 块：捕获异常的处理代码，可以有多个 catch 块，分别处理不同类型的异常。</li>\n<li>finally 块：不管是否发生异常，都会执行的代码，通常用于释放资源。</li>\n</ul>\n<h3 id=\"finally-块\"><a class=\"markdownIt-Anchor\" href=\"#finally-块\"></a> finally 块</h3>\n<p>当try和catch中有return时，finally仍然会执行，finally比return先执行<br />\nfinally是在return后面的表达式运算后执行的，所以函数返回值是在finally执行前确定的。<br />\n注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值<br />\nfinally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电。</p>\n<h1 id=\"常用类库\"><a class=\"markdownIt-Anchor\" href=\"#常用类库\"></a> 常用类库</h1>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h2>\n<table>\n<thead>\n<tr>\n<th>比较内容</th>\n<th>String</th>\n<th>StringBuilder</th>\n<th>StringBuffer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否线程安全</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>是否可变</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>JDK版本</td>\n<td></td>\n<td>JDK5</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>本文主要对Java基础知识点进行总结。</p>\n<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\"></a> 数据类型</h1>\n<h2 id=\"基本类型\"><a class=\"markdownIt-Anchor\" href=\"#基本类型\"></a> 基本类型</h2>\n<p>Java语言提供了以下基本数据类型：</p>\n<ul>\n<li>整型：byte、short、int、long</li>\n<li>浮点型：float、double</li>\n<li>字符型：char</li>\n<li>布尔型：boolean</li>\n</ul>\n<h3 id=\"byte-转换为-string\"><a class=\"markdownIt-Anchor\" href=\"#byte-转换为-string\"></a> byte 转换为 String</h3>\n<p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码。</p>\n<h3 id=\"bytes-转换为-long\"><a class=\"markdownIt-Anchor\" href=\"#bytes-转换为-long\"></a> bytes 转换为 long</h3>\n<p>String接收bytes的构造器转成String，再Long.parseLong()转换为long。</p>\n<h3 id=\"隐式类型转化\"><a class=\"markdownIt-Anchor\" href=\"#隐式类型转化\"></a> 隐式类型转化</h3>\n<p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。<br />\n如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。<br />\n以下代码会出现编译错误，因为<code>s + 1</code>结果为 int 类型，不能隐式地将 int 类型下转型为 short 类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">short</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">s = s + <span class=\"number\">1</span>; <span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n<p>但是使用<code>+=</code>可以执行隐式类型转化，编译器会自动将 int 类型下转型为 short 类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">short</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">s += <span class=\"number\">1</span>; <span class=\"comment\">// 隐式类型转化，相当于 s = (short) (s + 1);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"浮点数计算\"><a class=\"markdownIt-Anchor\" href=\"#浮点数计算\"></a> 浮点数计算</h3>\n<p>强制转换为整数，会舍弃小数部分，如需四舍五入，可加上0.5后再转换。</p>\n<h2 id=\"包装类型\"><a class=\"markdownIt-Anchor\" href=\"#包装类型\"></a> 包装类型</h2>\n<p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。<br />\n包装类型都是不可变对象，不可变对象指对象一旦被创建，状态就不能再改变，任何修改都会创建一个新的对象。</p>\n<h2 id=\"缓存池\"><a class=\"markdownIt-Anchor\" href=\"#缓存池\"></a> 缓存池</h2>\n<p>new Integer(123) 与 Integer.valueOf(123) 的区别在于:</p>\n<ul>\n<li>new Integer(123) 每次都会新建一个对象</li>\n<li>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用<br />\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。</li>\n</ul>\n<h1 id=\"关键字\"><a class=\"markdownIt-Anchor\" href=\"#关键字\"></a> 关键字</h1>\n<h2 id=\"final\"><a class=\"markdownIt-Anchor\" href=\"#final\"></a> final</h2>\n<p>final 关键字用来修饰变量、方法、类，表示该元素的值不能被修改。</p>\n<ul>\n<li>final 修饰的变量必须在声明时初始化，而且只能初始化一次。</li>\n<li>final 修饰的方法不能被重写。<br />\nprivate 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</li>\n<li>final 修饰的类不能被继承。</li>\n</ul>\n<h2 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\"></a> static</h2>\n<p>static 关键字用来修饰成员变量、方法、代码块和内部类，表示该成员属于类，不依赖于实例。</p>\n<h3 id=\"静态导包\"><a class=\"markdownIt-Anchor\" href=\"#静态导包\"></a> 静态导包</h3>\n<p>静态导包可以避免使用类名来访问静态成员，从而简化代码，但可读性大大降低。</p>\n<h3 id=\"初始化顺序\"><a class=\"markdownIt-Anchor\" href=\"#初始化顺序\"></a> 初始化顺序</h3>\n<ol>\n<li>父类静态变量、静态代码块</li>\n<li>子类静态变量、静态代码块</li>\n<li>父类实例变量、普通语句块</li>\n<li>父类构造函数</li>\n<li>子类实例变量、普通语句块</li>\n<li>子类构造函数</li>\n</ol>\n<h1 id=\"面向对象编程\"><a class=\"markdownIt-Anchor\" href=\"#面向对象编程\"></a> 面向对象编程</h1>\n<h2 id=\"类与对象\"><a class=\"markdownIt-Anchor\" href=\"#类与对象\"></a> 类与对象</h2>\n<h2 id=\"封装-继承-多态\"><a class=\"markdownIt-Anchor\" href=\"#封装-继承-多态\"></a> 封装、继承、多态</h2>\n<h3 id=\"this-super在构造方法中的区别调用\"><a class=\"markdownIt-Anchor\" href=\"#this-super在构造方法中的区别调用\"></a> this() &amp; super()在构造方法中的区别调用</h3>\n<p>super()必须写在子类构造方法的第一行, 否则编译不通过<br />\nsuper从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行<br />\n尽管可以用this调用一个构造器, 却不能调用2个<br />\nthis和super不能出现在同一个构造器中, 否则编译不通过<br />\nthis()、super()都指的对象,不可以在static环境中使用<br />\n本质this指向本对象的指针。super是一个关键字</p>\n<h1 id=\"object通用方法\"><a class=\"markdownIt-Anchor\" href=\"#object通用方法\"></a> Object通用方法</h1>\n<p>Object类提供了11个通用方法（其中wait()方法被重载了3次），这些方法可以应用于所有对象：</p>\n<ul>\n<li>hashCode(),equals()</li>\n<li>clone()</li>\n<li>toString()</li>\n<li>notify(),notifyAll(),wait()</li>\n<li>getClass()</li>\n<li>finalize()</li>\n</ul>\n<h2 id=\"equals方法\"><a class=\"markdownIt-Anchor\" href=\"#equals方法\"></a> equals()方法</h2>\n<p>equals()方法用来判断两个对象是否相等，默认情况下，equals()方法比较的是对象的内存地址。重写equals()方法时，需要遵循以下规则：</p>\n<ul>\n<li>自反性：对于任何非空对象 x，x.equals(x) 应该返回 true。</li>\n<li>对称性：对于任何非空对象 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应该返回 true。</li>\n<li>传递性：对于任何非空对象 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应该返回 true。</li>\n<li>一致性：对于任何非空对象 x 和 y，只要 x.equals(y) 返回 true，那么反复调用 x.equals(y) 始终返回 true。</li>\n<li>对于任何非空对象 x，x.equals(null) 应该返回 false。</li>\n</ul>\n<h2 id=\"clone方法\"><a class=\"markdownIt-Anchor\" href=\"#clone方法\"></a> clone()方法</h2>\n<p>Object类中的clone()方法是protected修饰的，因此不能直接调用，需要子类重写该方法。 子类重写clone()方法时，需要实现Cloneable接口。如果一个类没有实现Cloneable接口又调用了clone()方法，就会抛出CloneNotSupportedException异常。</p>\n<h3 id=\"clone的替代方案\"><a class=\"markdownIt-Anchor\" href=\"#clone的替代方案\"></a> clone()的替代方案</h3>\n<p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。</p>\n<h1 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h1>\n<h2 id=\"异常的分类\"><a class=\"markdownIt-Anchor\" href=\"#异常的分类\"></a> 异常的分类</h2>\n<p>在 Java 中，异常（Exception）是程序运行时发生的错误或异常情况。Java 的异常机制基于类的层次结构，所有异常类都继承自 Throwable 类。 异常主要分为两大类： Error 和 Exception。</p>\n<ul>\n<li>Error 用来表示 JVM 无法处理的错误，通常不需要捕获和处理。如 OutOfMemoryError、StackOverflowError 等。</li>\n<li>Exception 用来表示程序运行过程中可能出现的异常，通常可以捕获和处理，非为两种：\n<ul>\n<li>运行时异常（Unchecked Exception）：通常由程序逻辑错误引起，不需要在编译时显式捕获或声明，如NullPointerException、IndexOutOfBoundsException等。</li>\n<li>非运行时异常（Checked Exception）：通常由外部因素引起（如文件不存在、网络中断等），必须在编译时显式捕获或声明，如IOException、SQLException等。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Throwable</span><br><span class=\"line\">├── Error</span><br><span class=\"line\">│   ├── OutOfMemoryError</span><br><span class=\"line\">│   ├── StackOverflowError</span><br><span class=\"line\">│   └── NoClassDefFoundError</span><br><span class=\"line\">│   └── IOError</span><br><span class=\"line\">│   └── ThreadDeath</span><br><span class=\"line\">│   └── LinkageError</span><br><span class=\"line\">└── Exception</span><br><span class=\"line\">    ├── RuntimeException</span><br><span class=\"line\">    │   ├── NullPointerException</span><br><span class=\"line\">    │   ├── IndexOutOfBoundsException</span><br><span class=\"line\">    │   ├── ArithmeticException</span><br><span class=\"line\">    │   ├── IllegalArgumentException</span><br><span class=\"line\">    │   └── ClassCastException</span><br><span class=\"line\">    └── 非运行时异常（Checked Exception）</span><br><span class=\"line\">        ├── IOException</span><br><span class=\"line\">        ├── SQLException</span><br><span class=\"line\">        ├── FileNotFoundException</span><br><span class=\"line\">        └── ClassNotFoundException</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理的语法\"><a class=\"markdownIt-Anchor\" href=\"#异常处理的语法\"></a> 异常处理的语法</h2>\n<p>Java 异常处理的语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//可能发生异常的代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ExceptionType e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//捕获异常的处理代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//不管是否发生异常，都会执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>try 块：可能发生异常的代码。</li>\n<li>catch 块：捕获异常的处理代码，可以有多个 catch 块，分别处理不同类型的异常。</li>\n<li>finally 块：不管是否发生异常，都会执行的代码，通常用于释放资源。</li>\n</ul>\n<h3 id=\"finally-块\"><a class=\"markdownIt-Anchor\" href=\"#finally-块\"></a> finally 块</h3>\n<p>当try和catch中有return时，finally仍然会执行，finally比return先执行<br />\nfinally是在return后面的表达式运算后执行的，所以函数返回值是在finally执行前确定的。<br />\n注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值<br />\nfinally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电。</p>\n<h1 id=\"常用类库\"><a class=\"markdownIt-Anchor\" href=\"#常用类库\"></a> 常用类库</h1>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h2>\n<table>\n<thead>\n<tr>\n<th>比较内容</th>\n<th>String</th>\n<th>StringBuilder</th>\n<th>StringBuffer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否线程安全</td>\n<td>是</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>是否可变</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>JDK版本</td>\n<td></td>\n<td>JDK5</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Java文件目录操作核心类","date":"2025-03-06T06:32:00.000Z","_content":"在 Java 中，`File`、`Files`、`Path` 和 `Paths` 是与文件和目录操作相关的核心类。文件和目录操作是指对文件和目录的创建、查找和删除等操作，只对文件本身进行操作，而非对文件内容进行操作。\n\n# File\n`File` 类是 Java 早期版本（Java 1.0）中用于表示文件和目录路径的类。它提供了对文件和目录的基本操作，如创建、删除、重命名、检查属性等。\n\n## 主要方法\n```\n构造方法\nFile(String path)\nFile(String parent, String child)\nFile(File parent, String child)\n\n获取属性\ngetAbsolutePath()\ngetPath()\ngetName()\nlength() 返回文件长度，以字节为单位\n\n判断\nexists() 检查文件或目录是否存在\nisDirectory() 检查是否为目录\nisFile() 检查是否为文件。\n\n创建修改删除\ncreateNewFile() 创建一个新文件\nmkdir() 创建一个目录\nmkdirs() 创建多级目录\nrenameTo(File dest) 重命名文件或目录\ndelete() 删除文件或目录\n\n目录的遍历\nString[] list() 返回目录中的文件和子目录名称列表\nFile[] listFiles()\n```\n\n## 缺点\n+ 功能有限，不支持符号链接、文件属性等高级操作。\n+ 路径处理不够灵活，跨平台兼容性较差。\n\n# Path接口\n`Path` 是 Java 7 引入的 `java.nio.file` 包中的一个接口，用于表示文件或目录的路径。它是对 `File` 类的现代化替代，提供了更强大的路径操作功能。\n\n## 主要方法\n```\n判断\nstartsWith(Path other) 检查路径是否以指定路径开头\nendsWith(Path other) 检查路径是否以指定路径结尾\nisAbsolute() 检查路径是否为绝对路径\n\n获取\ngetParent() 返回路径的父目录部分\ngetFileName() 返回路径的文件名部分\ngetRoot() 返回路径的根目录部分\n\n转换\ntoAbsolutePath()\ntoFile()\ntoString()\n\n解析\nresolve(Path) 将两个路径合并\nresolve(String)\nresolveSibling(Path)\nresolveSibling(String)\n\n其他\nrelativize 返回两个路径的相对路径\nnormalize() 规范化路径（去除冗余部分）\n```\n\n# Paths\n`Paths` 是 Java 7 引入的工具类，用于创建 `Path` 对象。它提供了静态方法来构造 `Path` 实例。\n\n```\nget(String first, String... more)  根据字符串路径创建 `Path` 对象\nget(URI uri)   根据 URI 创建 Path 对象\n```\n\n# Files\n`Files` 是 Java 7 引入的工具类，提供了丰富的静态方法用于操作文件和目录。Files 类与 java.nio.file.Path 类一起工作，需要了解 Path 类，然后才能使用 Files 类。\n\n## 主要方法\n```\n创建目录和文件\ncreateDirectory(Path, attrs) 创建目录，若目录已存在，会抛异常，不能一次创建多级目录\ncreateDirectories(Path, attrs) 创建多级目录\ncreateFile(path, attrs) 创建一个新文件\n\n创建临时目录和文件\ncreateTempDirectory(dir,prefix, attrs)\ncreateTempDirectory(prefix, attrs)\ncreateTempFile(dir, prefix, suffix)\ncreateTempFile(prefix, suffix)\nprefix和suffix是可以为null的字符串，若为空则为随机字符串\n\n判断\nexists(Path path, LinkOption... options) 检查文件或目录是否存在\nisHidden\nisReadable，isWritable，isExecutable\nisDirectory 检查是否是目录\nisRegularFile 检查是否是普通文件\nisSymbolicLink\n\n获取文件信息\nsize() 返回文件的大小（字节数）\ngetOwner()\nreadAttributes(path,type,LinkOption) 读取类型为A的文件属性\n\n复制文件\ncopy(Path,OutputStream) 复制文件或目录\ncopy(Path,Path,CopyOption)\ncopy(InputStream,Path,CopyOption)\n\n移动文件/文件夹\nmove(Path source, Path target, CopyOption... options) 移动文件或目录\n\n删除文件/文件夹\nstatic void delete(Path path); // 如果要删除的文件不存在，这个方法就会抛出异常\nstatic boolean deleteIfExists(Path path); // 如果文件被此方法删除则返回 true\n\n访问目录中的项\nlist() 不会进入子目录\n\n遍历文件树\nwalk(pathToRoot,depth)\nstatic Path walkFileTree(Path start,\n                         FileVisitor<? super Path> visitor)\nstatic Path walkFileTree(Path start,\n                         Set<FileVisitOption> options,\n                         int maxDepth,\n                         FileVisitor<? super Path> visitor)\n\n读写文件(适用于处理中等长度的文本文件)\nreadAllBytes(path) 读取文件的所有字节\nreadAllLines(path,charset) 读取文件的所有行\nwrite(path,byte[],option)\nlines(Path path) 返回文件的流式行读取\n\n获取输入/输出流或者读入/写出器\nnewInputStream()\nnewOutputStream()\nnewBufferedReader()\nnewBufferedWriter()\n\n目录流\nnewDirectoryStream(Path, String glob) 可对遍历过程进行更加细粒度的控制\n```\n\n复制、移动文件时可指定CopyOption：\n\n```\nStandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性\nStandardCopyOption.COPY_ATTRIBUTES 复制所有的文件属性\nStandardCopyOption.REPLACE_EXISTING 覆盖已有的目标路径\n```\n\n获取输入/输出流或者读入/写出器可指定StandardOpenOption：\n\n```\nREAD\nWRITE\nAPPEND\nTRUNCATE_EXISTING\nCREATE_NEW\nCREATE\nDELETE_ON_CLOSE\n...\n```\n\n复制文件夹的时候，只能复制空文件夹，如果文件夹非空，需要递归复制，否则只能得到一个空文件夹，而文件夹里面的文件不会被复制。\n如果文件是目录，则该目录必须为空才能删除\n除了文件复制比较简洁通用，其他两个方法个人认为使用IO流或者NIO流比较方便一点。\n\n## walkFileTree()\nFiles类有两个重载的walkFileTree()方法：\n\n```\nstatic Path walkFileTree(Path start,\n                         FileVisitor<? super Path> visitor)\n\nstatic Path walkFileTree(Path start,\n                         Set<FileVisitOption> options,\n                         int maxDepth,\n                         FileVisitor<? super Path> visitor)\n```\n\nPath实例指向要遍历的目录，在遍历期间调用FileVisitor，必须实现 FileVisitor 接口，并将其实现的实例传递给 walkFileTree() 方法，如果不需要使用到所有方法，可以扩展SimpleFileVisitor类。FileVisitor接口定义如下：\n\n```java\npublic interface FileVisitor<T> {\n    FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) throws IOException; \n    FileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException;\n    FileVisitResult visitFileFailed(T file, IOException exc) throws IOException;\n    FileVisitResult postVisitDirectory(T dir, IOException exc) throws IOException;\n}\n```\n\n# 其他文件操作类\nFileOutputStream会自动创建文件，但是如果是多级目录，就创建不了并且报错。\n\n# 总结\n| 特性 | `File` 类 | `Path` 接口 | `Paths` 类 | `Files` 类 |\n| --- | --- | --- | --- | --- |\n| 引入版本 | Java 1.0 | Java 7 | Java 7 | Java 7 |\n| 功能 | 基本文件操作 | 路径操作 | 路径创建 | 高级文件操作 |\n| 路径表示 | 字符串路径 | 路径对象 | 路径对象 | 路径对象 |\n| 跨平台兼容性 | 较差 | 较好 | 较好 | 较好 |\n| 符号链接支持 | 不支持 | 支持 | 支持 | 支持 |\n| 流式操作 | 不支持 | 不支持 | 不支持 | 支持 |\n\n- `File`：适用于简单的文件操作，但功能有限。\n- `Path`：现代化的路径表示，支持更灵活的路径操作。\n- `Paths`：用于创建 `Path` 对象的工具类。\n- `Files`：提供了丰富的文件操作方法，是对 `File` 类的现代化替代。\n\n在 Java 7 及以上版本中，推荐使用 `Path`、`Paths` 和 `Files` 类进行文件和目录操作，因为它们功能更强大、兼容性更好。\n\n","source":"_posts/Java文件目录操作核心类.md","raw":"---\ntitle: Java文件目录操作核心类\ndate: 2025-03-06 14:32:00\ntags:\n  - Java\n  - Java基础\n  - 常用类库\ncategories:\n  - Java\n  - Java基础\n  - 常用类库\n---\n在 Java 中，`File`、`Files`、`Path` 和 `Paths` 是与文件和目录操作相关的核心类。文件和目录操作是指对文件和目录的创建、查找和删除等操作，只对文件本身进行操作，而非对文件内容进行操作。\n\n# File\n`File` 类是 Java 早期版本（Java 1.0）中用于表示文件和目录路径的类。它提供了对文件和目录的基本操作，如创建、删除、重命名、检查属性等。\n\n## 主要方法\n```\n构造方法\nFile(String path)\nFile(String parent, String child)\nFile(File parent, String child)\n\n获取属性\ngetAbsolutePath()\ngetPath()\ngetName()\nlength() 返回文件长度，以字节为单位\n\n判断\nexists() 检查文件或目录是否存在\nisDirectory() 检查是否为目录\nisFile() 检查是否为文件。\n\n创建修改删除\ncreateNewFile() 创建一个新文件\nmkdir() 创建一个目录\nmkdirs() 创建多级目录\nrenameTo(File dest) 重命名文件或目录\ndelete() 删除文件或目录\n\n目录的遍历\nString[] list() 返回目录中的文件和子目录名称列表\nFile[] listFiles()\n```\n\n## 缺点\n+ 功能有限，不支持符号链接、文件属性等高级操作。\n+ 路径处理不够灵活，跨平台兼容性较差。\n\n# Path接口\n`Path` 是 Java 7 引入的 `java.nio.file` 包中的一个接口，用于表示文件或目录的路径。它是对 `File` 类的现代化替代，提供了更强大的路径操作功能。\n\n## 主要方法\n```\n判断\nstartsWith(Path other) 检查路径是否以指定路径开头\nendsWith(Path other) 检查路径是否以指定路径结尾\nisAbsolute() 检查路径是否为绝对路径\n\n获取\ngetParent() 返回路径的父目录部分\ngetFileName() 返回路径的文件名部分\ngetRoot() 返回路径的根目录部分\n\n转换\ntoAbsolutePath()\ntoFile()\ntoString()\n\n解析\nresolve(Path) 将两个路径合并\nresolve(String)\nresolveSibling(Path)\nresolveSibling(String)\n\n其他\nrelativize 返回两个路径的相对路径\nnormalize() 规范化路径（去除冗余部分）\n```\n\n# Paths\n`Paths` 是 Java 7 引入的工具类，用于创建 `Path` 对象。它提供了静态方法来构造 `Path` 实例。\n\n```\nget(String first, String... more)  根据字符串路径创建 `Path` 对象\nget(URI uri)   根据 URI 创建 Path 对象\n```\n\n# Files\n`Files` 是 Java 7 引入的工具类，提供了丰富的静态方法用于操作文件和目录。Files 类与 java.nio.file.Path 类一起工作，需要了解 Path 类，然后才能使用 Files 类。\n\n## 主要方法\n```\n创建目录和文件\ncreateDirectory(Path, attrs) 创建目录，若目录已存在，会抛异常，不能一次创建多级目录\ncreateDirectories(Path, attrs) 创建多级目录\ncreateFile(path, attrs) 创建一个新文件\n\n创建临时目录和文件\ncreateTempDirectory(dir,prefix, attrs)\ncreateTempDirectory(prefix, attrs)\ncreateTempFile(dir, prefix, suffix)\ncreateTempFile(prefix, suffix)\nprefix和suffix是可以为null的字符串，若为空则为随机字符串\n\n判断\nexists(Path path, LinkOption... options) 检查文件或目录是否存在\nisHidden\nisReadable，isWritable，isExecutable\nisDirectory 检查是否是目录\nisRegularFile 检查是否是普通文件\nisSymbolicLink\n\n获取文件信息\nsize() 返回文件的大小（字节数）\ngetOwner()\nreadAttributes(path,type,LinkOption) 读取类型为A的文件属性\n\n复制文件\ncopy(Path,OutputStream) 复制文件或目录\ncopy(Path,Path,CopyOption)\ncopy(InputStream,Path,CopyOption)\n\n移动文件/文件夹\nmove(Path source, Path target, CopyOption... options) 移动文件或目录\n\n删除文件/文件夹\nstatic void delete(Path path); // 如果要删除的文件不存在，这个方法就会抛出异常\nstatic boolean deleteIfExists(Path path); // 如果文件被此方法删除则返回 true\n\n访问目录中的项\nlist() 不会进入子目录\n\n遍历文件树\nwalk(pathToRoot,depth)\nstatic Path walkFileTree(Path start,\n                         FileVisitor<? super Path> visitor)\nstatic Path walkFileTree(Path start,\n                         Set<FileVisitOption> options,\n                         int maxDepth,\n                         FileVisitor<? super Path> visitor)\n\n读写文件(适用于处理中等长度的文本文件)\nreadAllBytes(path) 读取文件的所有字节\nreadAllLines(path,charset) 读取文件的所有行\nwrite(path,byte[],option)\nlines(Path path) 返回文件的流式行读取\n\n获取输入/输出流或者读入/写出器\nnewInputStream()\nnewOutputStream()\nnewBufferedReader()\nnewBufferedWriter()\n\n目录流\nnewDirectoryStream(Path, String glob) 可对遍历过程进行更加细粒度的控制\n```\n\n复制、移动文件时可指定CopyOption：\n\n```\nStandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性\nStandardCopyOption.COPY_ATTRIBUTES 复制所有的文件属性\nStandardCopyOption.REPLACE_EXISTING 覆盖已有的目标路径\n```\n\n获取输入/输出流或者读入/写出器可指定StandardOpenOption：\n\n```\nREAD\nWRITE\nAPPEND\nTRUNCATE_EXISTING\nCREATE_NEW\nCREATE\nDELETE_ON_CLOSE\n...\n```\n\n复制文件夹的时候，只能复制空文件夹，如果文件夹非空，需要递归复制，否则只能得到一个空文件夹，而文件夹里面的文件不会被复制。\n如果文件是目录，则该目录必须为空才能删除\n除了文件复制比较简洁通用，其他两个方法个人认为使用IO流或者NIO流比较方便一点。\n\n## walkFileTree()\nFiles类有两个重载的walkFileTree()方法：\n\n```\nstatic Path walkFileTree(Path start,\n                         FileVisitor<? super Path> visitor)\n\nstatic Path walkFileTree(Path start,\n                         Set<FileVisitOption> options,\n                         int maxDepth,\n                         FileVisitor<? super Path> visitor)\n```\n\nPath实例指向要遍历的目录，在遍历期间调用FileVisitor，必须实现 FileVisitor 接口，并将其实现的实例传递给 walkFileTree() 方法，如果不需要使用到所有方法，可以扩展SimpleFileVisitor类。FileVisitor接口定义如下：\n\n```java\npublic interface FileVisitor<T> {\n    FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) throws IOException; \n    FileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException;\n    FileVisitResult visitFileFailed(T file, IOException exc) throws IOException;\n    FileVisitResult postVisitDirectory(T dir, IOException exc) throws IOException;\n}\n```\n\n# 其他文件操作类\nFileOutputStream会自动创建文件，但是如果是多级目录，就创建不了并且报错。\n\n# 总结\n| 特性 | `File` 类 | `Path` 接口 | `Paths` 类 | `Files` 类 |\n| --- | --- | --- | --- | --- |\n| 引入版本 | Java 1.0 | Java 7 | Java 7 | Java 7 |\n| 功能 | 基本文件操作 | 路径操作 | 路径创建 | 高级文件操作 |\n| 路径表示 | 字符串路径 | 路径对象 | 路径对象 | 路径对象 |\n| 跨平台兼容性 | 较差 | 较好 | 较好 | 较好 |\n| 符号链接支持 | 不支持 | 支持 | 支持 | 支持 |\n| 流式操作 | 不支持 | 不支持 | 不支持 | 支持 |\n\n- `File`：适用于简单的文件操作，但功能有限。\n- `Path`：现代化的路径表示，支持更灵活的路径操作。\n- `Paths`：用于创建 `Path` 对象的工具类。\n- `Files`：提供了丰富的文件操作方法，是对 `File` 类的现代化替代。\n\n在 Java 7 及以上版本中，推荐使用 `Path`、`Paths` 和 `Files` 类进行文件和目录操作，因为它们功能更强大、兼容性更好。\n\n","slug":"Java文件目录操作核心类","published":1,"updated":"2025-03-06T07:00:02.830Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16b000964v49oozdk6i","content":"<p>在 Java 中，<code>File</code>、<code>Files</code>、<code>Path</code> 和 <code>Paths</code> 是与文件和目录操作相关的核心类。文件和目录操作是指对文件和目录的创建、查找和删除等操作，只对文件本身进行操作，而非对文件内容进行操作。</p>\n<h1 id=\"file\"><a class=\"markdownIt-Anchor\" href=\"#file\"></a> File</h1>\n<p><code>File</code> 类是 Java 早期版本（Java 1.0）中用于表示文件和目录路径的类。它提供了对文件和目录的基本操作，如创建、删除、重命名、检查属性等。</p>\n<h2 id=\"主要方法\"><a class=\"markdownIt-Anchor\" href=\"#主要方法\"></a> 主要方法</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法</span><br><span class=\"line\">File(String path)</span><br><span class=\"line\">File(String parent, String child)</span><br><span class=\"line\">File(File parent, String child)</span><br><span class=\"line\"></span><br><span class=\"line\">获取属性</span><br><span class=\"line\">getAbsolutePath()</span><br><span class=\"line\">getPath()</span><br><span class=\"line\">getName()</span><br><span class=\"line\">length() 返回文件长度，以字节为单位</span><br><span class=\"line\"></span><br><span class=\"line\">判断</span><br><span class=\"line\">exists() 检查文件或目录是否存在</span><br><span class=\"line\">isDirectory() 检查是否为目录</span><br><span class=\"line\">isFile() 检查是否为文件。</span><br><span class=\"line\"></span><br><span class=\"line\">创建修改删除</span><br><span class=\"line\">createNewFile() 创建一个新文件</span><br><span class=\"line\">mkdir() 创建一个目录</span><br><span class=\"line\">mkdirs() 创建多级目录</span><br><span class=\"line\">renameTo(File dest) 重命名文件或目录</span><br><span class=\"line\">delete() 删除文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\">目录的遍历</span><br><span class=\"line\">String[] list() 返回目录中的文件和子目录名称列表</span><br><span class=\"line\">File[] listFiles()</span><br></pre></td></tr></table></figure>\n<h2 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\"></a> 缺点</h2>\n<ul>\n<li>功能有限，不支持符号链接、文件属性等高级操作。</li>\n<li>路径处理不够灵活，跨平台兼容性较差。</li>\n</ul>\n<h1 id=\"path接口\"><a class=\"markdownIt-Anchor\" href=\"#path接口\"></a> Path接口</h1>\n<p><code>Path</code> 是 Java 7 引入的 <code>java.nio.file</code> 包中的一个接口，用于表示文件或目录的路径。它是对 <code>File</code> 类的现代化替代，提供了更强大的路径操作功能。</p>\n<h2 id=\"主要方法-2\"><a class=\"markdownIt-Anchor\" href=\"#主要方法-2\"></a> 主要方法</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">判断</span><br><span class=\"line\">startsWith(Path other) 检查路径是否以指定路径开头</span><br><span class=\"line\">endsWith(Path other) 检查路径是否以指定路径结尾</span><br><span class=\"line\">isAbsolute() 检查路径是否为绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">获取</span><br><span class=\"line\">getParent() 返回路径的父目录部分</span><br><span class=\"line\">getFileName() 返回路径的文件名部分</span><br><span class=\"line\">getRoot() 返回路径的根目录部分</span><br><span class=\"line\"></span><br><span class=\"line\">转换</span><br><span class=\"line\">toAbsolutePath()</span><br><span class=\"line\">toFile()</span><br><span class=\"line\">toString()</span><br><span class=\"line\"></span><br><span class=\"line\">解析</span><br><span class=\"line\">resolve(Path) 将两个路径合并</span><br><span class=\"line\">resolve(String)</span><br><span class=\"line\">resolveSibling(Path)</span><br><span class=\"line\">resolveSibling(String)</span><br><span class=\"line\"></span><br><span class=\"line\">其他</span><br><span class=\"line\">relativize 返回两个路径的相对路径</span><br><span class=\"line\">normalize() 规范化路径（去除冗余部分）</span><br></pre></td></tr></table></figure>\n<h1 id=\"paths\"><a class=\"markdownIt-Anchor\" href=\"#paths\"></a> Paths</h1>\n<p><code>Paths</code> 是 Java 7 引入的工具类，用于创建 <code>Path</code> 对象。它提供了静态方法来构造 <code>Path</code> 实例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get(String first, String... more)  根据字符串路径创建 `Path` 对象</span><br><span class=\"line\">get(URI uri)   根据 URI 创建 Path 对象</span><br></pre></td></tr></table></figure>\n<h1 id=\"files\"><a class=\"markdownIt-Anchor\" href=\"#files\"></a> Files</h1>\n<p><code>Files</code> 是 Java 7 引入的工具类，提供了丰富的静态方法用于操作文件和目录。Files 类与 java.nio.file.Path 类一起工作，需要了解 Path 类，然后才能使用 Files 类。</p>\n<h2 id=\"主要方法-3\"><a class=\"markdownIt-Anchor\" href=\"#主要方法-3\"></a> 主要方法</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建目录和文件</span><br><span class=\"line\">createDirectory(Path, attrs) 创建目录，若目录已存在，会抛异常，不能一次创建多级目录</span><br><span class=\"line\">createDirectories(Path, attrs) 创建多级目录</span><br><span class=\"line\">createFile(path, attrs) 创建一个新文件</span><br><span class=\"line\"></span><br><span class=\"line\">创建临时目录和文件</span><br><span class=\"line\">createTempDirectory(dir,prefix, attrs)</span><br><span class=\"line\">createTempDirectory(prefix, attrs)</span><br><span class=\"line\">createTempFile(dir, prefix, suffix)</span><br><span class=\"line\">createTempFile(prefix, suffix)</span><br><span class=\"line\">prefix和suffix是可以为null的字符串，若为空则为随机字符串</span><br><span class=\"line\"></span><br><span class=\"line\">判断</span><br><span class=\"line\">exists(Path path, LinkOption... options) 检查文件或目录是否存在</span><br><span class=\"line\">isHidden</span><br><span class=\"line\">isReadable，isWritable，isExecutable</span><br><span class=\"line\">isDirectory 检查是否是目录</span><br><span class=\"line\">isRegularFile 检查是否是普通文件</span><br><span class=\"line\">isSymbolicLink</span><br><span class=\"line\"></span><br><span class=\"line\">获取文件信息</span><br><span class=\"line\">size() 返回文件的大小（字节数）</span><br><span class=\"line\">getOwner()</span><br><span class=\"line\">readAttributes(path,type,LinkOption) 读取类型为A的文件属性</span><br><span class=\"line\"></span><br><span class=\"line\">复制文件</span><br><span class=\"line\">copy(Path,OutputStream) 复制文件或目录</span><br><span class=\"line\">copy(Path,Path,CopyOption)</span><br><span class=\"line\">copy(InputStream,Path,CopyOption)</span><br><span class=\"line\"></span><br><span class=\"line\">移动文件/文件夹</span><br><span class=\"line\">move(Path source, Path target, CopyOption... options) 移动文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\">删除文件/文件夹</span><br><span class=\"line\">static void delete(Path path); // 如果要删除的文件不存在，这个方法就会抛出异常</span><br><span class=\"line\">static boolean deleteIfExists(Path path); // 如果文件被此方法删除则返回 true</span><br><span class=\"line\"></span><br><span class=\"line\">访问目录中的项</span><br><span class=\"line\">list() 不会进入子目录</span><br><span class=\"line\"></span><br><span class=\"line\">遍历文件树</span><br><span class=\"line\">walk(pathToRoot,depth)</span><br><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         Set&lt;FileVisitOption&gt; options,</span><br><span class=\"line\">                         int maxDepth,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br><span class=\"line\"></span><br><span class=\"line\">读写文件(适用于处理中等长度的文本文件)</span><br><span class=\"line\">readAllBytes(path) 读取文件的所有字节</span><br><span class=\"line\">readAllLines(path,charset) 读取文件的所有行</span><br><span class=\"line\">write(path,byte[],option)</span><br><span class=\"line\">lines(Path path) 返回文件的流式行读取</span><br><span class=\"line\"></span><br><span class=\"line\">获取输入/输出流或者读入/写出器</span><br><span class=\"line\">newInputStream()</span><br><span class=\"line\">newOutputStream()</span><br><span class=\"line\">newBufferedReader()</span><br><span class=\"line\">newBufferedWriter()</span><br><span class=\"line\"></span><br><span class=\"line\">目录流</span><br><span class=\"line\">newDirectoryStream(Path, String glob) 可对遍历过程进行更加细粒度的控制</span><br></pre></td></tr></table></figure>\n<p>复制、移动文件时可指定CopyOption：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</span><br><span class=\"line\">StandardCopyOption.COPY_ATTRIBUTES 复制所有的文件属性</span><br><span class=\"line\">StandardCopyOption.REPLACE_EXISTING 覆盖已有的目标路径</span><br></pre></td></tr></table></figure>\n<p>获取输入/输出流或者读入/写出器可指定StandardOpenOption：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">READ</span><br><span class=\"line\">WRITE</span><br><span class=\"line\">APPEND</span><br><span class=\"line\">TRUNCATE_EXISTING</span><br><span class=\"line\">CREATE_NEW</span><br><span class=\"line\">CREATE</span><br><span class=\"line\">DELETE_ON_CLOSE</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>复制文件夹的时候，只能复制空文件夹，如果文件夹非空，需要递归复制，否则只能得到一个空文件夹，而文件夹里面的文件不会被复制。<br />\n如果文件是目录，则该目录必须为空才能删除<br />\n除了文件复制比较简洁通用，其他两个方法个人认为使用IO流或者NIO流比较方便一点。</p>\n<h2 id=\"walkfiletree\"><a class=\"markdownIt-Anchor\" href=\"#walkfiletree\"></a> walkFileTree()</h2>\n<p>Files类有两个重载的walkFileTree()方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br><span class=\"line\"></span><br><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         Set&lt;FileVisitOption&gt; options,</span><br><span class=\"line\">                         int maxDepth,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br></pre></td></tr></table></figure>\n<p>Path实例指向要遍历的目录，在遍历期间调用FileVisitor，必须实现 FileVisitor 接口，并将其实现的实例传递给 walkFileTree() 方法，如果不需要使用到所有方法，可以扩展SimpleFileVisitor类。FileVisitor接口定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FileVisitor</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">preVisitDirectory</span><span class=\"params\">(T dir, BasicFileAttributes attrs)</span> <span class=\"keyword\">throws</span> IOException; </span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">visitFile</span><span class=\"params\">(T file, BasicFileAttributes attrs)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">visitFileFailed</span><span class=\"params\">(T file, IOException exc)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">postVisitDirectory</span><span class=\"params\">(T dir, IOException exc)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他文件操作类\"><a class=\"markdownIt-Anchor\" href=\"#其他文件操作类\"></a> 其他文件操作类</h1>\n<p>FileOutputStream会自动创建文件，但是如果是多级目录，就创建不了并且报错。</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>File</code> 类</th>\n<th><code>Path</code> 接口</th>\n<th><code>Paths</code> 类</th>\n<th><code>Files</code> 类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>引入版本</td>\n<td>Java 1.0</td>\n<td>Java 7</td>\n<td>Java 7</td>\n<td>Java 7</td>\n</tr>\n<tr>\n<td>功能</td>\n<td>基本文件操作</td>\n<td>路径操作</td>\n<td>路径创建</td>\n<td>高级文件操作</td>\n</tr>\n<tr>\n<td>路径表示</td>\n<td>字符串路径</td>\n<td>路径对象</td>\n<td>路径对象</td>\n<td>路径对象</td>\n</tr>\n<tr>\n<td>跨平台兼容性</td>\n<td>较差</td>\n<td>较好</td>\n<td>较好</td>\n<td>较好</td>\n</tr>\n<tr>\n<td>符号链接支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>流式操作</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>File</code>：适用于简单的文件操作，但功能有限。</li>\n<li><code>Path</code>：现代化的路径表示，支持更灵活的路径操作。</li>\n<li><code>Paths</code>：用于创建 <code>Path</code> 对象的工具类。</li>\n<li><code>Files</code>：提供了丰富的文件操作方法，是对 <code>File</code> 类的现代化替代。</li>\n</ul>\n<p>在 Java 7 及以上版本中，推荐使用 <code>Path</code>、<code>Paths</code> 和 <code>Files</code> 类进行文件和目录操作，因为它们功能更强大、兼容性更好。</p>\n","excerpt":"","more":"<p>在 Java 中，<code>File</code>、<code>Files</code>、<code>Path</code> 和 <code>Paths</code> 是与文件和目录操作相关的核心类。文件和目录操作是指对文件和目录的创建、查找和删除等操作，只对文件本身进行操作，而非对文件内容进行操作。</p>\n<h1 id=\"file\"><a class=\"markdownIt-Anchor\" href=\"#file\"></a> File</h1>\n<p><code>File</code> 类是 Java 早期版本（Java 1.0）中用于表示文件和目录路径的类。它提供了对文件和目录的基本操作，如创建、删除、重命名、检查属性等。</p>\n<h2 id=\"主要方法\"><a class=\"markdownIt-Anchor\" href=\"#主要方法\"></a> 主要方法</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法</span><br><span class=\"line\">File(String path)</span><br><span class=\"line\">File(String parent, String child)</span><br><span class=\"line\">File(File parent, String child)</span><br><span class=\"line\"></span><br><span class=\"line\">获取属性</span><br><span class=\"line\">getAbsolutePath()</span><br><span class=\"line\">getPath()</span><br><span class=\"line\">getName()</span><br><span class=\"line\">length() 返回文件长度，以字节为单位</span><br><span class=\"line\"></span><br><span class=\"line\">判断</span><br><span class=\"line\">exists() 检查文件或目录是否存在</span><br><span class=\"line\">isDirectory() 检查是否为目录</span><br><span class=\"line\">isFile() 检查是否为文件。</span><br><span class=\"line\"></span><br><span class=\"line\">创建修改删除</span><br><span class=\"line\">createNewFile() 创建一个新文件</span><br><span class=\"line\">mkdir() 创建一个目录</span><br><span class=\"line\">mkdirs() 创建多级目录</span><br><span class=\"line\">renameTo(File dest) 重命名文件或目录</span><br><span class=\"line\">delete() 删除文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\">目录的遍历</span><br><span class=\"line\">String[] list() 返回目录中的文件和子目录名称列表</span><br><span class=\"line\">File[] listFiles()</span><br></pre></td></tr></table></figure>\n<h2 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\"></a> 缺点</h2>\n<ul>\n<li>功能有限，不支持符号链接、文件属性等高级操作。</li>\n<li>路径处理不够灵活，跨平台兼容性较差。</li>\n</ul>\n<h1 id=\"path接口\"><a class=\"markdownIt-Anchor\" href=\"#path接口\"></a> Path接口</h1>\n<p><code>Path</code> 是 Java 7 引入的 <code>java.nio.file</code> 包中的一个接口，用于表示文件或目录的路径。它是对 <code>File</code> 类的现代化替代，提供了更强大的路径操作功能。</p>\n<h2 id=\"主要方法-2\"><a class=\"markdownIt-Anchor\" href=\"#主要方法-2\"></a> 主要方法</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">判断</span><br><span class=\"line\">startsWith(Path other) 检查路径是否以指定路径开头</span><br><span class=\"line\">endsWith(Path other) 检查路径是否以指定路径结尾</span><br><span class=\"line\">isAbsolute() 检查路径是否为绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">获取</span><br><span class=\"line\">getParent() 返回路径的父目录部分</span><br><span class=\"line\">getFileName() 返回路径的文件名部分</span><br><span class=\"line\">getRoot() 返回路径的根目录部分</span><br><span class=\"line\"></span><br><span class=\"line\">转换</span><br><span class=\"line\">toAbsolutePath()</span><br><span class=\"line\">toFile()</span><br><span class=\"line\">toString()</span><br><span class=\"line\"></span><br><span class=\"line\">解析</span><br><span class=\"line\">resolve(Path) 将两个路径合并</span><br><span class=\"line\">resolve(String)</span><br><span class=\"line\">resolveSibling(Path)</span><br><span class=\"line\">resolveSibling(String)</span><br><span class=\"line\"></span><br><span class=\"line\">其他</span><br><span class=\"line\">relativize 返回两个路径的相对路径</span><br><span class=\"line\">normalize() 规范化路径（去除冗余部分）</span><br></pre></td></tr></table></figure>\n<h1 id=\"paths\"><a class=\"markdownIt-Anchor\" href=\"#paths\"></a> Paths</h1>\n<p><code>Paths</code> 是 Java 7 引入的工具类，用于创建 <code>Path</code> 对象。它提供了静态方法来构造 <code>Path</code> 实例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get(String first, String... more)  根据字符串路径创建 `Path` 对象</span><br><span class=\"line\">get(URI uri)   根据 URI 创建 Path 对象</span><br></pre></td></tr></table></figure>\n<h1 id=\"files\"><a class=\"markdownIt-Anchor\" href=\"#files\"></a> Files</h1>\n<p><code>Files</code> 是 Java 7 引入的工具类，提供了丰富的静态方法用于操作文件和目录。Files 类与 java.nio.file.Path 类一起工作，需要了解 Path 类，然后才能使用 Files 类。</p>\n<h2 id=\"主要方法-3\"><a class=\"markdownIt-Anchor\" href=\"#主要方法-3\"></a> 主要方法</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建目录和文件</span><br><span class=\"line\">createDirectory(Path, attrs) 创建目录，若目录已存在，会抛异常，不能一次创建多级目录</span><br><span class=\"line\">createDirectories(Path, attrs) 创建多级目录</span><br><span class=\"line\">createFile(path, attrs) 创建一个新文件</span><br><span class=\"line\"></span><br><span class=\"line\">创建临时目录和文件</span><br><span class=\"line\">createTempDirectory(dir,prefix, attrs)</span><br><span class=\"line\">createTempDirectory(prefix, attrs)</span><br><span class=\"line\">createTempFile(dir, prefix, suffix)</span><br><span class=\"line\">createTempFile(prefix, suffix)</span><br><span class=\"line\">prefix和suffix是可以为null的字符串，若为空则为随机字符串</span><br><span class=\"line\"></span><br><span class=\"line\">判断</span><br><span class=\"line\">exists(Path path, LinkOption... options) 检查文件或目录是否存在</span><br><span class=\"line\">isHidden</span><br><span class=\"line\">isReadable，isWritable，isExecutable</span><br><span class=\"line\">isDirectory 检查是否是目录</span><br><span class=\"line\">isRegularFile 检查是否是普通文件</span><br><span class=\"line\">isSymbolicLink</span><br><span class=\"line\"></span><br><span class=\"line\">获取文件信息</span><br><span class=\"line\">size() 返回文件的大小（字节数）</span><br><span class=\"line\">getOwner()</span><br><span class=\"line\">readAttributes(path,type,LinkOption) 读取类型为A的文件属性</span><br><span class=\"line\"></span><br><span class=\"line\">复制文件</span><br><span class=\"line\">copy(Path,OutputStream) 复制文件或目录</span><br><span class=\"line\">copy(Path,Path,CopyOption)</span><br><span class=\"line\">copy(InputStream,Path,CopyOption)</span><br><span class=\"line\"></span><br><span class=\"line\">移动文件/文件夹</span><br><span class=\"line\">move(Path source, Path target, CopyOption... options) 移动文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\">删除文件/文件夹</span><br><span class=\"line\">static void delete(Path path); // 如果要删除的文件不存在，这个方法就会抛出异常</span><br><span class=\"line\">static boolean deleteIfExists(Path path); // 如果文件被此方法删除则返回 true</span><br><span class=\"line\"></span><br><span class=\"line\">访问目录中的项</span><br><span class=\"line\">list() 不会进入子目录</span><br><span class=\"line\"></span><br><span class=\"line\">遍历文件树</span><br><span class=\"line\">walk(pathToRoot,depth)</span><br><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         Set&lt;FileVisitOption&gt; options,</span><br><span class=\"line\">                         int maxDepth,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br><span class=\"line\"></span><br><span class=\"line\">读写文件(适用于处理中等长度的文本文件)</span><br><span class=\"line\">readAllBytes(path) 读取文件的所有字节</span><br><span class=\"line\">readAllLines(path,charset) 读取文件的所有行</span><br><span class=\"line\">write(path,byte[],option)</span><br><span class=\"line\">lines(Path path) 返回文件的流式行读取</span><br><span class=\"line\"></span><br><span class=\"line\">获取输入/输出流或者读入/写出器</span><br><span class=\"line\">newInputStream()</span><br><span class=\"line\">newOutputStream()</span><br><span class=\"line\">newBufferedReader()</span><br><span class=\"line\">newBufferedWriter()</span><br><span class=\"line\"></span><br><span class=\"line\">目录流</span><br><span class=\"line\">newDirectoryStream(Path, String glob) 可对遍历过程进行更加细粒度的控制</span><br></pre></td></tr></table></figure>\n<p>复制、移动文件时可指定CopyOption：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</span><br><span class=\"line\">StandardCopyOption.COPY_ATTRIBUTES 复制所有的文件属性</span><br><span class=\"line\">StandardCopyOption.REPLACE_EXISTING 覆盖已有的目标路径</span><br></pre></td></tr></table></figure>\n<p>获取输入/输出流或者读入/写出器可指定StandardOpenOption：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">READ</span><br><span class=\"line\">WRITE</span><br><span class=\"line\">APPEND</span><br><span class=\"line\">TRUNCATE_EXISTING</span><br><span class=\"line\">CREATE_NEW</span><br><span class=\"line\">CREATE</span><br><span class=\"line\">DELETE_ON_CLOSE</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>复制文件夹的时候，只能复制空文件夹，如果文件夹非空，需要递归复制，否则只能得到一个空文件夹，而文件夹里面的文件不会被复制。<br />\n如果文件是目录，则该目录必须为空才能删除<br />\n除了文件复制比较简洁通用，其他两个方法个人认为使用IO流或者NIO流比较方便一点。</p>\n<h2 id=\"walkfiletree\"><a class=\"markdownIt-Anchor\" href=\"#walkfiletree\"></a> walkFileTree()</h2>\n<p>Files类有两个重载的walkFileTree()方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br><span class=\"line\"></span><br><span class=\"line\">static Path walkFileTree(Path start,</span><br><span class=\"line\">                         Set&lt;FileVisitOption&gt; options,</span><br><span class=\"line\">                         int maxDepth,</span><br><span class=\"line\">                         FileVisitor&lt;? super Path&gt; visitor)</span><br></pre></td></tr></table></figure>\n<p>Path实例指向要遍历的目录，在遍历期间调用FileVisitor，必须实现 FileVisitor 接口，并将其实现的实例传递给 walkFileTree() 方法，如果不需要使用到所有方法，可以扩展SimpleFileVisitor类。FileVisitor接口定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FileVisitor</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">preVisitDirectory</span><span class=\"params\">(T dir, BasicFileAttributes attrs)</span> <span class=\"keyword\">throws</span> IOException; </span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">visitFile</span><span class=\"params\">(T file, BasicFileAttributes attrs)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">visitFileFailed</span><span class=\"params\">(T file, IOException exc)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">    FileVisitResult <span class=\"title function_\">postVisitDirectory</span><span class=\"params\">(T dir, IOException exc)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他文件操作类\"><a class=\"markdownIt-Anchor\" href=\"#其他文件操作类\"></a> 其他文件操作类</h1>\n<p>FileOutputStream会自动创建文件，但是如果是多级目录，就创建不了并且报错。</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>File</code> 类</th>\n<th><code>Path</code> 接口</th>\n<th><code>Paths</code> 类</th>\n<th><code>Files</code> 类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>引入版本</td>\n<td>Java 1.0</td>\n<td>Java 7</td>\n<td>Java 7</td>\n<td>Java 7</td>\n</tr>\n<tr>\n<td>功能</td>\n<td>基本文件操作</td>\n<td>路径操作</td>\n<td>路径创建</td>\n<td>高级文件操作</td>\n</tr>\n<tr>\n<td>路径表示</td>\n<td>字符串路径</td>\n<td>路径对象</td>\n<td>路径对象</td>\n<td>路径对象</td>\n</tr>\n<tr>\n<td>跨平台兼容性</td>\n<td>较差</td>\n<td>较好</td>\n<td>较好</td>\n<td>较好</td>\n</tr>\n<tr>\n<td>符号链接支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>流式操作</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>File</code>：适用于简单的文件操作，但功能有限。</li>\n<li><code>Path</code>：现代化的路径表示，支持更灵活的路径操作。</li>\n<li><code>Paths</code>：用于创建 <code>Path</code> 对象的工具类。</li>\n<li><code>Files</code>：提供了丰富的文件操作方法，是对 <code>File</code> 类的现代化替代。</li>\n</ul>\n<p>在 Java 7 及以上版本中，推荐使用 <code>Path</code>、<code>Paths</code> 和 <code>Files</code> 类进行文件和目录操作，因为它们功能更强大、兼容性更好。</p>\n"},{"title":"Java注解机制","date":"2025-03-13T07:52:02.000Z","_content":"# 介绍\n注解（Annotation）是Java5引入的一个特性，本质是一个继承了`java.lang.annotation.Annotation`的接口。通过 Java 的反射机制相关 API 来访问注解信息，框架或工具中的类可以根据这些信息来决定如何使用程序元素或改变它们的行为。\n\n注解通常应应用于 `public` 方法上，这是由 AOP（面向切面编程）的本质决定的。如果注解应用于 `protected` 或 `private` 方法上，可能会被忽略。\n\n## 主要作用\n1. 生成文档，通过代码里标识的元数据生成javadoc文档。\n2. 编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。\n3. 编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。\n4. 运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。\n\n## 注解分类\n注解可以分为以下三类：\n\n+ Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings\n    - @Override用于标明重写某个方法\n    - @Deprecated用于标明某个类或方法过时\n    - @SuppressWarnings用于标明要忽略的警告\n+ 元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented\n    - @Retention用于标明注解被保留的阶段\n    - @Target用于标明注解使用的范围，如方法、类、接口等\n    - @Inherited用于标明注解可继承\n    - @Documented用于标明是否生成javadoc文档\n+ 自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解\n\n# Java内置注解\n## @Override\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n\n## @Deprecated\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})\npublic @interface Deprecated {\n}\n```\n\n该注解能够保留到运行时。\n\n## @SuppressWarnings\n```java\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface SuppressWarnings {\n    String[] value();\n}\n```\n\n可以取得值：\n\n+ all：抑制所有警告\n+ boxing：抑制装箱、拆箱操作时候的警告\n+ cast：抑制映射相关的警告\n+ dep-ann：抑制启用注释的警告\n+ deprecation：抑制过期方法警告\n+ fallthrough：抑制确在switch中缺失breaks的警告\n+ finally：抑制finally模块没有返回的警告\n+ hiding：抑制与隐藏变数的局部变量相关的警告\n+ incomplete-switch：忽略没有完整的switch语句\n+ nls：忽略非nls格式的字符\n+ null：忽略对null的操作\n+ rawtype：使用generics时忽略没有指定相应的类型\n+ restriction：抑制与使用不建议或禁止参照相关的警告\n+ serial：忽略在serializable类中没有声明serialVersionUID变量\n+ static-access：抑制不正确的静态访问方式警告\n+ synthetic-access：抑制没有按最优方法访问内部类的警告\n+ unchecked：抑制没有进行类型检查操作的警告\n+ unqualified-field-access：抑制没有权限访问的域的警告\n+ unused：抑制没被使用过的代码的警告\n\n\n\n# 元注解\n在JDK 1.5中提供了4个标准的元注解：@Target，@Retention，@Documented，@Inherited, 在JDK 1.8中提供了两个元注解 @Repeatable和@Native。\n\n## @Target\n`@Target`注解的作用是：描述注解的使用范围（即：被修饰的注解可以用在什么地方） 。它的取值范围定义在ElementType 枚举中。\n\n```java\npublic enum ElementType { \n    TYPE, // 类、接口、枚举类 \n    FIELD, // 成员变量（包括：枚举常量） \n    METHOD, // 成员方法 \n    PARAMETER, // 方法参数\n    CONSTRUCTOR, // 构造方法\n    LOCAL_VARIABLE, // 局部变量\n    ANNOTATION_TYPE, // 注解类\n    PACKAGE, // 包\n    TYPE_PARAMETER, // 类型参数，JDK 1.8 新增 \n    TYPE_USE // 使用类型的任何地方，包括TYPE和TYPE_PARAMETER，JDK 1.8 新增 \n}\n```\n\n## @Retention\nReteniton注解的作用是：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时） 。一共有三种策略，定义在RetentionPolicy枚举中。\n\n```java\npublic enum RetentionPolicy { \n    SOURCE,    // 源文件保留，，当Java文件编译成class文件的时候，注解被遗弃\n    CLASS,       // 编译期保留，jvm加载class文件时候被遗弃，默认值\n    RUNTIME   // 运行期保留，可通过反射去获取注解信息\n}\n```\n\n## @Documented\nDocumented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。\n\n## @Inherited\nInherited注解的作用：被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。\n\n## @Repeatable\n什么是重复注解：允许在同一申明类型(类，属性，或方法)上多次使用同一个注解。\n\n### JDK8之前\njava 8之前也有重复使用注解的解决方案，但可读性不是很好。\n\n```java\npublic @interface Authority {\n     String role();\n}\npublic @interface Authorities {\n    Authority[] value();\n}\npublic class RepeatAnnotationUseOldVersion {\n  @Authorities({@Authority(role=\"Admin\"),@Authority(role=\"Manager\")})\n  public void doSomeThing(){\n  }\n}\n```\n\n### Jdk8重复注解\n```java\n@Repeatable(Authorities.class)\npublic @interface Authority {\n     String role();\n}\n\npublic @interface Authorities {\n    Authority[] value();\n}\n\npublic class RepeatAnnotationUseNewVersion {\n    @Authority(role=\"Admin\")\n    @Authority(role=\"Manager\")\n    public void doSomeThing(){ }\n}\n```\n\n## @Native\n使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，不常使用。\n\n# 自定义注解\n## 定义注解\n```java\n@Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface AddPermission {\n    \n}\n```\n\n## 处理逻辑（AOP）\nAOP（面向切面编程）通过注解实现横切关注点的分离。\n\n1. 创建一个切面类，使用@Aspect标注\n2. 在切面类中通过@Pointcut定义切入点\n3. 在切面类中通过@Before、@After，@Around等定义通知\n4. 使用AspectJProxyFactory结合@Ascpect标注的类，来生成代理对象\n\n```java\n@Aspect\n@Component\npublic class AddPermissionAspect {\n    @Pointcut(\"execution(* com.my.service..*.*(..))\")\n    public void controllerInteceptor() {}\n\n    @Around(\"controllerInteceptor()\")\n    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        Method targetMethod = ((MethodSignature) proceedingJoinPoint.getSignature()).getMethod();\n        if (Objects.isNull(targetMethod.getAnnotation(AddPermission.class))) {\n            return proceedingJoinPoint.proceed();\n        }\n    }\n}\n```\n\n@Aspect：切面，标注在类上。它里面包含切入点(Pointcut)和通知（Advice）。\n\n@Pointcut：切入点。表示需要切入的位置，比如某些类或者某些方法，也就是先定一个范围。\n\n@Before：Advice（通知）的一种，切入点的方法体执行之前执行。\n\n@Around：Advice（通知）的一种，环绕切入点执行也就是把切入点包裹起来执行。\n\n@After：Advice（通知）的一种，在切入点正常运行结束后执行。\n\n@AfterReturning：Advice（通知）的一种，在切入点正常运行结束后执行，异常则不执行\n\n@AfterThrowing：Advice（通知）的一种，在切入点运行异常时执行。\n\n### 示例\n```java\n// 符合条件的目标方法时带有@MetricTime注解的方法\n@Around(\"@annotation(metricTime)\")\npublic Object doLogging(ProceedingJoinPoint pjp) throws Throwable {\n    System.err.println(\"[Around] start \" + pjp.getSignature());\n    Object retVal = pjp.proceed(); // @Around可以决定是否执行目标方法\n    System.err.println(\"[Around] done \" + pjp.getSignature());\n    return retVal;\n}\n```\n\n# 底层实现原理\n注解的底层实现依赖于动态代理。当通过反射获取注解时，Java 会生成一个实现了注解接口的动态代理类。这个代理类负责存储注解的属性值，并在调用注解方法时返回这些值。\n\n注解的解析和动态代理对象的创建是通过 AnnotatedElement 接口实现的。Class、Method、Field 等类都实现了 AnnotatedElement 接口，提供了获取注解信息的方法，如 getAnnotation()、getAnnotations() 等。\n\n当调用 getAnnotation() 方法时，Java 会通过 AnnotationParser 解析类的字节码，从常量池中提取注解信息，并将其封装为动态代理对象返回。\n\n## AnnotatedElement\n`AnnotatedElement` 是 Java 反射 API 中的一个接口，用于表示可以被注解修饰的程序元素。它提供了访问注解的方法，允许在运行时读取类、方法、字段等元素上的注解信息。\n\n###  `AnnotatedElement` 的实现类\n`AnnotatedElement` 接口由以下类和接口实现：\n+ `Class`: 类或接口\n+ `Method`: 方法\n+ `Field`: 字段\n+ `Constructor`: 构造函数\n+ `Package`: 包\n+ `Parameter`: 方法参数（JDK 8 引入）\n+ `AccessibleObject`: 可访问对象（`Method`、`Field`、`Constructor` 的父类）\n---\n\n### `AnnotatedElement` 的核心方法\n`AnnotatedElement` 接口定义了以下核心方法：\n\n| 方法签名 | 说明 |\n| --- | --- |\n| `<T extends Annotation> T getAnnotation(Class<T> annotationClass)` | 返回指定类型的注解，如果不存在则返回 `null`。 |\n| `Annotation[] getAnnotations()` | 返回当前元素上的所有注解（包括继承的注解）。 |\n| `<T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)` | 返回指定类型的注解数组（支持重复注解）。 |\n| `<T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)` | 返回直接修饰当前元素的指定类型注解（不包括继承的注解）。 |\n| `Annotation[] getDeclaredAnnotations()` | 返回直接修饰当前元素的所有注解（不包括继承的注解）。 |\n| `<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)` | 返回直接修饰当前元素的指定类型注解数组（支持重复注解）。 |\n| `boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)` | 判断当前元素是否被指定类型的注解修饰。 |\n\n### 总结\n`AnnotatedElement` 接口是 Java 反射 API 中用于访问注解的核心接口。通过它，开发者可以在运行时读取类、方法、字段等元素上的注解信息，并根据注解的值动态调整程序的行为。\n\n| 特性 | 说明 |\n| --- | --- |\n| **支持的元素** | 类、方法、字段、构造函数、包、参数等。 |\n| **核心方法** | `getAnnotation`、`getAnnotations`、`isAnnotationPresent` 等。 |\n| **重复注解支持** | 通过 `getAnnotationsByType` 和 `getDeclaredAnnotationsByType` 处理。 |\n\n## 注解的解析\n+ **解析时机**：当通过反射（如 `getAnnotation()` 方法）获取注解时，Java 会解析类的字节码，提取注解信息。\n+ **解析过程**：\n    1. Java 会从类的字节码中读取 `RuntimeVisibleAnnotations` 属性（存储运行时可见的注解信息）。\n    2. 使用 `AnnotationParser` 解析这些注解信息，将其转换为内部的注解数据结构。\n    3. 解析后的注解信息会被缓存，以提高后续访问的性能。\n\n## 注解代理对象的创建\n+ **创建时机**：在注解解析完成后，Java 会动态生成一个代理对象来表示注解实例。\n+ **创建过程**：\n    1. 使用 `AnnotationInvocationHandler` 创建一个动态代理对象。\n    2. 代理对象会存储解析后的注解属性值。\n    3. 当调用注解方法（如 `value()`）时，代理对象会返回存储的属性值。\n\n### 实现了InvocationHandler接口的类\njdk的动态代理，需要一个Proxy类（jdk提供的用于生成对象的类），一个实现了InvocationHandler接口的类（用于封装代理逻辑的类）。\n\n动态代理类的生成过程是通过 AnnotationInvocationHandler 实现的，AnnotationInvocationHandler 是 JDK 提供的一个内部类。\n\n在创建代理对象之前，解析注解时候 从该注解类的常量池中取出注解的信息，包括之前写到注解中的参数，然后将这些信息在创建 AnnotationInvocationHandler时候 ，传入进去 作为构造函数的参数。\n\n```java\nstatic class AnnotationInvocationHandler implements InvocationHandler{\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //处理注解的解析\n    }\n}\n```\n\n### 使用Proxy.newProxyInstance()创建代理对象\n```java\n   public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n```\n\n# 深入理解注解\n## 注解不支持继承\n# 常见注解\n## lombok注解\n@NoArgsConstructor: 自动生成无参数构造函数\n@AllArgsConstructor: 自动生成全参数构造函数\n@Data: 自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter和@RequiredArgsConstructor\n\n## @inheritDoc\n在@Override上加上{@inheritDoc}注解，对项目导出详细设计时，可自动获取接口的注释\n\n```java\n/**\n * {@inheritDoc}\n */\n```\n## AspectJ 注解\n- @Aspect：定义切面。\n- @Pointcut：定义切入点。\n- @Before、@After、@Around、@AfterReturning、@Afterthrowing：定义通知。\n- @AspectJ 声明切面\n- @DeclareParents\n\n## Servlet注解\nServlet 注解用于简化 Web 应用的配置。常见的注解包括：\n- @WebServlet：定义 Servlet。\n- @WebFilter：定义过滤器。\n- @WebListener：定义监听器。\n\n[Servlet注解](https://www.yuque.com/zhaomengyao2019/kzz0dr/hm0mk3gfnphb6ouz)\n\n## Spring注解\nSpring 框架提供了丰富的注解，用于依赖注入、事务管理、AOP 等。\n- 核心注解：\n    - @Component：通用组件注解。\n    - @Service：标注服务层组件。\n    - @Repository：标注数据访问层组件。\n    - @Controller：标注控制器组件。\n- 依赖注入：\n    - @Autowired：自动注入依赖。\n    - @Qualifier：指定注入的 Bean。\n- AOP：\n    - Spring AOP 支持使用 AspectJ 的注解风格，包括 @Pointcut、@Before、@After、@AfterReturning、@AfterThrowing、@Around 等。\n    - Spring AOP 可以与 AspectJ 集成，利用 AspectJ 的强大功能（如编译时织入）。\n\n[Spring注解](https://www.yuque.com/zhaomengyao2019/kzz0dr/plryge1pbba2pcu1)\n\n## Spring Boot注解\nSpring Boot 进一步简化了 Spring 应用的开发。\n- 启动类注解：\n    - @SpringBootApplication：标注 Spring Boot 应用的启动类。\n- 配置注解：\n    - @Configuration：标注配置类。\n    - @Bean：标注方法返回的 Bean。\n- Web 开发：\n    - @RestController：标注 RESTful 控制器。\n    - @RequestMapping：映射请求路径。\n    \n[SpringBoot注解](https://www.yuque.com/zhaomengyao2019/kzz0dr/iau341)\n\n","source":"_posts/Java注解机制.md","raw":"---\ntitle: Java注解机制\ndate: 2025-03-13 15:52:02\ntags:\n  - Java\n  - Java中级\n  - Java注解\ncategories:\n  - Java\n  - Java中级\n---\n# 介绍\n注解（Annotation）是Java5引入的一个特性，本质是一个继承了`java.lang.annotation.Annotation`的接口。通过 Java 的反射机制相关 API 来访问注解信息，框架或工具中的类可以根据这些信息来决定如何使用程序元素或改变它们的行为。\n\n注解通常应应用于 `public` 方法上，这是由 AOP（面向切面编程）的本质决定的。如果注解应用于 `protected` 或 `private` 方法上，可能会被忽略。\n\n## 主要作用\n1. 生成文档，通过代码里标识的元数据生成javadoc文档。\n2. 编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。\n3. 编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。\n4. 运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。\n\n## 注解分类\n注解可以分为以下三类：\n\n+ Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings\n    - @Override用于标明重写某个方法\n    - @Deprecated用于标明某个类或方法过时\n    - @SuppressWarnings用于标明要忽略的警告\n+ 元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented\n    - @Retention用于标明注解被保留的阶段\n    - @Target用于标明注解使用的范围，如方法、类、接口等\n    - @Inherited用于标明注解可继承\n    - @Documented用于标明是否生成javadoc文档\n+ 自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解\n\n# Java内置注解\n## @Override\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n\n## @Deprecated\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})\npublic @interface Deprecated {\n}\n```\n\n该注解能够保留到运行时。\n\n## @SuppressWarnings\n```java\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface SuppressWarnings {\n    String[] value();\n}\n```\n\n可以取得值：\n\n+ all：抑制所有警告\n+ boxing：抑制装箱、拆箱操作时候的警告\n+ cast：抑制映射相关的警告\n+ dep-ann：抑制启用注释的警告\n+ deprecation：抑制过期方法警告\n+ fallthrough：抑制确在switch中缺失breaks的警告\n+ finally：抑制finally模块没有返回的警告\n+ hiding：抑制与隐藏变数的局部变量相关的警告\n+ incomplete-switch：忽略没有完整的switch语句\n+ nls：忽略非nls格式的字符\n+ null：忽略对null的操作\n+ rawtype：使用generics时忽略没有指定相应的类型\n+ restriction：抑制与使用不建议或禁止参照相关的警告\n+ serial：忽略在serializable类中没有声明serialVersionUID变量\n+ static-access：抑制不正确的静态访问方式警告\n+ synthetic-access：抑制没有按最优方法访问内部类的警告\n+ unchecked：抑制没有进行类型检查操作的警告\n+ unqualified-field-access：抑制没有权限访问的域的警告\n+ unused：抑制没被使用过的代码的警告\n\n\n\n# 元注解\n在JDK 1.5中提供了4个标准的元注解：@Target，@Retention，@Documented，@Inherited, 在JDK 1.8中提供了两个元注解 @Repeatable和@Native。\n\n## @Target\n`@Target`注解的作用是：描述注解的使用范围（即：被修饰的注解可以用在什么地方） 。它的取值范围定义在ElementType 枚举中。\n\n```java\npublic enum ElementType { \n    TYPE, // 类、接口、枚举类 \n    FIELD, // 成员变量（包括：枚举常量） \n    METHOD, // 成员方法 \n    PARAMETER, // 方法参数\n    CONSTRUCTOR, // 构造方法\n    LOCAL_VARIABLE, // 局部变量\n    ANNOTATION_TYPE, // 注解类\n    PACKAGE, // 包\n    TYPE_PARAMETER, // 类型参数，JDK 1.8 新增 \n    TYPE_USE // 使用类型的任何地方，包括TYPE和TYPE_PARAMETER，JDK 1.8 新增 \n}\n```\n\n## @Retention\nReteniton注解的作用是：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时） 。一共有三种策略，定义在RetentionPolicy枚举中。\n\n```java\npublic enum RetentionPolicy { \n    SOURCE,    // 源文件保留，，当Java文件编译成class文件的时候，注解被遗弃\n    CLASS,       // 编译期保留，jvm加载class文件时候被遗弃，默认值\n    RUNTIME   // 运行期保留，可通过反射去获取注解信息\n}\n```\n\n## @Documented\nDocumented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。\n\n## @Inherited\nInherited注解的作用：被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。\n\n## @Repeatable\n什么是重复注解：允许在同一申明类型(类，属性，或方法)上多次使用同一个注解。\n\n### JDK8之前\njava 8之前也有重复使用注解的解决方案，但可读性不是很好。\n\n```java\npublic @interface Authority {\n     String role();\n}\npublic @interface Authorities {\n    Authority[] value();\n}\npublic class RepeatAnnotationUseOldVersion {\n  @Authorities({@Authority(role=\"Admin\"),@Authority(role=\"Manager\")})\n  public void doSomeThing(){\n  }\n}\n```\n\n### Jdk8重复注解\n```java\n@Repeatable(Authorities.class)\npublic @interface Authority {\n     String role();\n}\n\npublic @interface Authorities {\n    Authority[] value();\n}\n\npublic class RepeatAnnotationUseNewVersion {\n    @Authority(role=\"Admin\")\n    @Authority(role=\"Manager\")\n    public void doSomeThing(){ }\n}\n```\n\n## @Native\n使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，不常使用。\n\n# 自定义注解\n## 定义注解\n```java\n@Target({ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface AddPermission {\n    \n}\n```\n\n## 处理逻辑（AOP）\nAOP（面向切面编程）通过注解实现横切关注点的分离。\n\n1. 创建一个切面类，使用@Aspect标注\n2. 在切面类中通过@Pointcut定义切入点\n3. 在切面类中通过@Before、@After，@Around等定义通知\n4. 使用AspectJProxyFactory结合@Ascpect标注的类，来生成代理对象\n\n```java\n@Aspect\n@Component\npublic class AddPermissionAspect {\n    @Pointcut(\"execution(* com.my.service..*.*(..))\")\n    public void controllerInteceptor() {}\n\n    @Around(\"controllerInteceptor()\")\n    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        Method targetMethod = ((MethodSignature) proceedingJoinPoint.getSignature()).getMethod();\n        if (Objects.isNull(targetMethod.getAnnotation(AddPermission.class))) {\n            return proceedingJoinPoint.proceed();\n        }\n    }\n}\n```\n\n@Aspect：切面，标注在类上。它里面包含切入点(Pointcut)和通知（Advice）。\n\n@Pointcut：切入点。表示需要切入的位置，比如某些类或者某些方法，也就是先定一个范围。\n\n@Before：Advice（通知）的一种，切入点的方法体执行之前执行。\n\n@Around：Advice（通知）的一种，环绕切入点执行也就是把切入点包裹起来执行。\n\n@After：Advice（通知）的一种，在切入点正常运行结束后执行。\n\n@AfterReturning：Advice（通知）的一种，在切入点正常运行结束后执行，异常则不执行\n\n@AfterThrowing：Advice（通知）的一种，在切入点运行异常时执行。\n\n### 示例\n```java\n// 符合条件的目标方法时带有@MetricTime注解的方法\n@Around(\"@annotation(metricTime)\")\npublic Object doLogging(ProceedingJoinPoint pjp) throws Throwable {\n    System.err.println(\"[Around] start \" + pjp.getSignature());\n    Object retVal = pjp.proceed(); // @Around可以决定是否执行目标方法\n    System.err.println(\"[Around] done \" + pjp.getSignature());\n    return retVal;\n}\n```\n\n# 底层实现原理\n注解的底层实现依赖于动态代理。当通过反射获取注解时，Java 会生成一个实现了注解接口的动态代理类。这个代理类负责存储注解的属性值，并在调用注解方法时返回这些值。\n\n注解的解析和动态代理对象的创建是通过 AnnotatedElement 接口实现的。Class、Method、Field 等类都实现了 AnnotatedElement 接口，提供了获取注解信息的方法，如 getAnnotation()、getAnnotations() 等。\n\n当调用 getAnnotation() 方法时，Java 会通过 AnnotationParser 解析类的字节码，从常量池中提取注解信息，并将其封装为动态代理对象返回。\n\n## AnnotatedElement\n`AnnotatedElement` 是 Java 反射 API 中的一个接口，用于表示可以被注解修饰的程序元素。它提供了访问注解的方法，允许在运行时读取类、方法、字段等元素上的注解信息。\n\n###  `AnnotatedElement` 的实现类\n`AnnotatedElement` 接口由以下类和接口实现：\n+ `Class`: 类或接口\n+ `Method`: 方法\n+ `Field`: 字段\n+ `Constructor`: 构造函数\n+ `Package`: 包\n+ `Parameter`: 方法参数（JDK 8 引入）\n+ `AccessibleObject`: 可访问对象（`Method`、`Field`、`Constructor` 的父类）\n---\n\n### `AnnotatedElement` 的核心方法\n`AnnotatedElement` 接口定义了以下核心方法：\n\n| 方法签名 | 说明 |\n| --- | --- |\n| `<T extends Annotation> T getAnnotation(Class<T> annotationClass)` | 返回指定类型的注解，如果不存在则返回 `null`。 |\n| `Annotation[] getAnnotations()` | 返回当前元素上的所有注解（包括继承的注解）。 |\n| `<T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)` | 返回指定类型的注解数组（支持重复注解）。 |\n| `<T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)` | 返回直接修饰当前元素的指定类型注解（不包括继承的注解）。 |\n| `Annotation[] getDeclaredAnnotations()` | 返回直接修饰当前元素的所有注解（不包括继承的注解）。 |\n| `<T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)` | 返回直接修饰当前元素的指定类型注解数组（支持重复注解）。 |\n| `boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)` | 判断当前元素是否被指定类型的注解修饰。 |\n\n### 总结\n`AnnotatedElement` 接口是 Java 反射 API 中用于访问注解的核心接口。通过它，开发者可以在运行时读取类、方法、字段等元素上的注解信息，并根据注解的值动态调整程序的行为。\n\n| 特性 | 说明 |\n| --- | --- |\n| **支持的元素** | 类、方法、字段、构造函数、包、参数等。 |\n| **核心方法** | `getAnnotation`、`getAnnotations`、`isAnnotationPresent` 等。 |\n| **重复注解支持** | 通过 `getAnnotationsByType` 和 `getDeclaredAnnotationsByType` 处理。 |\n\n## 注解的解析\n+ **解析时机**：当通过反射（如 `getAnnotation()` 方法）获取注解时，Java 会解析类的字节码，提取注解信息。\n+ **解析过程**：\n    1. Java 会从类的字节码中读取 `RuntimeVisibleAnnotations` 属性（存储运行时可见的注解信息）。\n    2. 使用 `AnnotationParser` 解析这些注解信息，将其转换为内部的注解数据结构。\n    3. 解析后的注解信息会被缓存，以提高后续访问的性能。\n\n## 注解代理对象的创建\n+ **创建时机**：在注解解析完成后，Java 会动态生成一个代理对象来表示注解实例。\n+ **创建过程**：\n    1. 使用 `AnnotationInvocationHandler` 创建一个动态代理对象。\n    2. 代理对象会存储解析后的注解属性值。\n    3. 当调用注解方法（如 `value()`）时，代理对象会返回存储的属性值。\n\n### 实现了InvocationHandler接口的类\njdk的动态代理，需要一个Proxy类（jdk提供的用于生成对象的类），一个实现了InvocationHandler接口的类（用于封装代理逻辑的类）。\n\n动态代理类的生成过程是通过 AnnotationInvocationHandler 实现的，AnnotationInvocationHandler 是 JDK 提供的一个内部类。\n\n在创建代理对象之前，解析注解时候 从该注解类的常量池中取出注解的信息，包括之前写到注解中的参数，然后将这些信息在创建 AnnotationInvocationHandler时候 ，传入进去 作为构造函数的参数。\n\n```java\nstatic class AnnotationInvocationHandler implements InvocationHandler{\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        //处理注解的解析\n    }\n}\n```\n\n### 使用Proxy.newProxyInstance()创建代理对象\n```java\n   public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n```\n\n# 深入理解注解\n## 注解不支持继承\n# 常见注解\n## lombok注解\n@NoArgsConstructor: 自动生成无参数构造函数\n@AllArgsConstructor: 自动生成全参数构造函数\n@Data: 自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter和@RequiredArgsConstructor\n\n## @inheritDoc\n在@Override上加上{@inheritDoc}注解，对项目导出详细设计时，可自动获取接口的注释\n\n```java\n/**\n * {@inheritDoc}\n */\n```\n## AspectJ 注解\n- @Aspect：定义切面。\n- @Pointcut：定义切入点。\n- @Before、@After、@Around、@AfterReturning、@Afterthrowing：定义通知。\n- @AspectJ 声明切面\n- @DeclareParents\n\n## Servlet注解\nServlet 注解用于简化 Web 应用的配置。常见的注解包括：\n- @WebServlet：定义 Servlet。\n- @WebFilter：定义过滤器。\n- @WebListener：定义监听器。\n\n[Servlet注解](https://www.yuque.com/zhaomengyao2019/kzz0dr/hm0mk3gfnphb6ouz)\n\n## Spring注解\nSpring 框架提供了丰富的注解，用于依赖注入、事务管理、AOP 等。\n- 核心注解：\n    - @Component：通用组件注解。\n    - @Service：标注服务层组件。\n    - @Repository：标注数据访问层组件。\n    - @Controller：标注控制器组件。\n- 依赖注入：\n    - @Autowired：自动注入依赖。\n    - @Qualifier：指定注入的 Bean。\n- AOP：\n    - Spring AOP 支持使用 AspectJ 的注解风格，包括 @Pointcut、@Before、@After、@AfterReturning、@AfterThrowing、@Around 等。\n    - Spring AOP 可以与 AspectJ 集成，利用 AspectJ 的强大功能（如编译时织入）。\n\n[Spring注解](https://www.yuque.com/zhaomengyao2019/kzz0dr/plryge1pbba2pcu1)\n\n## Spring Boot注解\nSpring Boot 进一步简化了 Spring 应用的开发。\n- 启动类注解：\n    - @SpringBootApplication：标注 Spring Boot 应用的启动类。\n- 配置注解：\n    - @Configuration：标注配置类。\n    - @Bean：标注方法返回的 Bean。\n- Web 开发：\n    - @RestController：标注 RESTful 控制器。\n    - @RequestMapping：映射请求路径。\n    \n[SpringBoot注解](https://www.yuque.com/zhaomengyao2019/kzz0dr/iau341)\n\n","slug":"Java注解机制","published":1,"updated":"2025-03-13T08:20:52.837Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16d000d64v42ppy2uyf","content":"<h1 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h1>\n<p>注解（Annotation）是Java5引入的一个特性，本质是一个继承了<code>java.lang.annotation.Annotation</code>的接口。通过 Java 的反射机制相关 API 来访问注解信息，框架或工具中的类可以根据这些信息来决定如何使用程序元素或改变它们的行为。</p>\n<p>注解通常应应用于 <code>public</code> 方法上，这是由 AOP（面向切面编程）的本质决定的。如果注解应用于 <code>protected</code> 或 <code>private</code> 方法上，可能会被忽略。</p>\n<h2 id=\"主要作用\"><a class=\"markdownIt-Anchor\" href=\"#主要作用\"></a> 主要作用</h2>\n<ol>\n<li>生成文档，通过代码里标识的元数据生成javadoc文档。</li>\n<li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li>\n<li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li>\n<li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li>\n</ol>\n<h2 id=\"注解分类\"><a class=\"markdownIt-Anchor\" href=\"#注解分类\"></a> 注解分类</h2>\n<p>注解可以分为以下三类：</p>\n<ul>\n<li>Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings\n<ul>\n<li>@Override用于标明重写某个方法</li>\n<li>@Deprecated用于标明某个类或方法过时</li>\n<li>@SuppressWarnings用于标明要忽略的警告</li>\n</ul>\n</li>\n<li>元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented\n<ul>\n<li>@Retention用于标明注解被保留的阶段</li>\n<li>@Target用于标明注解使用的范围，如方法、类、接口等</li>\n<li>@Inherited用于标明注解可继承</li>\n<li>@Documented用于标明是否生成javadoc文档</li>\n</ul>\n</li>\n<li>自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解</li>\n</ul>\n<h1 id=\"java内置注解\"><a class=\"markdownIt-Anchor\" href=\"#java内置注解\"></a> Java内置注解</h1>\n<h2 id=\"override\"><a class=\"markdownIt-Anchor\" href=\"#override\"></a> @Override</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deprecated\"><a class=\"markdownIt-Anchor\" href=\"#deprecated\"></a> @Deprecated</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Deprecated &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该注解能够保留到运行时。</p>\n<h2 id=\"suppresswarnings\"><a class=\"markdownIt-Anchor\" href=\"#suppresswarnings\"></a> @SuppressWarnings</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SuppressWarnings &#123;</span><br><span class=\"line\">    String[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以取得值：</p>\n<ul>\n<li>all：抑制所有警告</li>\n<li>boxing：抑制装箱、拆箱操作时候的警告</li>\n<li>cast：抑制映射相关的警告</li>\n<li>dep-ann：抑制启用注释的警告</li>\n<li>deprecation：抑制过期方法警告</li>\n<li>fallthrough：抑制确在switch中缺失breaks的警告</li>\n<li>finally：抑制finally模块没有返回的警告</li>\n<li>hiding：抑制与隐藏变数的局部变量相关的警告</li>\n<li>incomplete-switch：忽略没有完整的switch语句</li>\n<li>nls：忽略非nls格式的字符</li>\n<li>null：忽略对null的操作</li>\n<li>rawtype：使用generics时忽略没有指定相应的类型</li>\n<li>restriction：抑制与使用不建议或禁止参照相关的警告</li>\n<li>serial：忽略在serializable类中没有声明serialVersionUID变量</li>\n<li>static-access：抑制不正确的静态访问方式警告</li>\n<li>synthetic-access：抑制没有按最优方法访问内部类的警告</li>\n<li>unchecked：抑制没有进行类型检查操作的警告</li>\n<li>unqualified-field-access：抑制没有权限访问的域的警告</li>\n<li>unused：抑制没被使用过的代码的警告</li>\n</ul>\n<h1 id=\"元注解\"><a class=\"markdownIt-Anchor\" href=\"#元注解\"></a> 元注解</h1>\n<p>在JDK 1.5中提供了4个标准的元注解：@Target，@Retention，@Documented，@Inherited, 在JDK 1.8中提供了两个元注解 @Repeatable和@Native。</p>\n<h2 id=\"target\"><a class=\"markdownIt-Anchor\" href=\"#target\"></a> @Target</h2>\n<p><code>@Target</code>注解的作用是：描述注解的使用范围（即：被修饰的注解可以用在什么地方） 。它的取值范围定义在ElementType 枚举中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ElementType</span> &#123; </span><br><span class=\"line\">    TYPE, <span class=\"comment\">// 类、接口、枚举类 </span></span><br><span class=\"line\">    FIELD, <span class=\"comment\">// 成员变量（包括：枚举常量） </span></span><br><span class=\"line\">    METHOD, <span class=\"comment\">// 成员方法 </span></span><br><span class=\"line\">    PARAMETER, <span class=\"comment\">// 方法参数</span></span><br><span class=\"line\">    CONSTRUCTOR, <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    LOCAL_VARIABLE, <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">    ANNOTATION_TYPE, <span class=\"comment\">// 注解类</span></span><br><span class=\"line\">    PACKAGE, <span class=\"comment\">// 包</span></span><br><span class=\"line\">    TYPE_PARAMETER, <span class=\"comment\">// 类型参数，JDK 1.8 新增 </span></span><br><span class=\"line\">    TYPE_USE <span class=\"comment\">// 使用类型的任何地方，包括TYPE和TYPE_PARAMETER，JDK 1.8 新增 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"retention\"><a class=\"markdownIt-Anchor\" href=\"#retention\"></a> @Retention</h2>\n<p>Reteniton注解的作用是：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时） 。一共有三种策略，定义在RetentionPolicy枚举中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">RetentionPolicy</span> &#123; </span><br><span class=\"line\">    SOURCE,    <span class=\"comment\">// 源文件保留，，当Java文件编译成class文件的时候，注解被遗弃</span></span><br><span class=\"line\">    CLASS,       <span class=\"comment\">// 编译期保留，jvm加载class文件时候被遗弃，默认值</span></span><br><span class=\"line\">    RUNTIME   <span class=\"comment\">// 运行期保留，可通过反射去获取注解信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"documented\"><a class=\"markdownIt-Anchor\" href=\"#documented\"></a> @Documented</h2>\n<p>Documented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p>\n<h2 id=\"inherited\"><a class=\"markdownIt-Anchor\" href=\"#inherited\"></a> @Inherited</h2>\n<p>Inherited注解的作用：被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。</p>\n<h2 id=\"repeatable\"><a class=\"markdownIt-Anchor\" href=\"#repeatable\"></a> @Repeatable</h2>\n<p>什么是重复注解：允许在同一申明类型(类，属性，或方法)上多次使用同一个注解。</p>\n<h3 id=\"jdk8之前\"><a class=\"markdownIt-Anchor\" href=\"#jdk8之前\"></a> JDK8之前</h3>\n<p>java 8之前也有重复使用注解的解决方案，但可读性不是很好。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authority &#123;</span><br><span class=\"line\">     String <span class=\"title function_\">role</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authorities &#123;</span><br><span class=\"line\">    Authority[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatAnnotationUseOldVersion</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Authorities(&#123;@Authority(role=&quot;Admin&quot;),@Authority(role=&quot;Manager&quot;)&#125;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeThing</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jdk8重复注解\"><a class=\"markdownIt-Anchor\" href=\"#jdk8重复注解\"></a> Jdk8重复注解</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repeatable(Authorities.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authority &#123;</span><br><span class=\"line\">     String <span class=\"title function_\">role</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authorities &#123;</span><br><span class=\"line\">    Authority[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatAnnotationUseNewVersion</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Authority(role=&quot;Admin&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Authority(role=&quot;Manager&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeThing</span><span class=\"params\">()</span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"native\"><a class=\"markdownIt-Anchor\" href=\"#native\"></a> @Native</h2>\n<p>使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，不常使用。</p>\n<h1 id=\"自定义注解\"><a class=\"markdownIt-Anchor\" href=\"#自定义注解\"></a> 自定义注解</h1>\n<h2 id=\"定义注解\"><a class=\"markdownIt-Anchor\" href=\"#定义注解\"></a> 定义注解</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AddPermission &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理逻辑aop\"><a class=\"markdownIt-Anchor\" href=\"#处理逻辑aop\"></a> 处理逻辑（AOP）</h2>\n<p>AOP（面向切面编程）通过注解实现横切关注点的分离。</p>\n<ol>\n<li>创建一个切面类，使用@Aspect标注</li>\n<li>在切面类中通过@Pointcut定义切入点</li>\n<li>在切面类中通过@Before、@After，@Around等定义通知</li>\n<li>使用AspectJProxyFactory结合@Ascpect标注的类，来生成代理对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AddPermissionAspect</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.my.service..*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">controllerInteceptor</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;controllerInteceptor()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">targetMethod</span> <span class=\"operator\">=</span> ((MethodSignature) proceedingJoinPoint.getSignature()).getMethod();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(targetMethod.getAnnotation(AddPermission.class))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> proceedingJoinPoint.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Aspect：切面，标注在类上。它里面包含切入点(Pointcut)和通知（Advice）。</p>\n<p>@Pointcut：切入点。表示需要切入的位置，比如某些类或者某些方法，也就是先定一个范围。</p>\n<p>@Before：Advice（通知）的一种，切入点的方法体执行之前执行。</p>\n<p>@Around：Advice（通知）的一种，环绕切入点执行也就是把切入点包裹起来执行。</p>\n<p>@After：Advice（通知）的一种，在切入点正常运行结束后执行。</p>\n<p>@AfterReturning：Advice（通知）的一种，在切入点正常运行结束后执行，异常则不执行</p>\n<p>@AfterThrowing：Advice（通知）的一种，在切入点运行异常时执行。</p>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 符合条件的目标方法时带有@MetricTime注解的方法</span></span><br><span class=\"line\"><span class=\"meta\">@Around(&quot;@annotation(metricTime)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">doLogging</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;[Around] start &quot;</span> + pjp.getSignature());</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">retVal</span> <span class=\"operator\">=</span> pjp.proceed(); <span class=\"comment\">// @Around可以决定是否执行目标方法</span></span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;[Around] done &quot;</span> + pjp.getSignature());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"底层实现原理\"><a class=\"markdownIt-Anchor\" href=\"#底层实现原理\"></a> 底层实现原理</h1>\n<p>注解的底层实现依赖于动态代理。当通过反射获取注解时，Java 会生成一个实现了注解接口的动态代理类。这个代理类负责存储注解的属性值，并在调用注解方法时返回这些值。</p>\n<p>注解的解析和动态代理对象的创建是通过 AnnotatedElement 接口实现的。Class、Method、Field 等类都实现了 AnnotatedElement 接口，提供了获取注解信息的方法，如 getAnnotation()、getAnnotations() 等。</p>\n<p>当调用 getAnnotation() 方法时，Java 会通过 AnnotationParser 解析类的字节码，从常量池中提取注解信息，并将其封装为动态代理对象返回。</p>\n<h2 id=\"annotatedelement\"><a class=\"markdownIt-Anchor\" href=\"#annotatedelement\"></a> AnnotatedElement</h2>\n<p><code>AnnotatedElement</code> 是 Java 反射 API 中的一个接口，用于表示可以被注解修饰的程序元素。它提供了访问注解的方法，允许在运行时读取类、方法、字段等元素上的注解信息。</p>\n<h3 id=\"annotatedelement-的实现类\"><a class=\"markdownIt-Anchor\" href=\"#annotatedelement-的实现类\"></a> <code>AnnotatedElement</code> 的实现类</h3>\n<p><code>AnnotatedElement</code> 接口由以下类和接口实现：</p>\n<ul>\n<li><code>Class</code>: 类或接口</li>\n<li><code>Method</code>: 方法</li>\n<li><code>Field</code>: 字段</li>\n<li><code>Constructor</code>: 构造函数</li>\n<li><code>Package</code>: 包</li>\n<li><code>Parameter</code>: 方法参数（JDK 8 引入）</li>\n<li><code>AccessibleObject</code>: 可访问对象（<code>Method</code>、<code>Field</code>、<code>Constructor</code> 的父类）</li>\n</ul>\n<hr />\n<h3 id=\"annotatedelement-的核心方法\"><a class=\"markdownIt-Anchor\" href=\"#annotatedelement-的核心方法\"></a> <code>AnnotatedElement</code> 的核心方法</h3>\n<p><code>AnnotatedElement</code> 接口定义了以下核心方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回指定类型的注解，如果不存在则返回 <code>null</code>。</td>\n</tr>\n<tr>\n<td><code>Annotation[] getAnnotations()</code></td>\n<td>返回当前元素上的所有注解（包括继承的注解）。</td>\n</tr>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回指定类型的注解数组（支持重复注解）。</td>\n</tr>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回直接修饰当前元素的指定类型注解（不包括继承的注解）。</td>\n</tr>\n<tr>\n<td><code>Annotation[] getDeclaredAnnotations()</code></td>\n<td>返回直接修饰当前元素的所有注解（不包括继承的注解）。</td>\n</tr>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回直接修饰当前元素的指定类型注解数组（支持重复注解）。</td>\n</tr>\n<tr>\n<td><code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></td>\n<td>判断当前元素是否被指定类型的注解修饰。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p><code>AnnotatedElement</code> 接口是 Java 反射 API 中用于访问注解的核心接口。通过它，开发者可以在运行时读取类、方法、字段等元素上的注解信息，并根据注解的值动态调整程序的行为。</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>支持的元素</strong></td>\n<td>类、方法、字段、构造函数、包、参数等。</td>\n</tr>\n<tr>\n<td><strong>核心方法</strong></td>\n<td><code>getAnnotation</code>、<code>getAnnotations</code>、<code>isAnnotationPresent</code> 等。</td>\n</tr>\n<tr>\n<td><strong>重复注解支持</strong></td>\n<td>通过 <code>getAnnotationsByType</code> 和 <code>getDeclaredAnnotationsByType</code> 处理。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"注解的解析\"><a class=\"markdownIt-Anchor\" href=\"#注解的解析\"></a> 注解的解析</h2>\n<ul>\n<li><strong>解析时机</strong>：当通过反射（如 <code>getAnnotation()</code> 方法）获取注解时，Java 会解析类的字节码，提取注解信息。</li>\n<li><strong>解析过程</strong>：\n<ol>\n<li>Java 会从类的字节码中读取 <code>RuntimeVisibleAnnotations</code> 属性（存储运行时可见的注解信息）。</li>\n<li>使用 <code>AnnotationParser</code> 解析这些注解信息，将其转换为内部的注解数据结构。</li>\n<li>解析后的注解信息会被缓存，以提高后续访问的性能。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"注解代理对象的创建\"><a class=\"markdownIt-Anchor\" href=\"#注解代理对象的创建\"></a> 注解代理对象的创建</h2>\n<ul>\n<li><strong>创建时机</strong>：在注解解析完成后，Java 会动态生成一个代理对象来表示注解实例。</li>\n<li><strong>创建过程</strong>：\n<ol>\n<li>使用 <code>AnnotationInvocationHandler</code> 创建一个动态代理对象。</li>\n<li>代理对象会存储解析后的注解属性值。</li>\n<li>当调用注解方法（如 <code>value()</code>）时，代理对象会返回存储的属性值。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"实现了invocationhandler接口的类\"><a class=\"markdownIt-Anchor\" href=\"#实现了invocationhandler接口的类\"></a> 实现了InvocationHandler接口的类</h3>\n<p>jdk的动态代理，需要一个Proxy类（jdk提供的用于生成对象的类），一个实现了InvocationHandler接口的类（用于封装代理逻辑的类）。</p>\n<p>动态代理类的生成过程是通过 AnnotationInvocationHandler 实现的，AnnotationInvocationHandler 是 JDK 提供的一个内部类。</p>\n<p>在创建代理对象之前，解析注解时候 从该注解类的常量池中取出注解的信息，包括之前写到注解中的参数，然后将这些信息在创建 AnnotationInvocationHandler时候 ，传入进去 作为构造函数的参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnotationInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理注解的解析</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用proxynewproxyinstance创建代理对象\"><a class=\"markdownIt-Anchor\" href=\"#使用proxynewproxyinstance创建代理对象\"></a> 使用Proxy.newProxyInstance()创建代理对象</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span><br><span class=\"line\"><span class=\"params\">                                       Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"line\"><span class=\"params\">                                       InvocationHandler h)</span></span><br><span class=\"line\">     <span class=\"keyword\">throws</span> IllegalArgumentException</span><br></pre></td></tr></table></figure>\n<h1 id=\"深入理解注解\"><a class=\"markdownIt-Anchor\" href=\"#深入理解注解\"></a> 深入理解注解</h1>\n<h2 id=\"注解不支持继承\"><a class=\"markdownIt-Anchor\" href=\"#注解不支持继承\"></a> 注解不支持继承</h2>\n<h1 id=\"常见注解\"><a class=\"markdownIt-Anchor\" href=\"#常见注解\"></a> 常见注解</h1>\n<h2 id=\"lombok注解\"><a class=\"markdownIt-Anchor\" href=\"#lombok注解\"></a> lombok注解</h2>\n<p>@NoArgsConstructor: 自动生成无参数构造函数<br />\n@AllArgsConstructor: 自动生成全参数构造函数<br />\n@Data: 自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter和@RequiredArgsConstructor</p>\n<h2 id=\"inheritdoc\"><a class=\"markdownIt-Anchor\" href=\"#inheritdoc\"></a> @inheritDoc</h2>\n<p>在@Override上加上{@inheritDoc}注解，对项目导出详细设计时，可自动获取接口的注释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"aspectj-注解\"><a class=\"markdownIt-Anchor\" href=\"#aspectj-注解\"></a> AspectJ 注解</h2>\n<ul>\n<li>@Aspect：定义切面。</li>\n<li>@Pointcut：定义切入点。</li>\n<li>@Before、@After、@Around、@AfterReturning、@Afterthrowing：定义通知。</li>\n<li>@AspectJ 声明切面</li>\n<li>@DeclareParents</li>\n</ul>\n<h2 id=\"servlet注解\"><a class=\"markdownIt-Anchor\" href=\"#servlet注解\"></a> Servlet注解</h2>\n<p>Servlet 注解用于简化 Web 应用的配置。常见的注解包括：</p>\n<ul>\n<li>@WebServlet：定义 Servlet。</li>\n<li>@WebFilter：定义过滤器。</li>\n<li>@WebListener：定义监听器。</li>\n</ul>\n<p><a href=\"https://www.yuque.com/zhaomengyao2019/kzz0dr/hm0mk3gfnphb6ouz\">Servlet注解</a></p>\n<h2 id=\"spring注解\"><a class=\"markdownIt-Anchor\" href=\"#spring注解\"></a> Spring注解</h2>\n<p>Spring 框架提供了丰富的注解，用于依赖注入、事务管理、AOP 等。</p>\n<ul>\n<li>核心注解：\n<ul>\n<li>@Component：通用组件注解。</li>\n<li>@Service：标注服务层组件。</li>\n<li>@Repository：标注数据访问层组件。</li>\n<li>@Controller：标注控制器组件。</li>\n</ul>\n</li>\n<li>依赖注入：\n<ul>\n<li>@Autowired：自动注入依赖。</li>\n<li>@Qualifier：指定注入的 Bean。</li>\n</ul>\n</li>\n<li>AOP：\n<ul>\n<li>Spring AOP 支持使用 AspectJ 的注解风格，包括 @Pointcut、@Before、@After、@AfterReturning、@AfterThrowing、@Around 等。</li>\n<li>Spring AOP 可以与 AspectJ 集成，利用 AspectJ 的强大功能（如编译时织入）。</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.yuque.com/zhaomengyao2019/kzz0dr/plryge1pbba2pcu1\">Spring注解</a></p>\n<h2 id=\"spring-boot注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-boot注解\"></a> Spring Boot注解</h2>\n<p>Spring Boot 进一步简化了 Spring 应用的开发。</p>\n<ul>\n<li>启动类注解：\n<ul>\n<li>@SpringBootApplication：标注 Spring Boot 应用的启动类。</li>\n</ul>\n</li>\n<li>配置注解：\n<ul>\n<li>@Configuration：标注配置类。</li>\n<li>@Bean：标注方法返回的 Bean。</li>\n</ul>\n</li>\n<li>Web 开发：\n<ul>\n<li>@RestController：标注 RESTful 控制器。</li>\n<li>@RequestMapping：映射请求路径。</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.yuque.com/zhaomengyao2019/kzz0dr/iau341\">SpringBoot注解</a></p>\n","excerpt":"","more":"<h1 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h1>\n<p>注解（Annotation）是Java5引入的一个特性，本质是一个继承了<code>java.lang.annotation.Annotation</code>的接口。通过 Java 的反射机制相关 API 来访问注解信息，框架或工具中的类可以根据这些信息来决定如何使用程序元素或改变它们的行为。</p>\n<p>注解通常应应用于 <code>public</code> 方法上，这是由 AOP（面向切面编程）的本质决定的。如果注解应用于 <code>protected</code> 或 <code>private</code> 方法上，可能会被忽略。</p>\n<h2 id=\"主要作用\"><a class=\"markdownIt-Anchor\" href=\"#主要作用\"></a> 主要作用</h2>\n<ol>\n<li>生成文档，通过代码里标识的元数据生成javadoc文档。</li>\n<li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li>\n<li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li>\n<li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li>\n</ol>\n<h2 id=\"注解分类\"><a class=\"markdownIt-Anchor\" href=\"#注解分类\"></a> 注解分类</h2>\n<p>注解可以分为以下三类：</p>\n<ul>\n<li>Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings\n<ul>\n<li>@Override用于标明重写某个方法</li>\n<li>@Deprecated用于标明某个类或方法过时</li>\n<li>@SuppressWarnings用于标明要忽略的警告</li>\n</ul>\n</li>\n<li>元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented\n<ul>\n<li>@Retention用于标明注解被保留的阶段</li>\n<li>@Target用于标明注解使用的范围，如方法、类、接口等</li>\n<li>@Inherited用于标明注解可继承</li>\n<li>@Documented用于标明是否生成javadoc文档</li>\n</ul>\n</li>\n<li>自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解</li>\n</ul>\n<h1 id=\"java内置注解\"><a class=\"markdownIt-Anchor\" href=\"#java内置注解\"></a> Java内置注解</h1>\n<h2 id=\"override\"><a class=\"markdownIt-Anchor\" href=\"#override\"></a> @Override</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deprecated\"><a class=\"markdownIt-Anchor\" href=\"#deprecated\"></a> @Deprecated</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Deprecated &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该注解能够保留到运行时。</p>\n<h2 id=\"suppresswarnings\"><a class=\"markdownIt-Anchor\" href=\"#suppresswarnings\"></a> @SuppressWarnings</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SuppressWarnings &#123;</span><br><span class=\"line\">    String[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以取得值：</p>\n<ul>\n<li>all：抑制所有警告</li>\n<li>boxing：抑制装箱、拆箱操作时候的警告</li>\n<li>cast：抑制映射相关的警告</li>\n<li>dep-ann：抑制启用注释的警告</li>\n<li>deprecation：抑制过期方法警告</li>\n<li>fallthrough：抑制确在switch中缺失breaks的警告</li>\n<li>finally：抑制finally模块没有返回的警告</li>\n<li>hiding：抑制与隐藏变数的局部变量相关的警告</li>\n<li>incomplete-switch：忽略没有完整的switch语句</li>\n<li>nls：忽略非nls格式的字符</li>\n<li>null：忽略对null的操作</li>\n<li>rawtype：使用generics时忽略没有指定相应的类型</li>\n<li>restriction：抑制与使用不建议或禁止参照相关的警告</li>\n<li>serial：忽略在serializable类中没有声明serialVersionUID变量</li>\n<li>static-access：抑制不正确的静态访问方式警告</li>\n<li>synthetic-access：抑制没有按最优方法访问内部类的警告</li>\n<li>unchecked：抑制没有进行类型检查操作的警告</li>\n<li>unqualified-field-access：抑制没有权限访问的域的警告</li>\n<li>unused：抑制没被使用过的代码的警告</li>\n</ul>\n<h1 id=\"元注解\"><a class=\"markdownIt-Anchor\" href=\"#元注解\"></a> 元注解</h1>\n<p>在JDK 1.5中提供了4个标准的元注解：@Target，@Retention，@Documented，@Inherited, 在JDK 1.8中提供了两个元注解 @Repeatable和@Native。</p>\n<h2 id=\"target\"><a class=\"markdownIt-Anchor\" href=\"#target\"></a> @Target</h2>\n<p><code>@Target</code>注解的作用是：描述注解的使用范围（即：被修饰的注解可以用在什么地方） 。它的取值范围定义在ElementType 枚举中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ElementType</span> &#123; </span><br><span class=\"line\">    TYPE, <span class=\"comment\">// 类、接口、枚举类 </span></span><br><span class=\"line\">    FIELD, <span class=\"comment\">// 成员变量（包括：枚举常量） </span></span><br><span class=\"line\">    METHOD, <span class=\"comment\">// 成员方法 </span></span><br><span class=\"line\">    PARAMETER, <span class=\"comment\">// 方法参数</span></span><br><span class=\"line\">    CONSTRUCTOR, <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">    LOCAL_VARIABLE, <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\">    ANNOTATION_TYPE, <span class=\"comment\">// 注解类</span></span><br><span class=\"line\">    PACKAGE, <span class=\"comment\">// 包</span></span><br><span class=\"line\">    TYPE_PARAMETER, <span class=\"comment\">// 类型参数，JDK 1.8 新增 </span></span><br><span class=\"line\">    TYPE_USE <span class=\"comment\">// 使用类型的任何地方，包括TYPE和TYPE_PARAMETER，JDK 1.8 新增 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"retention\"><a class=\"markdownIt-Anchor\" href=\"#retention\"></a> @Retention</h2>\n<p>Reteniton注解的作用是：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时） 。一共有三种策略，定义在RetentionPolicy枚举中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">RetentionPolicy</span> &#123; </span><br><span class=\"line\">    SOURCE,    <span class=\"comment\">// 源文件保留，，当Java文件编译成class文件的时候，注解被遗弃</span></span><br><span class=\"line\">    CLASS,       <span class=\"comment\">// 编译期保留，jvm加载class文件时候被遗弃，默认值</span></span><br><span class=\"line\">    RUNTIME   <span class=\"comment\">// 运行期保留，可通过反射去获取注解信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"documented\"><a class=\"markdownIt-Anchor\" href=\"#documented\"></a> @Documented</h2>\n<p>Documented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p>\n<h2 id=\"inherited\"><a class=\"markdownIt-Anchor\" href=\"#inherited\"></a> @Inherited</h2>\n<p>Inherited注解的作用：被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。</p>\n<h2 id=\"repeatable\"><a class=\"markdownIt-Anchor\" href=\"#repeatable\"></a> @Repeatable</h2>\n<p>什么是重复注解：允许在同一申明类型(类，属性，或方法)上多次使用同一个注解。</p>\n<h3 id=\"jdk8之前\"><a class=\"markdownIt-Anchor\" href=\"#jdk8之前\"></a> JDK8之前</h3>\n<p>java 8之前也有重复使用注解的解决方案，但可读性不是很好。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authority &#123;</span><br><span class=\"line\">     String <span class=\"title function_\">role</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authorities &#123;</span><br><span class=\"line\">    Authority[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatAnnotationUseOldVersion</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Authorities(&#123;@Authority(role=&quot;Admin&quot;),@Authority(role=&quot;Manager&quot;)&#125;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeThing</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jdk8重复注解\"><a class=\"markdownIt-Anchor\" href=\"#jdk8重复注解\"></a> Jdk8重复注解</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repeatable(Authorities.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authority &#123;</span><br><span class=\"line\">     String <span class=\"title function_\">role</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Authorities &#123;</span><br><span class=\"line\">    Authority[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RepeatAnnotationUseNewVersion</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Authority(role=&quot;Admin&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Authority(role=&quot;Manager&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doSomeThing</span><span class=\"params\">()</span>&#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"native\"><a class=\"markdownIt-Anchor\" href=\"#native\"></a> @Native</h2>\n<p>使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，不常使用。</p>\n<h1 id=\"自定义注解\"><a class=\"markdownIt-Anchor\" href=\"#自定义注解\"></a> 自定义注解</h1>\n<h2 id=\"定义注解\"><a class=\"markdownIt-Anchor\" href=\"#定义注解\"></a> 定义注解</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AddPermission &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理逻辑aop\"><a class=\"markdownIt-Anchor\" href=\"#处理逻辑aop\"></a> 处理逻辑（AOP）</h2>\n<p>AOP（面向切面编程）通过注解实现横切关注点的分离。</p>\n<ol>\n<li>创建一个切面类，使用@Aspect标注</li>\n<li>在切面类中通过@Pointcut定义切入点</li>\n<li>在切面类中通过@Before、@After，@Around等定义通知</li>\n<li>使用AspectJProxyFactory结合@Ascpect标注的类，来生成代理对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AddPermissionAspect</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.my.service..*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">controllerInteceptor</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;controllerInteceptor()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">targetMethod</span> <span class=\"operator\">=</span> ((MethodSignature) proceedingJoinPoint.getSignature()).getMethod();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(targetMethod.getAnnotation(AddPermission.class))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> proceedingJoinPoint.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Aspect：切面，标注在类上。它里面包含切入点(Pointcut)和通知（Advice）。</p>\n<p>@Pointcut：切入点。表示需要切入的位置，比如某些类或者某些方法，也就是先定一个范围。</p>\n<p>@Before：Advice（通知）的一种，切入点的方法体执行之前执行。</p>\n<p>@Around：Advice（通知）的一种，环绕切入点执行也就是把切入点包裹起来执行。</p>\n<p>@After：Advice（通知）的一种，在切入点正常运行结束后执行。</p>\n<p>@AfterReturning：Advice（通知）的一种，在切入点正常运行结束后执行，异常则不执行</p>\n<p>@AfterThrowing：Advice（通知）的一种，在切入点运行异常时执行。</p>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 符合条件的目标方法时带有@MetricTime注解的方法</span></span><br><span class=\"line\"><span class=\"meta\">@Around(&quot;@annotation(metricTime)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">doLogging</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;[Around] start &quot;</span> + pjp.getSignature());</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">retVal</span> <span class=\"operator\">=</span> pjp.proceed(); <span class=\"comment\">// @Around可以决定是否执行目标方法</span></span><br><span class=\"line\">    System.err.println(<span class=\"string\">&quot;[Around] done &quot;</span> + pjp.getSignature());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"底层实现原理\"><a class=\"markdownIt-Anchor\" href=\"#底层实现原理\"></a> 底层实现原理</h1>\n<p>注解的底层实现依赖于动态代理。当通过反射获取注解时，Java 会生成一个实现了注解接口的动态代理类。这个代理类负责存储注解的属性值，并在调用注解方法时返回这些值。</p>\n<p>注解的解析和动态代理对象的创建是通过 AnnotatedElement 接口实现的。Class、Method、Field 等类都实现了 AnnotatedElement 接口，提供了获取注解信息的方法，如 getAnnotation()、getAnnotations() 等。</p>\n<p>当调用 getAnnotation() 方法时，Java 会通过 AnnotationParser 解析类的字节码，从常量池中提取注解信息，并将其封装为动态代理对象返回。</p>\n<h2 id=\"annotatedelement\"><a class=\"markdownIt-Anchor\" href=\"#annotatedelement\"></a> AnnotatedElement</h2>\n<p><code>AnnotatedElement</code> 是 Java 反射 API 中的一个接口，用于表示可以被注解修饰的程序元素。它提供了访问注解的方法，允许在运行时读取类、方法、字段等元素上的注解信息。</p>\n<h3 id=\"annotatedelement-的实现类\"><a class=\"markdownIt-Anchor\" href=\"#annotatedelement-的实现类\"></a> <code>AnnotatedElement</code> 的实现类</h3>\n<p><code>AnnotatedElement</code> 接口由以下类和接口实现：</p>\n<ul>\n<li><code>Class</code>: 类或接口</li>\n<li><code>Method</code>: 方法</li>\n<li><code>Field</code>: 字段</li>\n<li><code>Constructor</code>: 构造函数</li>\n<li><code>Package</code>: 包</li>\n<li><code>Parameter</code>: 方法参数（JDK 8 引入）</li>\n<li><code>AccessibleObject</code>: 可访问对象（<code>Method</code>、<code>Field</code>、<code>Constructor</code> 的父类）</li>\n</ul>\n<hr />\n<h3 id=\"annotatedelement-的核心方法\"><a class=\"markdownIt-Anchor\" href=\"#annotatedelement-的核心方法\"></a> <code>AnnotatedElement</code> 的核心方法</h3>\n<p><code>AnnotatedElement</code> 接口定义了以下核心方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回指定类型的注解，如果不存在则返回 <code>null</code>。</td>\n</tr>\n<tr>\n<td><code>Annotation[] getAnnotations()</code></td>\n<td>返回当前元素上的所有注解（包括继承的注解）。</td>\n</tr>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回指定类型的注解数组（支持重复注解）。</td>\n</tr>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回直接修饰当前元素的指定类型注解（不包括继承的注解）。</td>\n</tr>\n<tr>\n<td><code>Annotation[] getDeclaredAnnotations()</code></td>\n<td>返回直接修饰当前元素的所有注解（不包括继承的注解）。</td>\n</tr>\n<tr>\n<td><code>&lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code></td>\n<td>返回直接修饰当前元素的指定类型注解数组（支持重复注解）。</td>\n</tr>\n<tr>\n<td><code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></td>\n<td>判断当前元素是否被指定类型的注解修饰。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p><code>AnnotatedElement</code> 接口是 Java 反射 API 中用于访问注解的核心接口。通过它，开发者可以在运行时读取类、方法、字段等元素上的注解信息，并根据注解的值动态调整程序的行为。</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>支持的元素</strong></td>\n<td>类、方法、字段、构造函数、包、参数等。</td>\n</tr>\n<tr>\n<td><strong>核心方法</strong></td>\n<td><code>getAnnotation</code>、<code>getAnnotations</code>、<code>isAnnotationPresent</code> 等。</td>\n</tr>\n<tr>\n<td><strong>重复注解支持</strong></td>\n<td>通过 <code>getAnnotationsByType</code> 和 <code>getDeclaredAnnotationsByType</code> 处理。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"注解的解析\"><a class=\"markdownIt-Anchor\" href=\"#注解的解析\"></a> 注解的解析</h2>\n<ul>\n<li><strong>解析时机</strong>：当通过反射（如 <code>getAnnotation()</code> 方法）获取注解时，Java 会解析类的字节码，提取注解信息。</li>\n<li><strong>解析过程</strong>：\n<ol>\n<li>Java 会从类的字节码中读取 <code>RuntimeVisibleAnnotations</code> 属性（存储运行时可见的注解信息）。</li>\n<li>使用 <code>AnnotationParser</code> 解析这些注解信息，将其转换为内部的注解数据结构。</li>\n<li>解析后的注解信息会被缓存，以提高后续访问的性能。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"注解代理对象的创建\"><a class=\"markdownIt-Anchor\" href=\"#注解代理对象的创建\"></a> 注解代理对象的创建</h2>\n<ul>\n<li><strong>创建时机</strong>：在注解解析完成后，Java 会动态生成一个代理对象来表示注解实例。</li>\n<li><strong>创建过程</strong>：\n<ol>\n<li>使用 <code>AnnotationInvocationHandler</code> 创建一个动态代理对象。</li>\n<li>代理对象会存储解析后的注解属性值。</li>\n<li>当调用注解方法（如 <code>value()</code>）时，代理对象会返回存储的属性值。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"实现了invocationhandler接口的类\"><a class=\"markdownIt-Anchor\" href=\"#实现了invocationhandler接口的类\"></a> 实现了InvocationHandler接口的类</h3>\n<p>jdk的动态代理，需要一个Proxy类（jdk提供的用于生成对象的类），一个实现了InvocationHandler接口的类（用于封装代理逻辑的类）。</p>\n<p>动态代理类的生成过程是通过 AnnotationInvocationHandler 实现的，AnnotationInvocationHandler 是 JDK 提供的一个内部类。</p>\n<p>在创建代理对象之前，解析注解时候 从该注解类的常量池中取出注解的信息，包括之前写到注解中的参数，然后将这些信息在创建 AnnotationInvocationHandler时候 ，传入进去 作为构造函数的参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnotationInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理注解的解析</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用proxynewproxyinstance创建代理对象\"><a class=\"markdownIt-Anchor\" href=\"#使用proxynewproxyinstance创建代理对象\"></a> 使用Proxy.newProxyInstance()创建代理对象</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span><br><span class=\"line\"><span class=\"params\">                                       Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"line\"><span class=\"params\">                                       InvocationHandler h)</span></span><br><span class=\"line\">     <span class=\"keyword\">throws</span> IllegalArgumentException</span><br></pre></td></tr></table></figure>\n<h1 id=\"深入理解注解\"><a class=\"markdownIt-Anchor\" href=\"#深入理解注解\"></a> 深入理解注解</h1>\n<h2 id=\"注解不支持继承\"><a class=\"markdownIt-Anchor\" href=\"#注解不支持继承\"></a> 注解不支持继承</h2>\n<h1 id=\"常见注解\"><a class=\"markdownIt-Anchor\" href=\"#常见注解\"></a> 常见注解</h1>\n<h2 id=\"lombok注解\"><a class=\"markdownIt-Anchor\" href=\"#lombok注解\"></a> lombok注解</h2>\n<p>@NoArgsConstructor: 自动生成无参数构造函数<br />\n@AllArgsConstructor: 自动生成全参数构造函数<br />\n@Data: 自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter和@RequiredArgsConstructor</p>\n<h2 id=\"inheritdoc\"><a class=\"markdownIt-Anchor\" href=\"#inheritdoc\"></a> @inheritDoc</h2>\n<p>在@Override上加上{@inheritDoc}注解，对项目导出详细设计时，可自动获取接口的注释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"aspectj-注解\"><a class=\"markdownIt-Anchor\" href=\"#aspectj-注解\"></a> AspectJ 注解</h2>\n<ul>\n<li>@Aspect：定义切面。</li>\n<li>@Pointcut：定义切入点。</li>\n<li>@Before、@After、@Around、@AfterReturning、@Afterthrowing：定义通知。</li>\n<li>@AspectJ 声明切面</li>\n<li>@DeclareParents</li>\n</ul>\n<h2 id=\"servlet注解\"><a class=\"markdownIt-Anchor\" href=\"#servlet注解\"></a> Servlet注解</h2>\n<p>Servlet 注解用于简化 Web 应用的配置。常见的注解包括：</p>\n<ul>\n<li>@WebServlet：定义 Servlet。</li>\n<li>@WebFilter：定义过滤器。</li>\n<li>@WebListener：定义监听器。</li>\n</ul>\n<p><a href=\"https://www.yuque.com/zhaomengyao2019/kzz0dr/hm0mk3gfnphb6ouz\">Servlet注解</a></p>\n<h2 id=\"spring注解\"><a class=\"markdownIt-Anchor\" href=\"#spring注解\"></a> Spring注解</h2>\n<p>Spring 框架提供了丰富的注解，用于依赖注入、事务管理、AOP 等。</p>\n<ul>\n<li>核心注解：\n<ul>\n<li>@Component：通用组件注解。</li>\n<li>@Service：标注服务层组件。</li>\n<li>@Repository：标注数据访问层组件。</li>\n<li>@Controller：标注控制器组件。</li>\n</ul>\n</li>\n<li>依赖注入：\n<ul>\n<li>@Autowired：自动注入依赖。</li>\n<li>@Qualifier：指定注入的 Bean。</li>\n</ul>\n</li>\n<li>AOP：\n<ul>\n<li>Spring AOP 支持使用 AspectJ 的注解风格，包括 @Pointcut、@Before、@After、@AfterReturning、@AfterThrowing、@Around 等。</li>\n<li>Spring AOP 可以与 AspectJ 集成，利用 AspectJ 的强大功能（如编译时织入）。</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.yuque.com/zhaomengyao2019/kzz0dr/plryge1pbba2pcu1\">Spring注解</a></p>\n<h2 id=\"spring-boot注解\"><a class=\"markdownIt-Anchor\" href=\"#spring-boot注解\"></a> Spring Boot注解</h2>\n<p>Spring Boot 进一步简化了 Spring 应用的开发。</p>\n<ul>\n<li>启动类注解：\n<ul>\n<li>@SpringBootApplication：标注 Spring Boot 应用的启动类。</li>\n</ul>\n</li>\n<li>配置注解：\n<ul>\n<li>@Configuration：标注配置类。</li>\n<li>@Bean：标注方法返回的 Bean。</li>\n</ul>\n</li>\n<li>Web 开发：\n<ul>\n<li>@RestController：标注 RESTful 控制器。</li>\n<li>@RequestMapping：映射请求路径。</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.yuque.com/zhaomengyao2019/kzz0dr/iau341\">SpringBoot注解</a></p>\n"},{"title":"Java泛型机制","date":"2025-03-12T06:31:25.000Z","_content":"Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示都替换为具体的类型，就像完全没有泛型一样。\n\n# 为什么会引入泛型\n泛型的本质是为了参数化类型，也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。引入泛型的意义在于：\n1. 实现代码复用，适用于多种数据类型执行相同的代码\n2. 提供类型约束，支持编译前的检查\n\n# 泛型的基本使用\n## 泛型类\n在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。\n\n## 泛型接口\n在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。\n\n## 泛型方法\n在方法返回值前使用尖括号定义泛型。\n\n**为什么要使用泛型方法呢？**\n因为泛型类要在实例化的时候就指明类型，如果想换一种类型，就得重新new一次，不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。\n\n**泛型方法和泛型类中（使用泛型的）方法不同点在于泛型定义的位置不同：**\n- 泛型类的方法使用的泛型是在类名后定义\n- 泛型方法的泛型在方法返回值前定义\n\n## 泛型的上下限\n```\n<?> 无限制通配符\n<? extends A> 类型可以是A或A的子类型\n<? super A> 类型可以是A或A的父类型\n```\n使用规则：\n- 生产者有上限：手机生产商可以生产各种品牌的手机\n- 消费者有下限\n- 如果既是生产者又是消费之，需要精确的类型\n\n## 泛型代码简化\n变量声明时定义泛型可以实现与完全使用泛型参数一样的效果，变量实例化时定义泛型没有效果。类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。\n\n```java\nArrayList<String> list1 = new ArrayList(); // 变量声明时定义泛型有效\nArrayList list2 = new ArrayList<String>(); // 变量实例化时定义泛型无效\n```\n\n# 类型擦除\n类型擦除（Type Erasure） 是 Java 泛型实现的一种机制，目的是为了兼容泛型引入之前的代码（即 Java 5 之前的非泛型代码）。类型擦除的核心思想是：在编译时检查泛型类型的安全性，但在运行时将泛型类型信息擦除，替换为原始类型（Raw Type）或边界类型（Bound Type）。\n\n## 类型擦除的规则\n1. 无界泛型替换为Object\n2. 有界泛型根据子类替换原则取类型参数的最左边限定类型（即父类）\n3. 为了保证编译的多态性，编译器会生成桥接方法，例如\n\n```java\nclass MyClass implements Comparable<MyClass> {\n    @Override\n    public int compareTo(MyClass other) {\n        return 0;\n    }\n}\n```\n\n编译后会生成一个桥接方法：\n\n```java\npublic int compareTo(Object other) {\n    return compareTo((MyClass) other);\n}\n```\n\n## 类型擦除的影响\n1. 运行时无法获取泛型类型信息\n2. 无法创建泛型类型的实例\n3. 无法使用基本类型作为泛型参数\n4. 无法直接创建泛型数组\n\n## 绕过类型擦除的限制\n```java\npublic class MyClass<T> {\n    private Class<T> type;\n\n    public MyClass(Class<T> type) {\n        this.type = type;\n    }\n\n    public T createInstance() throws Exception {\n        return type.getDeclaredConstructor().newInstance();\n    }\n}\n```\n\n# 深入理解泛型\n## 如何理解泛型类型不能实例化？\n因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件。由于T 被擦除为 Object，如果可以 new T() 则就变成了 new Object()，失去了本意。如果确实需要实例化一个泛型，可以通过反射实现。\n\n## 能不能采用具体的泛型类型初始化泛型数组？\n不能，但是可以采用通配符的方式初始化泛型数组，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。\n\n```java\nList<?>[] lsa = new List<?>[10]; // OK, array of unbounded wildcard type.\nObject o = lsa;\nObject[] oa = (Object[]) o;\nList<Integer> li = new ArrayList<Integer>();\nli.add(new Integer(3));\noa[1] = li; // Correct.\nInteger i = (Integer) lsa[1].get(0); // OK\n```\n\n## 泛型数组：如何正确的初始化泛型数组实例？\n\n无论我们通过new ArrayList[10] 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，都不推荐。\n\n使用泛型数组的场景应该尽量使用列表集合替换，非要创建泛型数组，可以通过反射来实现。\n\n## 如何理解异常中使用泛型？\n不能抛出也不能捕获泛型类的对象。无论使用无界泛型还是有界泛型，在编译时泛型信息全都会别擦除掉，变成原始类型，失去了使用泛型的意义。","source":"_posts/Java泛型机制.md","raw":"---\ntitle: Java泛型机制\ndate: 2025-03-12 14:31:25\ntags:\n  - Java\n  - Java中级\n  - Java泛型\ncategories:\n  - Java\n  - Java中级\n---\nJava泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示都替换为具体的类型，就像完全没有泛型一样。\n\n# 为什么会引入泛型\n泛型的本质是为了参数化类型，也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。引入泛型的意义在于：\n1. 实现代码复用，适用于多种数据类型执行相同的代码\n2. 提供类型约束，支持编译前的检查\n\n# 泛型的基本使用\n## 泛型类\n在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。\n\n## 泛型接口\n在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。\n\n## 泛型方法\n在方法返回值前使用尖括号定义泛型。\n\n**为什么要使用泛型方法呢？**\n因为泛型类要在实例化的时候就指明类型，如果想换一种类型，就得重新new一次，不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。\n\n**泛型方法和泛型类中（使用泛型的）方法不同点在于泛型定义的位置不同：**\n- 泛型类的方法使用的泛型是在类名后定义\n- 泛型方法的泛型在方法返回值前定义\n\n## 泛型的上下限\n```\n<?> 无限制通配符\n<? extends A> 类型可以是A或A的子类型\n<? super A> 类型可以是A或A的父类型\n```\n使用规则：\n- 生产者有上限：手机生产商可以生产各种品牌的手机\n- 消费者有下限\n- 如果既是生产者又是消费之，需要精确的类型\n\n## 泛型代码简化\n变量声明时定义泛型可以实现与完全使用泛型参数一样的效果，变量实例化时定义泛型没有效果。类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。\n\n```java\nArrayList<String> list1 = new ArrayList(); // 变量声明时定义泛型有效\nArrayList list2 = new ArrayList<String>(); // 变量实例化时定义泛型无效\n```\n\n# 类型擦除\n类型擦除（Type Erasure） 是 Java 泛型实现的一种机制，目的是为了兼容泛型引入之前的代码（即 Java 5 之前的非泛型代码）。类型擦除的核心思想是：在编译时检查泛型类型的安全性，但在运行时将泛型类型信息擦除，替换为原始类型（Raw Type）或边界类型（Bound Type）。\n\n## 类型擦除的规则\n1. 无界泛型替换为Object\n2. 有界泛型根据子类替换原则取类型参数的最左边限定类型（即父类）\n3. 为了保证编译的多态性，编译器会生成桥接方法，例如\n\n```java\nclass MyClass implements Comparable<MyClass> {\n    @Override\n    public int compareTo(MyClass other) {\n        return 0;\n    }\n}\n```\n\n编译后会生成一个桥接方法：\n\n```java\npublic int compareTo(Object other) {\n    return compareTo((MyClass) other);\n}\n```\n\n## 类型擦除的影响\n1. 运行时无法获取泛型类型信息\n2. 无法创建泛型类型的实例\n3. 无法使用基本类型作为泛型参数\n4. 无法直接创建泛型数组\n\n## 绕过类型擦除的限制\n```java\npublic class MyClass<T> {\n    private Class<T> type;\n\n    public MyClass(Class<T> type) {\n        this.type = type;\n    }\n\n    public T createInstance() throws Exception {\n        return type.getDeclaredConstructor().newInstance();\n    }\n}\n```\n\n# 深入理解泛型\n## 如何理解泛型类型不能实例化？\n因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件。由于T 被擦除为 Object，如果可以 new T() 则就变成了 new Object()，失去了本意。如果确实需要实例化一个泛型，可以通过反射实现。\n\n## 能不能采用具体的泛型类型初始化泛型数组？\n不能，但是可以采用通配符的方式初始化泛型数组，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。\n\n```java\nList<?>[] lsa = new List<?>[10]; // OK, array of unbounded wildcard type.\nObject o = lsa;\nObject[] oa = (Object[]) o;\nList<Integer> li = new ArrayList<Integer>();\nli.add(new Integer(3));\noa[1] = li; // Correct.\nInteger i = (Integer) lsa[1].get(0); // OK\n```\n\n## 泛型数组：如何正确的初始化泛型数组实例？\n\n无论我们通过new ArrayList[10] 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，都不推荐。\n\n使用泛型数组的场景应该尽量使用列表集合替换，非要创建泛型数组，可以通过反射来实现。\n\n## 如何理解异常中使用泛型？\n不能抛出也不能捕获泛型类的对象。无论使用无界泛型还是有界泛型，在编译时泛型信息全都会别擦除掉，变成原始类型，失去了使用泛型的意义。","slug":"Java泛型机制","published":1,"updated":"2025-03-12T08:49:18.664Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16e000e64v4b8yy4eoi","content":"<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示都替换为具体的类型，就像完全没有泛型一样。</p>\n<h1 id=\"为什么会引入泛型\"><a class=\"markdownIt-Anchor\" href=\"#为什么会引入泛型\"></a> 为什么会引入泛型</h1>\n<p>泛型的本质是为了参数化类型，也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。引入泛型的意义在于：</p>\n<ol>\n<li>实现代码复用，适用于多种数据类型执行相同的代码</li>\n<li>提供类型约束，支持编译前的检查</li>\n</ol>\n<h1 id=\"泛型的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#泛型的基本使用\"></a> 泛型的基本使用</h1>\n<h2 id=\"泛型类\"><a class=\"markdownIt-Anchor\" href=\"#泛型类\"></a> 泛型类</h2>\n<p>在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。</p>\n<h2 id=\"泛型接口\"><a class=\"markdownIt-Anchor\" href=\"#泛型接口\"></a> 泛型接口</h2>\n<p>在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。</p>\n<h2 id=\"泛型方法\"><a class=\"markdownIt-Anchor\" href=\"#泛型方法\"></a> 泛型方法</h2>\n<p>在方法返回值前使用尖括号定义泛型。</p>\n<p><strong>为什么要使用泛型方法呢？</strong><br />\n因为泛型类要在实例化的时候就指明类型，如果想换一种类型，就得重新new一次，不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p>\n<p><strong>泛型方法和泛型类中（使用泛型的）方法不同点在于泛型定义的位置不同：</strong></p>\n<ul>\n<li>泛型类的方法使用的泛型是在类名后定义</li>\n<li>泛型方法的泛型在方法返回值前定义</li>\n</ul>\n<h2 id=\"泛型的上下限\"><a class=\"markdownIt-Anchor\" href=\"#泛型的上下限\"></a> 泛型的上下限</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?&gt; 无限制通配符</span><br><span class=\"line\">&lt;? extends A&gt; 类型可以是A或A的子类型</span><br><span class=\"line\">&lt;? super A&gt; 类型可以是A或A的父类型</span><br></pre></td></tr></table></figure>\n<p>使用规则：</p>\n<ul>\n<li>生产者有上限：手机生产商可以生产各种品牌的手机</li>\n<li>消费者有下限</li>\n<li>如果既是生产者又是消费之，需要精确的类型</li>\n</ul>\n<h2 id=\"泛型代码简化\"><a class=\"markdownIt-Anchor\" href=\"#泛型代码简化\"></a> 泛型代码简化</h2>\n<p>变量声明时定义泛型可以实现与完全使用泛型参数一样的效果，变量实例化时定义泛型没有效果。类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(); <span class=\"comment\">// 变量声明时定义泛型有效</span></span><br><span class=\"line\"><span class=\"type\">ArrayList</span> <span class=\"variable\">list2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(); <span class=\"comment\">// 变量实例化时定义泛型无效</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"类型擦除\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除\"></a> 类型擦除</h1>\n<p>类型擦除（Type Erasure） 是 Java 泛型实现的一种机制，目的是为了兼容泛型引入之前的代码（即 Java 5 之前的非泛型代码）。类型擦除的核心思想是：在编译时检查泛型类型的安全性，但在运行时将泛型类型信息擦除，替换为原始类型（Raw Type）或边界类型（Bound Type）。</p>\n<h2 id=\"类型擦除的规则\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除的规则\"></a> 类型擦除的规则</h2>\n<ol>\n<li>无界泛型替换为Object</li>\n<li>有界泛型根据子类替换原则取类型参数的最左边限定类型（即父类）</li>\n<li>为了保证编译的多态性，编译器会生成桥接方法，例如</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;MyClass&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(MyClass other)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译后会生成一个桥接方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(Object other)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compareTo((MyClass) other);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型擦除的影响\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除的影响\"></a> 类型擦除的影响</h2>\n<ol>\n<li>运行时无法获取泛型类型信息</li>\n<li>无法创建泛型类型的实例</li>\n<li>无法使用基本类型作为泛型参数</li>\n<li>无法直接创建泛型数组</li>\n</ol>\n<h2 id=\"绕过类型擦除的限制\"><a class=\"markdownIt-Anchor\" href=\"#绕过类型擦除的限制\"></a> 绕过类型擦除的限制</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(Class&lt;T&gt; type)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">createInstance</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.getDeclaredConstructor().newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"深入理解泛型\"><a class=\"markdownIt-Anchor\" href=\"#深入理解泛型\"></a> 深入理解泛型</h1>\n<h2 id=\"如何理解泛型类型不能实例化\"><a class=\"markdownIt-Anchor\" href=\"#如何理解泛型类型不能实例化\"></a> 如何理解泛型类型不能实例化？</h2>\n<p>因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件。由于T 被擦除为 Object，如果可以 new T() 则就变成了 new Object()，失去了本意。如果确实需要实例化一个泛型，可以通过反射实现。</p>\n<h2 id=\"能不能采用具体的泛型类型初始化泛型数组\"><a class=\"markdownIt-Anchor\" href=\"#能不能采用具体的泛型类型初始化泛型数组\"></a> 能不能采用具体的泛型类型初始化泛型数组？</h2>\n<p>不能，但是可以采用通配符的方式初始化泛型数组，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;?&gt;[] lsa = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>&lt;?&gt;[<span class=\"number\">10</span>]; <span class=\"comment\">// OK, array of unbounded wildcard type.</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> lsa;</span><br><span class=\"line\">Object[] oa = (Object[]) o;</span><br><span class=\"line\">List&lt;Integer&gt; li = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">li.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">oa[<span class=\"number\">1</span>] = li; <span class=\"comment\">// Correct.</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (Integer) lsa[<span class=\"number\">1</span>].get(<span class=\"number\">0</span>); <span class=\"comment\">// OK</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型数组如何正确的初始化泛型数组实例\"><a class=\"markdownIt-Anchor\" href=\"#泛型数组如何正确的初始化泛型数组实例\"></a> 泛型数组：如何正确的初始化泛型数组实例？</h2>\n<p>无论我们通过new ArrayList[10] 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，都不推荐。</p>\n<p>使用泛型数组的场景应该尽量使用列表集合替换，非要创建泛型数组，可以通过反射来实现。</p>\n<h2 id=\"如何理解异常中使用泛型\"><a class=\"markdownIt-Anchor\" href=\"#如何理解异常中使用泛型\"></a> 如何理解异常中使用泛型？</h2>\n<p>不能抛出也不能捕获泛型类的对象。无论使用无界泛型还是有界泛型，在编译时泛型信息全都会别擦除掉，变成原始类型，失去了使用泛型的意义。</p>\n","excerpt":"","more":"<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示都替换为具体的类型，就像完全没有泛型一样。</p>\n<h1 id=\"为什么会引入泛型\"><a class=\"markdownIt-Anchor\" href=\"#为什么会引入泛型\"></a> 为什么会引入泛型</h1>\n<p>泛型的本质是为了参数化类型，也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。引入泛型的意义在于：</p>\n<ol>\n<li>实现代码复用，适用于多种数据类型执行相同的代码</li>\n<li>提供类型约束，支持编译前的检查</li>\n</ol>\n<h1 id=\"泛型的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#泛型的基本使用\"></a> 泛型的基本使用</h1>\n<h2 id=\"泛型类\"><a class=\"markdownIt-Anchor\" href=\"#泛型类\"></a> 泛型类</h2>\n<p>在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。</p>\n<h2 id=\"泛型接口\"><a class=\"markdownIt-Anchor\" href=\"#泛型接口\"></a> 泛型接口</h2>\n<p>在类名后面使用尖括号定义泛型，在变量和方法中使用定义的泛型，支持多元泛型。</p>\n<h2 id=\"泛型方法\"><a class=\"markdownIt-Anchor\" href=\"#泛型方法\"></a> 泛型方法</h2>\n<p>在方法返回值前使用尖括号定义泛型。</p>\n<p><strong>为什么要使用泛型方法呢？</strong><br />\n因为泛型类要在实例化的时候就指明类型，如果想换一种类型，就得重新new一次，不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p>\n<p><strong>泛型方法和泛型类中（使用泛型的）方法不同点在于泛型定义的位置不同：</strong></p>\n<ul>\n<li>泛型类的方法使用的泛型是在类名后定义</li>\n<li>泛型方法的泛型在方法返回值前定义</li>\n</ul>\n<h2 id=\"泛型的上下限\"><a class=\"markdownIt-Anchor\" href=\"#泛型的上下限\"></a> 泛型的上下限</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?&gt; 无限制通配符</span><br><span class=\"line\">&lt;? extends A&gt; 类型可以是A或A的子类型</span><br><span class=\"line\">&lt;? super A&gt; 类型可以是A或A的父类型</span><br></pre></td></tr></table></figure>\n<p>使用规则：</p>\n<ul>\n<li>生产者有上限：手机生产商可以生产各种品牌的手机</li>\n<li>消费者有下限</li>\n<li>如果既是生产者又是消费之，需要精确的类型</li>\n</ul>\n<h2 id=\"泛型代码简化\"><a class=\"markdownIt-Anchor\" href=\"#泛型代码简化\"></a> 泛型代码简化</h2>\n<p>变量声明时定义泛型可以实现与完全使用泛型参数一样的效果，变量实例化时定义泛型没有效果。类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(); <span class=\"comment\">// 变量声明时定义泛型有效</span></span><br><span class=\"line\"><span class=\"type\">ArrayList</span> <span class=\"variable\">list2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(); <span class=\"comment\">// 变量实例化时定义泛型无效</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"类型擦除\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除\"></a> 类型擦除</h1>\n<p>类型擦除（Type Erasure） 是 Java 泛型实现的一种机制，目的是为了兼容泛型引入之前的代码（即 Java 5 之前的非泛型代码）。类型擦除的核心思想是：在编译时检查泛型类型的安全性，但在运行时将泛型类型信息擦除，替换为原始类型（Raw Type）或边界类型（Bound Type）。</p>\n<h2 id=\"类型擦除的规则\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除的规则\"></a> 类型擦除的规则</h2>\n<ol>\n<li>无界泛型替换为Object</li>\n<li>有界泛型根据子类替换原则取类型参数的最左边限定类型（即父类）</li>\n<li>为了保证编译的多态性，编译器会生成桥接方法，例如</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;MyClass&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(MyClass other)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译后会生成一个桥接方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(Object other)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compareTo((MyClass) other);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型擦除的影响\"><a class=\"markdownIt-Anchor\" href=\"#类型擦除的影响\"></a> 类型擦除的影响</h2>\n<ol>\n<li>运行时无法获取泛型类型信息</li>\n<li>无法创建泛型类型的实例</li>\n<li>无法使用基本类型作为泛型参数</li>\n<li>无法直接创建泛型数组</li>\n</ol>\n<h2 id=\"绕过类型擦除的限制\"><a class=\"markdownIt-Anchor\" href=\"#绕过类型擦除的限制\"></a> 绕过类型擦除的限制</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">(Class&lt;T&gt; type)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">createInstance</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.getDeclaredConstructor().newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"深入理解泛型\"><a class=\"markdownIt-Anchor\" href=\"#深入理解泛型\"></a> 深入理解泛型</h1>\n<h2 id=\"如何理解泛型类型不能实例化\"><a class=\"markdownIt-Anchor\" href=\"#如何理解泛型类型不能实例化\"></a> 如何理解泛型类型不能实例化？</h2>\n<p>因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件。由于T 被擦除为 Object，如果可以 new T() 则就变成了 new Object()，失去了本意。如果确实需要实例化一个泛型，可以通过反射实现。</p>\n<h2 id=\"能不能采用具体的泛型类型初始化泛型数组\"><a class=\"markdownIt-Anchor\" href=\"#能不能采用具体的泛型类型初始化泛型数组\"></a> 能不能采用具体的泛型类型初始化泛型数组？</h2>\n<p>不能，但是可以采用通配符的方式初始化泛型数组，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;?&gt;[] lsa = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>&lt;?&gt;[<span class=\"number\">10</span>]; <span class=\"comment\">// OK, array of unbounded wildcard type.</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> lsa;</span><br><span class=\"line\">Object[] oa = (Object[]) o;</span><br><span class=\"line\">List&lt;Integer&gt; li = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">li.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">oa[<span class=\"number\">1</span>] = li; <span class=\"comment\">// Correct.</span></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (Integer) lsa[<span class=\"number\">1</span>].get(<span class=\"number\">0</span>); <span class=\"comment\">// OK</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型数组如何正确的初始化泛型数组实例\"><a class=\"markdownIt-Anchor\" href=\"#泛型数组如何正确的初始化泛型数组实例\"></a> 泛型数组：如何正确的初始化泛型数组实例？</h2>\n<p>无论我们通过new ArrayList[10] 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，都不推荐。</p>\n<p>使用泛型数组的场景应该尽量使用列表集合替换，非要创建泛型数组，可以通过反射来实现。</p>\n<h2 id=\"如何理解异常中使用泛型\"><a class=\"markdownIt-Anchor\" href=\"#如何理解异常中使用泛型\"></a> 如何理解异常中使用泛型？</h2>\n<p>不能抛出也不能捕获泛型类的对象。无论使用无界泛型还是有界泛型，在编译时泛型信息全都会别擦除掉，变成原始类型，失去了使用泛型的意义。</p>\n"},{"title":"Linux Shell","date":"2025-03-05T02:59:51.000Z","_content":"# 简介\n在 Linux Shell 中，变量、条件判断、循环等概念与编程语言中的语法非常相似。Shell 脚本作为一种强大的自动化工具，不仅能够执行系统命令，还可以通过变量、条件判断和循环等编程结构实现复杂的逻辑控制。本文将详细介绍 Linux Shell 中的这些核心概念，帮助你更好地理解和编写高效的 Shell 脚本。\n\n1. 在 Shell 中，指令的下达和编辑是日常操作的基础。通过组合键，你可以快速编辑命令行，提高工作效率。\n2. 变量是 Shell 脚本中的重要组成部分，用于存储和操作数据。Shell 提供了多种变量设置方式，灵活应对不同的场景。\n3. 环境变量是系统或用户定义的变量，用于配置 Shell 的行为和运行环境。通过 export 命令，可以将变量设置为环境变量，使其在子进程中可用。\n4. `test` 指令用于条件判断，支持文件测试、字符串比较、数值比较等多种操作，帮助你在脚本中实现复杂的逻辑控制。\n5. Shell 中的括号有多种用途，包括数组赋值、子 Shell 执行、命令替换和算术运算等。理解括号的不同用法可以让你更灵活地编写脚本。\n6. `seq` 命令用于生成数字序列，支持指定格式、分隔符和宽度等选项，适用于批量生成数字或文件名。\n7. 循环结构允许你重复执行一系列命令，适用于批量处理文件和自动化任务。\n\n通过掌握这些核心概念，你将能够编写出功能强大且高效的 Shell 脚本，提升系统管理和自动化任务的效率。\n\n# 指令下达与快速编辑按钮\n## 指令下达[Enter]\n## 快速编辑\n| 组合键 | 功能 |\n| --- | --- |\n| ctrl + u | 向前删除指令串 |\n| ctrl + k | 向后删除指令串 |\n| ctrl + a | 移动到整个指令串最前面 |\n| ctrl + e | 移动到整个指令串最后面 |\n\n# 变量\n## 设置普通变量\n| 变量设置方式 | str 没有设置 | str 为空字串 | str 已设置为非空字串 |\n| --- | --- | --- | --- |\n| `var=${str-expr}` | `var=expr` | `var=` | `var=$str` |\n| `var=${str:-expr}` | `var=expr` | `var=expr` | `var=$str` |\n| `var=${str+expr}` | `var=` | `var=expr` | `var=expr` |\n| `var=${str:+expr}` | `var=` | `var=` | `var=expr` |\n| `var=${str=expr}` | `str=expr`<br/>`var=expr` | `str` 不变<br/>`var=` | `str` 不变<br/>`var=$str` |\n| `var=${str:=expr}` | `str=expr`<br/>`var=expr` | `str=expr`<br/>`var=expr` | `str` 不变<br/>`var=$str` |\n| `var=${str?expr}` | `expr` 输出至 `stderr` | `var=` | `var=$str` |\n| `var=${str:?expr}` | `expr` 输出至 `stderr` | `expr` 输出至 `stderr` | `var=$str` |\n\n```\n等号两边不能直接接空白字符\n变量内容若用空白字符可使用双引号或单引号，或者使用转移字符\n双引号内的特殊字符可保持原本的特性\n单引号内的特殊字符仅为一般文本\n在一串指令的执行中，还需借由其它额外的指令所提供的信息是可使用反单引号或$()\n-若变量未被设置，则使用默认值，若已设置，则使用原值\n+若变量未被设置，则使用原值（未被设置），若已设置，则使用默认值\n:变量为空字符串时，规则同变量未被设置\n```\n\n## export设置环境变量\n若变量需要在其他子程序执行，则需要以export来使变量变成环境变量\n\n## 取消设置 unset\n## 取用\n### $变量\n### ${变量}\n\n```plain\necho $PATH\n```\n\n### 执行指令，结果作为外部指令输入参数 $()\n### 获取变量长度\n```git\necho ${#PWD}\n```\n\n### 字符串截取\n| 格式 | 说明 |\n| --- | --- |\n| `${string:start:length}` | 从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。 |\n| `${string:start}` | 从 string 字符串的左边第 start 个字符开始截取，直到最后。 |\n| `${string:0-start:length}` | 从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。 |\n| `${string:0-start}` | 从 string 字符串的右边第 start 个字符开始截取，直到最后。 |\n| `${string#*chars}` | 从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。 |\n| `${string##*chars}` | 从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。 |\n| `${string%*chars}` | 从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。 |\n| `${string%%*chars}` | 从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。 |\n\n## 修改\n### 删除\n`${variable#pattern}`: 删除开头到第一个`pattern`的内容\n\n`${variable##pattern}`: 删除开头到最后一个`pattern`的内容\n\n`${variable%pattern}`: 从结尾删除最短匹配的`pattern`\n\n`${variable%%pattern}`: 从结尾删除最长匹配的`pattern`\n\n#### 实际应用场景\n删除文件扩展名\n\n```yaml\nfilename=\"example.tar.gz\"\nname=${filename%%.*}\necho $name # example\n```\n\n### 替换\n`/old_str/new_str` 替换第一个\n\n`//old_str/new_str` 替换最后一个\n\n# 环境变量\nexport > env\n\n## export\n## env\n## 环境变量配置文件\n### login shell\n1. /etc/profile：这是系统整体的设置，你最好不要修改这个文件；\n\n2. ~/.bash_profile 或 ~/.bash_login 或 ~/.profile：属于使用者个人设置，你要改自己的数据，就写入这里！\n\n### 可执行文件路径\n将自己创建的可执行文件放置到~/bin/ 目录，就可以直接执行该可执行文件而不需要使用绝对/相对路径来执行该文件\n\n### source\n### non-login shell\n~/.bashrc 别名通常定义在该文件中\n\n# 括号\n## 小括号\n### ()\n1. 数组赋值\n2. 子shell\n3. 命令集结果重定向\n\n```bash\n(echo \"a\";echo \"b\";) | awk '{print NR,$0}'\n```\n\n### $()\n执行命令\n\n### $(()) 执行计算\n```bash\necho $((13%3))\n```\n\n输入两个变量，输出相乘的结果\n\n```bash\necho -e \"输入两个变量，输出相乘的结果\"\nread -p \"first number:\" firstnum\nread -p \"second number:\" secondnum\ntotal = $((${firstnum}*${secondnum}))\necho -e \"${total}\"\n```\n\n## 中括号\n### []\n1. `[`等同于test, `]`用于关闭条件判断。\n2. 用于正则表达式中，描述一个匹配的字符范围。\n3. 数组编号\n\n```\n如果要在 bash 的语法当中使用中括号作为 shell 的判断式，必须要注意中括号的两端需要有空白字符来分隔\n中括号内的变量使用`${var}`格式，最好都以双引号括起来\n中括号内的变量会被翻译为原始值再进行比较，若有空格会被翻译为多个值\n中括号内的常数，最好都以单或双引号括起来\n```\n\n### [[]]\n&&、||、<、>操作符可以出现在[[]]结构中\n\n## 大括号\n### ${var}\n当变量名和后面的内容都是变量命名所允许的内容时候这时候直接用$var是不行的得用{}把变量名括起来\n\n### `var=${str-expr}`\n如果 `str` 未设置（未定义），则 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str:-expr}`\n如果 `str` 未设置或为空字符串，则 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str+expr}`\n如果 `str` 已设置（无论是否为空），则 `var` 的值为 `expr`；否则，`var` 为空。\n\n### `var=${str:+expr}`\n如果 `str` 已设置且不为空，则 `var` 的值为 `expr`；否则，`var` 为空。\n\n### `var=${str=expr}`\n如果 `str` 未设置，则 `str` 的值为 `expr`，且 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str:=expr}`\n如果 `str` 未设置或为空字符串，则 `str` 的值为 `expr`，且 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str?expr}`\n如果 `str` 未设置，则将 `expr` 输出到标准错误（stderr），并终止脚本；否则，`var` 的值为 `str` 的值。\n\n### `var=${str:?expr}`\n如果 `str` 未设置或为空字符串，则将 `expr` 输出到标准错误（stderr），并终止脚本；否则，`var` 的值为 `str` 的值。\n\n# test\n| 文件类型判断 | -e | 文件是否存在 |\n| --- | --- | --- |\n| | -f | 文件是否存在且为普通文件 |\n| | -d |  文件是否存在且为目录 |\n| | -b | 检查文件是否是块设备文件。 |\n| | -c | 检查文件是否是字符设备文件。 |\n| | -S | 检查文件是否是套接字文件。 |\n| | -p | 检查文件是否是命名管道（FIFO） |\n| | -L | 文件是否存在且为符号链接 |\n| 文件的权限侦测 | -r | 文件是否存在且可读 |\n| | -w | 文件是否存在且可写 |\n| | -x | 文件是否存在且可执行 |\n| | -u | 检查文件是否设置了Set User ID（SUID） |\n| | -g | 检查文件是否设置了Set Group ID（SGID） |\n| | -k | 检查文件是否设置了粘滞位（Sticky Bit） |\n| | -s | 文件是否存在且大小大于 0 |\n| 两个文件之间的比较 | -nt | 检查文件1是否比文件2更新 |\n| | -ot | 检查文件1是否比文件2更旧 |\n| | -ef | 检查文件1和文件2是否是同一个文件（相同的 inode）判断hard link |\n| 两个整数之间的判定 | -eq | 等于 |\n| | -ne | 不等于 |\n| | -gt | 大于 |\n| | -lt | 小于 |\n| | -ge | 大于等于 |\n| | -le | 小于等于 |\n| 判定字符串的数据 | -z | 字符串长度是否为 0 |\n| | -n | 字符串长度是否不为 0 |\n| | = | 字符串1 是否等于 字符串2 |\n| | != | 字符串1 是否不等于 字符串2 |\n| 条件组合/逻辑操作 | ! | 逻辑非 |\n|  | -a | 逻辑与 |\n|  | -o | 逻辑或 |\n\n## 若目录不存在则创建\n```bash\n[! -d \"$basedir\"] && mkdir $basedir\n```\n\n## 判定字符串是否为空\n```bash\nif [ -n \"$a\" ]; then\nelse\nfi\n```\n\n# seq\n```\nseq [option] [start] [increment] end\noption:\n-f 指定格式\n-s 指定分隔符\n-w 宽度一致，不能与-f一起用\n```\n\n```bash\n# 指定数字宽度，不足用空格补足\nseq -f \"%3g\" 98 101 \n# 指定数字宽度，不足用0补足\nseq -f \"%03g\" 98 101 \nseq -s \":::\" -f \"%03g\" 98 101\n```\n\n# 循环\n```bash\nfor file in *.sql;\ndo mysql -h localhost -uroot -p park < $file;done\n```\n\n```bash\nfind $PWD -type f | (while read args;do (md5sum $args);done)\n```\n\n# 脚本调用\n在运行shell脚本时候，有三个命令来实现调用外部脚本：exec、source、fork\n\n| 命令 | 产生新进程 | 继承环境变量 | 是否保留环境变量和声明变量 |\n| --- | --- | --- | --- |\n| exec | √ | √ | 不保留（原主shell剩下的内容不会执行） |\n| source | × | √ | 保留 |\n| fork | √ | √ | 保留 |\n\n## exec\n使用exec来调用脚本，被执行的脚本会继承当前shell的环境变量。exec产生了新的进程，会把主shell的进程资源占用并替换脚本内容，继承原主shell的PID号，原主shell剩下的内容不会执行。\n\n## source\n使用source调用外部脚本，不会产生新的进程，继承当前shell环境变量，而且被调用的脚本运行结束后，它拥有的环境变量和声明变量会被当前shell保留，类似将调用脚本的内容复制过来直接执行。执行完毕后原主shell继续运行。\n\n## fork\n直接运行脚本，会以当前shell为父进程，产生新的进程，并且继承主脚本的环境变量和声明变量。执行完毕后，主脚本不会保留其环境变量和声明变量。\n\n## 总结\n这样来看fork最灵活，source次之，exec最诡异。","source":"_posts/Linux-Shell.md","raw":"---\ntitle: Linux Shell\ndate: 2025-03-05 10:59:51\ntags:\ncategories:\n- Linux\n---\n# 简介\n在 Linux Shell 中，变量、条件判断、循环等概念与编程语言中的语法非常相似。Shell 脚本作为一种强大的自动化工具，不仅能够执行系统命令，还可以通过变量、条件判断和循环等编程结构实现复杂的逻辑控制。本文将详细介绍 Linux Shell 中的这些核心概念，帮助你更好地理解和编写高效的 Shell 脚本。\n\n1. 在 Shell 中，指令的下达和编辑是日常操作的基础。通过组合键，你可以快速编辑命令行，提高工作效率。\n2. 变量是 Shell 脚本中的重要组成部分，用于存储和操作数据。Shell 提供了多种变量设置方式，灵活应对不同的场景。\n3. 环境变量是系统或用户定义的变量，用于配置 Shell 的行为和运行环境。通过 export 命令，可以将变量设置为环境变量，使其在子进程中可用。\n4. `test` 指令用于条件判断，支持文件测试、字符串比较、数值比较等多种操作，帮助你在脚本中实现复杂的逻辑控制。\n5. Shell 中的括号有多种用途，包括数组赋值、子 Shell 执行、命令替换和算术运算等。理解括号的不同用法可以让你更灵活地编写脚本。\n6. `seq` 命令用于生成数字序列，支持指定格式、分隔符和宽度等选项，适用于批量生成数字或文件名。\n7. 循环结构允许你重复执行一系列命令，适用于批量处理文件和自动化任务。\n\n通过掌握这些核心概念，你将能够编写出功能强大且高效的 Shell 脚本，提升系统管理和自动化任务的效率。\n\n# 指令下达与快速编辑按钮\n## 指令下达[Enter]\n## 快速编辑\n| 组合键 | 功能 |\n| --- | --- |\n| ctrl + u | 向前删除指令串 |\n| ctrl + k | 向后删除指令串 |\n| ctrl + a | 移动到整个指令串最前面 |\n| ctrl + e | 移动到整个指令串最后面 |\n\n# 变量\n## 设置普通变量\n| 变量设置方式 | str 没有设置 | str 为空字串 | str 已设置为非空字串 |\n| --- | --- | --- | --- |\n| `var=${str-expr}` | `var=expr` | `var=` | `var=$str` |\n| `var=${str:-expr}` | `var=expr` | `var=expr` | `var=$str` |\n| `var=${str+expr}` | `var=` | `var=expr` | `var=expr` |\n| `var=${str:+expr}` | `var=` | `var=` | `var=expr` |\n| `var=${str=expr}` | `str=expr`<br/>`var=expr` | `str` 不变<br/>`var=` | `str` 不变<br/>`var=$str` |\n| `var=${str:=expr}` | `str=expr`<br/>`var=expr` | `str=expr`<br/>`var=expr` | `str` 不变<br/>`var=$str` |\n| `var=${str?expr}` | `expr` 输出至 `stderr` | `var=` | `var=$str` |\n| `var=${str:?expr}` | `expr` 输出至 `stderr` | `expr` 输出至 `stderr` | `var=$str` |\n\n```\n等号两边不能直接接空白字符\n变量内容若用空白字符可使用双引号或单引号，或者使用转移字符\n双引号内的特殊字符可保持原本的特性\n单引号内的特殊字符仅为一般文本\n在一串指令的执行中，还需借由其它额外的指令所提供的信息是可使用反单引号或$()\n-若变量未被设置，则使用默认值，若已设置，则使用原值\n+若变量未被设置，则使用原值（未被设置），若已设置，则使用默认值\n:变量为空字符串时，规则同变量未被设置\n```\n\n## export设置环境变量\n若变量需要在其他子程序执行，则需要以export来使变量变成环境变量\n\n## 取消设置 unset\n## 取用\n### $变量\n### ${变量}\n\n```plain\necho $PATH\n```\n\n### 执行指令，结果作为外部指令输入参数 $()\n### 获取变量长度\n```git\necho ${#PWD}\n```\n\n### 字符串截取\n| 格式 | 说明 |\n| --- | --- |\n| `${string:start:length}` | 从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。 |\n| `${string:start}` | 从 string 字符串的左边第 start 个字符开始截取，直到最后。 |\n| `${string:0-start:length}` | 从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。 |\n| `${string:0-start}` | 从 string 字符串的右边第 start 个字符开始截取，直到最后。 |\n| `${string#*chars}` | 从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。 |\n| `${string##*chars}` | 从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。 |\n| `${string%*chars}` | 从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。 |\n| `${string%%*chars}` | 从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。 |\n\n## 修改\n### 删除\n`${variable#pattern}`: 删除开头到第一个`pattern`的内容\n\n`${variable##pattern}`: 删除开头到最后一个`pattern`的内容\n\n`${variable%pattern}`: 从结尾删除最短匹配的`pattern`\n\n`${variable%%pattern}`: 从结尾删除最长匹配的`pattern`\n\n#### 实际应用场景\n删除文件扩展名\n\n```yaml\nfilename=\"example.tar.gz\"\nname=${filename%%.*}\necho $name # example\n```\n\n### 替换\n`/old_str/new_str` 替换第一个\n\n`//old_str/new_str` 替换最后一个\n\n# 环境变量\nexport > env\n\n## export\n## env\n## 环境变量配置文件\n### login shell\n1. /etc/profile：这是系统整体的设置，你最好不要修改这个文件；\n\n2. ~/.bash_profile 或 ~/.bash_login 或 ~/.profile：属于使用者个人设置，你要改自己的数据，就写入这里！\n\n### 可执行文件路径\n将自己创建的可执行文件放置到~/bin/ 目录，就可以直接执行该可执行文件而不需要使用绝对/相对路径来执行该文件\n\n### source\n### non-login shell\n~/.bashrc 别名通常定义在该文件中\n\n# 括号\n## 小括号\n### ()\n1. 数组赋值\n2. 子shell\n3. 命令集结果重定向\n\n```bash\n(echo \"a\";echo \"b\";) | awk '{print NR,$0}'\n```\n\n### $()\n执行命令\n\n### $(()) 执行计算\n```bash\necho $((13%3))\n```\n\n输入两个变量，输出相乘的结果\n\n```bash\necho -e \"输入两个变量，输出相乘的结果\"\nread -p \"first number:\" firstnum\nread -p \"second number:\" secondnum\ntotal = $((${firstnum}*${secondnum}))\necho -e \"${total}\"\n```\n\n## 中括号\n### []\n1. `[`等同于test, `]`用于关闭条件判断。\n2. 用于正则表达式中，描述一个匹配的字符范围。\n3. 数组编号\n\n```\n如果要在 bash 的语法当中使用中括号作为 shell 的判断式，必须要注意中括号的两端需要有空白字符来分隔\n中括号内的变量使用`${var}`格式，最好都以双引号括起来\n中括号内的变量会被翻译为原始值再进行比较，若有空格会被翻译为多个值\n中括号内的常数，最好都以单或双引号括起来\n```\n\n### [[]]\n&&、||、<、>操作符可以出现在[[]]结构中\n\n## 大括号\n### ${var}\n当变量名和后面的内容都是变量命名所允许的内容时候这时候直接用$var是不行的得用{}把变量名括起来\n\n### `var=${str-expr}`\n如果 `str` 未设置（未定义），则 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str:-expr}`\n如果 `str` 未设置或为空字符串，则 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str+expr}`\n如果 `str` 已设置（无论是否为空），则 `var` 的值为 `expr`；否则，`var` 为空。\n\n### `var=${str:+expr}`\n如果 `str` 已设置且不为空，则 `var` 的值为 `expr`；否则，`var` 为空。\n\n### `var=${str=expr}`\n如果 `str` 未设置，则 `str` 的值为 `expr`，且 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str:=expr}`\n如果 `str` 未设置或为空字符串，则 `str` 的值为 `expr`，且 `var` 的值为 `expr`；否则，`var` 的值为 `str` 的值。\n\n### `var=${str?expr}`\n如果 `str` 未设置，则将 `expr` 输出到标准错误（stderr），并终止脚本；否则，`var` 的值为 `str` 的值。\n\n### `var=${str:?expr}`\n如果 `str` 未设置或为空字符串，则将 `expr` 输出到标准错误（stderr），并终止脚本；否则，`var` 的值为 `str` 的值。\n\n# test\n| 文件类型判断 | -e | 文件是否存在 |\n| --- | --- | --- |\n| | -f | 文件是否存在且为普通文件 |\n| | -d |  文件是否存在且为目录 |\n| | -b | 检查文件是否是块设备文件。 |\n| | -c | 检查文件是否是字符设备文件。 |\n| | -S | 检查文件是否是套接字文件。 |\n| | -p | 检查文件是否是命名管道（FIFO） |\n| | -L | 文件是否存在且为符号链接 |\n| 文件的权限侦测 | -r | 文件是否存在且可读 |\n| | -w | 文件是否存在且可写 |\n| | -x | 文件是否存在且可执行 |\n| | -u | 检查文件是否设置了Set User ID（SUID） |\n| | -g | 检查文件是否设置了Set Group ID（SGID） |\n| | -k | 检查文件是否设置了粘滞位（Sticky Bit） |\n| | -s | 文件是否存在且大小大于 0 |\n| 两个文件之间的比较 | -nt | 检查文件1是否比文件2更新 |\n| | -ot | 检查文件1是否比文件2更旧 |\n| | -ef | 检查文件1和文件2是否是同一个文件（相同的 inode）判断hard link |\n| 两个整数之间的判定 | -eq | 等于 |\n| | -ne | 不等于 |\n| | -gt | 大于 |\n| | -lt | 小于 |\n| | -ge | 大于等于 |\n| | -le | 小于等于 |\n| 判定字符串的数据 | -z | 字符串长度是否为 0 |\n| | -n | 字符串长度是否不为 0 |\n| | = | 字符串1 是否等于 字符串2 |\n| | != | 字符串1 是否不等于 字符串2 |\n| 条件组合/逻辑操作 | ! | 逻辑非 |\n|  | -a | 逻辑与 |\n|  | -o | 逻辑或 |\n\n## 若目录不存在则创建\n```bash\n[! -d \"$basedir\"] && mkdir $basedir\n```\n\n## 判定字符串是否为空\n```bash\nif [ -n \"$a\" ]; then\nelse\nfi\n```\n\n# seq\n```\nseq [option] [start] [increment] end\noption:\n-f 指定格式\n-s 指定分隔符\n-w 宽度一致，不能与-f一起用\n```\n\n```bash\n# 指定数字宽度，不足用空格补足\nseq -f \"%3g\" 98 101 \n# 指定数字宽度，不足用0补足\nseq -f \"%03g\" 98 101 \nseq -s \":::\" -f \"%03g\" 98 101\n```\n\n# 循环\n```bash\nfor file in *.sql;\ndo mysql -h localhost -uroot -p park < $file;done\n```\n\n```bash\nfind $PWD -type f | (while read args;do (md5sum $args);done)\n```\n\n# 脚本调用\n在运行shell脚本时候，有三个命令来实现调用外部脚本：exec、source、fork\n\n| 命令 | 产生新进程 | 继承环境变量 | 是否保留环境变量和声明变量 |\n| --- | --- | --- | --- |\n| exec | √ | √ | 不保留（原主shell剩下的内容不会执行） |\n| source | × | √ | 保留 |\n| fork | √ | √ | 保留 |\n\n## exec\n使用exec来调用脚本，被执行的脚本会继承当前shell的环境变量。exec产生了新的进程，会把主shell的进程资源占用并替换脚本内容，继承原主shell的PID号，原主shell剩下的内容不会执行。\n\n## source\n使用source调用外部脚本，不会产生新的进程，继承当前shell环境变量，而且被调用的脚本运行结束后，它拥有的环境变量和声明变量会被当前shell保留，类似将调用脚本的内容复制过来直接执行。执行完毕后原主shell继续运行。\n\n## fork\n直接运行脚本，会以当前shell为父进程，产生新的进程，并且继承主脚本的环境变量和声明变量。执行完毕后，主脚本不会保留其环境变量和声明变量。\n\n## 总结\n这样来看fork最灵活，source次之，exec最诡异。","slug":"Linux-Shell","published":1,"updated":"2025-03-05T08:33:09.165Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16g000i64v486i62qd1","content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>在 Linux Shell 中，变量、条件判断、循环等概念与编程语言中的语法非常相似。Shell 脚本作为一种强大的自动化工具，不仅能够执行系统命令，还可以通过变量、条件判断和循环等编程结构实现复杂的逻辑控制。本文将详细介绍 Linux Shell 中的这些核心概念，帮助你更好地理解和编写高效的 Shell 脚本。</p>\n<ol>\n<li>在 Shell 中，指令的下达和编辑是日常操作的基础。通过组合键，你可以快速编辑命令行，提高工作效率。</li>\n<li>变量是 Shell 脚本中的重要组成部分，用于存储和操作数据。Shell 提供了多种变量设置方式，灵活应对不同的场景。</li>\n<li>环境变量是系统或用户定义的变量，用于配置 Shell 的行为和运行环境。通过 export 命令，可以将变量设置为环境变量，使其在子进程中可用。</li>\n<li><code>test</code> 指令用于条件判断，支持文件测试、字符串比较、数值比较等多种操作，帮助你在脚本中实现复杂的逻辑控制。</li>\n<li>Shell 中的括号有多种用途，包括数组赋值、子 Shell 执行、命令替换和算术运算等。理解括号的不同用法可以让你更灵活地编写脚本。</li>\n<li><code>seq</code> 命令用于生成数字序列，支持指定格式、分隔符和宽度等选项，适用于批量生成数字或文件名。</li>\n<li>循环结构允许你重复执行一系列命令，适用于批量处理文件和自动化任务。</li>\n</ol>\n<p>通过掌握这些核心概念，你将能够编写出功能强大且高效的 Shell 脚本，提升系统管理和自动化任务的效率。</p>\n<h1 id=\"指令下达与快速编辑按钮\"><a class=\"markdownIt-Anchor\" href=\"#指令下达与快速编辑按钮\"></a> 指令下达与快速编辑按钮</h1>\n<h2 id=\"指令下达enter\"><a class=\"markdownIt-Anchor\" href=\"#指令下达enter\"></a> 指令下达[Enter]</h2>\n<h2 id=\"快速编辑\"><a class=\"markdownIt-Anchor\" href=\"#快速编辑\"></a> 快速编辑</h2>\n<table>\n<thead>\n<tr>\n<th>组合键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + u</td>\n<td>向前删除指令串</td>\n</tr>\n<tr>\n<td>ctrl + k</td>\n<td>向后删除指令串</td>\n</tr>\n<tr>\n<td>ctrl + a</td>\n<td>移动到整个指令串最前面</td>\n</tr>\n<tr>\n<td>ctrl + e</td>\n<td>移动到整个指令串最后面</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h1>\n<h2 id=\"设置普通变量\"><a class=\"markdownIt-Anchor\" href=\"#设置普通变量\"></a> 设置普通变量</h2>\n<table>\n<thead>\n<tr>\n<th>变量设置方式</th>\n<th>str 没有设置</th>\n<th>str 为空字串</th>\n<th>str 已设置为非空字串</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>var=$&#123;str-expr&#125;</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=</code></td>\n<td><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:-expr&#125;</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str+expr&#125;</code></td>\n<td><code>var=</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=expr</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:+expr&#125;</code></td>\n<td><code>var=</code></td>\n<td><code>var=</code></td>\n<td><code>var=expr</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str=expr&#125;</code></td>\n<td><code>str=expr</code><br/><code>var=expr</code></td>\n<td><code>str</code> 不变<br/><code>var=</code></td>\n<td><code>str</code> 不变<br/><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:=expr&#125;</code></td>\n<td><code>str=expr</code><br/><code>var=expr</code></td>\n<td><code>str=expr</code><br/><code>var=expr</code></td>\n<td><code>str</code> 不变<br/><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str?expr&#125;</code></td>\n<td><code>expr</code> 输出至 <code>stderr</code></td>\n<td><code>var=</code></td>\n<td><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:?expr&#125;</code></td>\n<td><code>expr</code> 输出至 <code>stderr</code></td>\n<td><code>expr</code> 输出至 <code>stderr</code></td>\n<td><code>var=$str</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">等号两边不能直接接空白字符</span><br><span class=\"line\">变量内容若用空白字符可使用双引号或单引号，或者使用转移字符</span><br><span class=\"line\">双引号内的特殊字符可保持原本的特性</span><br><span class=\"line\">单引号内的特殊字符仅为一般文本</span><br><span class=\"line\">在一串指令的执行中，还需借由其它额外的指令所提供的信息是可使用反单引号或$()</span><br><span class=\"line\">-若变量未被设置，则使用默认值，若已设置，则使用原值</span><br><span class=\"line\">+若变量未被设置，则使用原值（未被设置），若已设置，则使用默认值</span><br><span class=\"line\">:变量为空字符串时，规则同变量未被设置</span><br></pre></td></tr></table></figure>\n<h2 id=\"export设置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#export设置环境变量\"></a> export设置环境变量</h2>\n<p>若变量需要在其他子程序执行，则需要以export来使变量变成环境变量</p>\n<h2 id=\"取消设置-unset\"><a class=\"markdownIt-Anchor\" href=\"#取消设置-unset\"></a> 取消设置 unset</h2>\n<h2 id=\"取用\"><a class=\"markdownIt-Anchor\" href=\"#取用\"></a> 取用</h2>\n<h3 id=\"变量-2\"><a class=\"markdownIt-Anchor\" href=\"#变量-2\"></a> $变量</h3>\n<h3 id=\"变量-3\"><a class=\"markdownIt-Anchor\" href=\"#变量-3\"></a> ${变量}</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行指令结果作为外部指令输入参数\"><a class=\"markdownIt-Anchor\" href=\"#执行指令结果作为外部指令输入参数\"></a> 执行指令，结果作为外部指令输入参数 $()</h3>\n<h3 id=\"获取变量长度\"><a class=\"markdownIt-Anchor\" href=\"#获取变量长度\"></a> 获取变量长度</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;#PWD&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串截取\"><a class=\"markdownIt-Anchor\" href=\"#字符串截取\"></a> 字符串截取</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$&#123;string:start:length&#125;</code></td>\n<td>从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string:start&#125;</code></td>\n<td>从 string 字符串的左边第 start 个字符开始截取，直到最后。</td>\n</tr>\n<tr>\n<td><code>$&#123;string:0-start:length&#125;</code></td>\n<td>从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string:0-start&#125;</code></td>\n<td>从 string 字符串的右边第 start 个字符开始截取，直到最后。</td>\n</tr>\n<tr>\n<td><code>$&#123;string#*chars&#125;</code></td>\n<td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string##*chars&#125;</code></td>\n<td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string%*chars&#125;</code></td>\n<td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string%%*chars&#125;</code></td>\n<td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"修改\"><a class=\"markdownIt-Anchor\" href=\"#修改\"></a> 修改</h2>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h3>\n<p><code>$&#123;variable#pattern&#125;</code>: 删除开头到第一个<code>pattern</code>的内容</p>\n<p><code>$&#123;variable##pattern&#125;</code>: 删除开头到最后一个<code>pattern</code>的内容</p>\n<p><code>$&#123;variable%pattern&#125;</code>: 从结尾删除最短匹配的<code>pattern</code></p>\n<p><code>$&#123;variable%%pattern&#125;</code>: 从结尾删除最长匹配的<code>pattern</code></p>\n<h4 id=\"实际应用场景\"><a class=\"markdownIt-Anchor\" href=\"#实际应用场景\"></a> 实际应用场景</h4>\n<p>删除文件扩展名</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">filename=&quot;example.tar.gz&quot;</span></span><br><span class=\"line\"><span class=\"string\">name=$&#123;filename%%.*&#125;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">$name</span> <span class=\"comment\"># example</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换\"><a class=\"markdownIt-Anchor\" href=\"#替换\"></a> 替换</h3>\n<p><code>/old_str/new_str</code> 替换第一个</p>\n<p><code>//old_str/new_str</code> 替换最后一个</p>\n<h1 id=\"环境变量\"><a class=\"markdownIt-Anchor\" href=\"#环境变量\"></a> 环境变量</h1>\n<p>export &gt; env</p>\n<h2 id=\"export\"><a class=\"markdownIt-Anchor\" href=\"#export\"></a> export</h2>\n<h2 id=\"env\"><a class=\"markdownIt-Anchor\" href=\"#env\"></a> env</h2>\n<h2 id=\"环境变量配置文件\"><a class=\"markdownIt-Anchor\" href=\"#环境变量配置文件\"></a> 环境变量配置文件</h2>\n<h3 id=\"login-shell\"><a class=\"markdownIt-Anchor\" href=\"#login-shell\"></a> login shell</h3>\n<ol>\n<li>\n<p>/etc/profile：这是系统整体的设置，你最好不要修改这个文件；</p>\n</li>\n<li>\n<p>~/.bash_profile 或 ~/.bash_login 或 ~/.profile：属于使用者个人设置，你要改自己的数据，就写入这里！</p>\n</li>\n</ol>\n<h3 id=\"可执行文件路径\"><a class=\"markdownIt-Anchor\" href=\"#可执行文件路径\"></a> 可执行文件路径</h3>\n<p>将自己创建的可执行文件放置到~/bin/ 目录，就可以直接执行该可执行文件而不需要使用绝对/相对路径来执行该文件</p>\n<h3 id=\"source\"><a class=\"markdownIt-Anchor\" href=\"#source\"></a> source</h3>\n<h3 id=\"non-login-shell\"><a class=\"markdownIt-Anchor\" href=\"#non-login-shell\"></a> non-login shell</h3>\n<p>~/.bashrc 别名通常定义在该文件中</p>\n<h1 id=\"括号\"><a class=\"markdownIt-Anchor\" href=\"#括号\"></a> 括号</h1>\n<h2 id=\"小括号\"><a class=\"markdownIt-Anchor\" href=\"#小括号\"></a> 小括号</h2>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> ()</h3>\n<ol>\n<li>数组赋值</li>\n<li>子shell</li>\n<li>命令集结果重定向</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a&quot;</span>;<span class=\"built_in\">echo</span> <span class=\"string\">&quot;b&quot;</span>;) | awk <span class=\"string\">&#x27;&#123;print NR,$0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\"></a> $()</h3>\n<p>执行命令</p>\n<h3 id=\"执行计算\"><a class=\"markdownIt-Anchor\" href=\"#执行计算\"></a> $(()) 执行计算</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">13</span>%<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>输入两个变量，输出相乘的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;输入两个变量，输出相乘的结果&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;first number:&quot;</span> firstnum</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;second number:&quot;</span> secondnum</span><br><span class=\"line\">total = $((<span class=\"variable\">$&#123;firstnum&#125;</span>*<span class=\"variable\">$&#123;secondnum&#125;</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;total&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"中括号\"><a class=\"markdownIt-Anchor\" href=\"#中括号\"></a> 中括号</h2>\n<h3 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\"></a> []</h3>\n<ol>\n<li><code>[</code>等同于test, <code>]</code>用于关闭条件判断。</li>\n<li>用于正则表达式中，描述一个匹配的字符范围。</li>\n<li>数组编号</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要在 bash 的语法当中使用中括号作为 shell 的判断式，必须要注意中括号的两端需要有空白字符来分隔</span><br><span class=\"line\">中括号内的变量使用`$&#123;var&#125;`格式，最好都以双引号括起来</span><br><span class=\"line\">中括号内的变量会被翻译为原始值再进行比较，若有空格会被翻译为多个值</span><br><span class=\"line\">中括号内的常数，最好都以单或双引号括起来</span><br></pre></td></tr></table></figure>\n<h3 id=\"-4\"><a class=\"markdownIt-Anchor\" href=\"#-4\"></a> [[]]</h3>\n<p>&amp;&amp;、||、&lt;、&gt;操作符可以出现在[[]]结构中</p>\n<h2 id=\"大括号\"><a class=\"markdownIt-Anchor\" href=\"#大括号\"></a> 大括号</h2>\n<h3 id=\"var\"><a class=\"markdownIt-Anchor\" href=\"#var\"></a> ${var}</h3>\n<p>当变量名和后面的内容都是变量命名所允许的内容时候这时候直接用$var是不行的得用{}把变量名括起来</p>\n<h3 id=\"varstr-expr\"><a class=\"markdownIt-Anchor\" href=\"#varstr-expr\"></a> <code>var=$&#123;str-expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置（未定义），则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstr-expr-2\"><a class=\"markdownIt-Anchor\" href=\"#varstr-expr-2\"></a> <code>var=$&#123;str:-expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置或为空字符串，则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr\"></a> <code>var=$&#123;str+expr&#125;</code></h3>\n<p>如果 <code>str</code> 已设置（无论是否为空），则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 为空。</p>\n<h3 id=\"varstrexpr-2\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-2\"></a> <code>var=$&#123;str:+expr&#125;</code></h3>\n<p>如果 <code>str</code> 已设置且不为空，则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 为空。</p>\n<h3 id=\"varstrexpr-3\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-3\"></a> <code>var=$&#123;str=expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置，则 <code>str</code> 的值为 <code>expr</code>，且 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr-4\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-4\"></a> <code>var=$&#123;str:=expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置或为空字符串，则 <code>str</code> 的值为 <code>expr</code>，且 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr-5\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-5\"></a> <code>var=$&#123;str?expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置，则将 <code>expr</code> 输出到标准错误（stderr），并终止脚本；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr-6\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-6\"></a> <code>var=$&#123;str:?expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置或为空字符串，则将 <code>expr</code> 输出到标准错误（stderr），并终止脚本；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h1 id=\"test\"><a class=\"markdownIt-Anchor\" href=\"#test\"></a> test</h1>\n<table>\n<thead>\n<tr>\n<th>文件类型判断</th>\n<th>-e</th>\n<th>文件是否存在</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>-f</td>\n<td>文件是否存在且为普通文件</td>\n</tr>\n<tr>\n<td></td>\n<td>-d</td>\n<td>文件是否存在且为目录</td>\n</tr>\n<tr>\n<td></td>\n<td>-b</td>\n<td>检查文件是否是块设备文件。</td>\n</tr>\n<tr>\n<td></td>\n<td>-c</td>\n<td>检查文件是否是字符设备文件。</td>\n</tr>\n<tr>\n<td></td>\n<td>-S</td>\n<td>检查文件是否是套接字文件。</td>\n</tr>\n<tr>\n<td></td>\n<td>-p</td>\n<td>检查文件是否是命名管道（FIFO）</td>\n</tr>\n<tr>\n<td></td>\n<td>-L</td>\n<td>文件是否存在且为符号链接</td>\n</tr>\n<tr>\n<td>文件的权限侦测</td>\n<td>-r</td>\n<td>文件是否存在且可读</td>\n</tr>\n<tr>\n<td></td>\n<td>-w</td>\n<td>文件是否存在且可写</td>\n</tr>\n<tr>\n<td></td>\n<td>-x</td>\n<td>文件是否存在且可执行</td>\n</tr>\n<tr>\n<td></td>\n<td>-u</td>\n<td>检查文件是否设置了Set User ID（SUID）</td>\n</tr>\n<tr>\n<td></td>\n<td>-g</td>\n<td>检查文件是否设置了Set Group ID（SGID）</td>\n</tr>\n<tr>\n<td></td>\n<td>-k</td>\n<td>检查文件是否设置了粘滞位（Sticky Bit）</td>\n</tr>\n<tr>\n<td></td>\n<td>-s</td>\n<td>文件是否存在且大小大于 0</td>\n</tr>\n<tr>\n<td>两个文件之间的比较</td>\n<td>-nt</td>\n<td>检查文件1是否比文件2更新</td>\n</tr>\n<tr>\n<td></td>\n<td>-ot</td>\n<td>检查文件1是否比文件2更旧</td>\n</tr>\n<tr>\n<td></td>\n<td>-ef</td>\n<td>检查文件1和文件2是否是同一个文件（相同的 inode）判断hard link</td>\n</tr>\n<tr>\n<td>两个整数之间的判定</td>\n<td>-eq</td>\n<td>等于</td>\n</tr>\n<tr>\n<td></td>\n<td>-ne</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td></td>\n<td>-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td></td>\n<td>-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td></td>\n<td>-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td></td>\n<td>-le</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>判定字符串的数据</td>\n<td>-z</td>\n<td>字符串长度是否为 0</td>\n</tr>\n<tr>\n<td></td>\n<td>-n</td>\n<td>字符串长度是否不为 0</td>\n</tr>\n<tr>\n<td></td>\n<td>=</td>\n<td>字符串1 是否等于 字符串2</td>\n</tr>\n<tr>\n<td></td>\n<td>!=</td>\n<td>字符串1 是否不等于 字符串2</td>\n</tr>\n<tr>\n<td>条件组合/逻辑操作</td>\n<td>!</td>\n<td>逻辑非</td>\n</tr>\n<tr>\n<td></td>\n<td>-a</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td></td>\n<td>-o</td>\n<td>逻辑或</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"若目录不存在则创建\"><a class=\"markdownIt-Anchor\" href=\"#若目录不存在则创建\"></a> 若目录不存在则创建</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[! -d <span class=\"string\">&quot;<span class=\"variable\">$basedir</span>&quot;</span>] &amp;&amp; <span class=\"built_in\">mkdir</span> <span class=\"variable\">$basedir</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"判定字符串是否为空\"><a class=\"markdownIt-Anchor\" href=\"#判定字符串是否为空\"></a> 判定字符串是否为空</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"seq\"><a class=\"markdownIt-Anchor\" href=\"#seq\"></a> seq</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq [option] [start] [increment] end</span><br><span class=\"line\">option:</span><br><span class=\"line\">-f 指定格式</span><br><span class=\"line\">-s 指定分隔符</span><br><span class=\"line\">-w 宽度一致，不能与-f一起用</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定数字宽度，不足用空格补足</span></span><br><span class=\"line\"><span class=\"built_in\">seq</span> -f <span class=\"string\">&quot;%3g&quot;</span> 98 101 </span><br><span class=\"line\"><span class=\"comment\"># 指定数字宽度，不足用0补足</span></span><br><span class=\"line\"><span class=\"built_in\">seq</span> -f <span class=\"string\">&quot;%03g&quot;</span> 98 101 </span><br><span class=\"line\"><span class=\"built_in\">seq</span> -s <span class=\"string\">&quot;:::&quot;</span> -f <span class=\"string\">&quot;%03g&quot;</span> 98 101</span><br></pre></td></tr></table></figure>\n<h1 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> *.sql;</span><br><span class=\"line\"><span class=\"keyword\">do</span> mysql -h localhost -uroot -p park &lt; <span class=\"variable\">$file</span>;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find <span class=\"variable\">$PWD</span> -<span class=\"built_in\">type</span> f | (<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> args;<span class=\"keyword\">do</span> (<span class=\"built_in\">md5sum</span> <span class=\"variable\">$args</span>);<span class=\"keyword\">done</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"脚本调用\"><a class=\"markdownIt-Anchor\" href=\"#脚本调用\"></a> 脚本调用</h1>\n<p>在运行shell脚本时候，有三个命令来实现调用外部脚本：exec、source、fork</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>产生新进程</th>\n<th>继承环境变量</th>\n<th>是否保留环境变量和声明变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>exec</td>\n<td>√</td>\n<td>√</td>\n<td>不保留（原主shell剩下的内容不会执行）</td>\n</tr>\n<tr>\n<td>source</td>\n<td>×</td>\n<td>√</td>\n<td>保留</td>\n</tr>\n<tr>\n<td>fork</td>\n<td>√</td>\n<td>√</td>\n<td>保留</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"exec\"><a class=\"markdownIt-Anchor\" href=\"#exec\"></a> exec</h2>\n<p>使用exec来调用脚本，被执行的脚本会继承当前shell的环境变量。exec产生了新的进程，会把主shell的进程资源占用并替换脚本内容，继承原主shell的PID号，原主shell剩下的内容不会执行。</p>\n<h2 id=\"source-2\"><a class=\"markdownIt-Anchor\" href=\"#source-2\"></a> source</h2>\n<p>使用source调用外部脚本，不会产生新的进程，继承当前shell环境变量，而且被调用的脚本运行结束后，它拥有的环境变量和声明变量会被当前shell保留，类似将调用脚本的内容复制过来直接执行。执行完毕后原主shell继续运行。</p>\n<h2 id=\"fork\"><a class=\"markdownIt-Anchor\" href=\"#fork\"></a> fork</h2>\n<p>直接运行脚本，会以当前shell为父进程，产生新的进程，并且继承主脚本的环境变量和声明变量。执行完毕后，主脚本不会保留其环境变量和声明变量。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>这样来看fork最灵活，source次之，exec最诡异。</p>\n","excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>在 Linux Shell 中，变量、条件判断、循环等概念与编程语言中的语法非常相似。Shell 脚本作为一种强大的自动化工具，不仅能够执行系统命令，还可以通过变量、条件判断和循环等编程结构实现复杂的逻辑控制。本文将详细介绍 Linux Shell 中的这些核心概念，帮助你更好地理解和编写高效的 Shell 脚本。</p>\n<ol>\n<li>在 Shell 中，指令的下达和编辑是日常操作的基础。通过组合键，你可以快速编辑命令行，提高工作效率。</li>\n<li>变量是 Shell 脚本中的重要组成部分，用于存储和操作数据。Shell 提供了多种变量设置方式，灵活应对不同的场景。</li>\n<li>环境变量是系统或用户定义的变量，用于配置 Shell 的行为和运行环境。通过 export 命令，可以将变量设置为环境变量，使其在子进程中可用。</li>\n<li><code>test</code> 指令用于条件判断，支持文件测试、字符串比较、数值比较等多种操作，帮助你在脚本中实现复杂的逻辑控制。</li>\n<li>Shell 中的括号有多种用途，包括数组赋值、子 Shell 执行、命令替换和算术运算等。理解括号的不同用法可以让你更灵活地编写脚本。</li>\n<li><code>seq</code> 命令用于生成数字序列，支持指定格式、分隔符和宽度等选项，适用于批量生成数字或文件名。</li>\n<li>循环结构允许你重复执行一系列命令，适用于批量处理文件和自动化任务。</li>\n</ol>\n<p>通过掌握这些核心概念，你将能够编写出功能强大且高效的 Shell 脚本，提升系统管理和自动化任务的效率。</p>\n<h1 id=\"指令下达与快速编辑按钮\"><a class=\"markdownIt-Anchor\" href=\"#指令下达与快速编辑按钮\"></a> 指令下达与快速编辑按钮</h1>\n<h2 id=\"指令下达enter\"><a class=\"markdownIt-Anchor\" href=\"#指令下达enter\"></a> 指令下达[Enter]</h2>\n<h2 id=\"快速编辑\"><a class=\"markdownIt-Anchor\" href=\"#快速编辑\"></a> 快速编辑</h2>\n<table>\n<thead>\n<tr>\n<th>组合键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + u</td>\n<td>向前删除指令串</td>\n</tr>\n<tr>\n<td>ctrl + k</td>\n<td>向后删除指令串</td>\n</tr>\n<tr>\n<td>ctrl + a</td>\n<td>移动到整个指令串最前面</td>\n</tr>\n<tr>\n<td>ctrl + e</td>\n<td>移动到整个指令串最后面</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h1>\n<h2 id=\"设置普通变量\"><a class=\"markdownIt-Anchor\" href=\"#设置普通变量\"></a> 设置普通变量</h2>\n<table>\n<thead>\n<tr>\n<th>变量设置方式</th>\n<th>str 没有设置</th>\n<th>str 为空字串</th>\n<th>str 已设置为非空字串</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>var=$&#123;str-expr&#125;</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=</code></td>\n<td><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:-expr&#125;</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str+expr&#125;</code></td>\n<td><code>var=</code></td>\n<td><code>var=expr</code></td>\n<td><code>var=expr</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:+expr&#125;</code></td>\n<td><code>var=</code></td>\n<td><code>var=</code></td>\n<td><code>var=expr</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str=expr&#125;</code></td>\n<td><code>str=expr</code><br/><code>var=expr</code></td>\n<td><code>str</code> 不变<br/><code>var=</code></td>\n<td><code>str</code> 不变<br/><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:=expr&#125;</code></td>\n<td><code>str=expr</code><br/><code>var=expr</code></td>\n<td><code>str=expr</code><br/><code>var=expr</code></td>\n<td><code>str</code> 不变<br/><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str?expr&#125;</code></td>\n<td><code>expr</code> 输出至 <code>stderr</code></td>\n<td><code>var=</code></td>\n<td><code>var=$str</code></td>\n</tr>\n<tr>\n<td><code>var=$&#123;str:?expr&#125;</code></td>\n<td><code>expr</code> 输出至 <code>stderr</code></td>\n<td><code>expr</code> 输出至 <code>stderr</code></td>\n<td><code>var=$str</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">等号两边不能直接接空白字符</span><br><span class=\"line\">变量内容若用空白字符可使用双引号或单引号，或者使用转移字符</span><br><span class=\"line\">双引号内的特殊字符可保持原本的特性</span><br><span class=\"line\">单引号内的特殊字符仅为一般文本</span><br><span class=\"line\">在一串指令的执行中，还需借由其它额外的指令所提供的信息是可使用反单引号或$()</span><br><span class=\"line\">-若变量未被设置，则使用默认值，若已设置，则使用原值</span><br><span class=\"line\">+若变量未被设置，则使用原值（未被设置），若已设置，则使用默认值</span><br><span class=\"line\">:变量为空字符串时，规则同变量未被设置</span><br></pre></td></tr></table></figure>\n<h2 id=\"export设置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#export设置环境变量\"></a> export设置环境变量</h2>\n<p>若变量需要在其他子程序执行，则需要以export来使变量变成环境变量</p>\n<h2 id=\"取消设置-unset\"><a class=\"markdownIt-Anchor\" href=\"#取消设置-unset\"></a> 取消设置 unset</h2>\n<h2 id=\"取用\"><a class=\"markdownIt-Anchor\" href=\"#取用\"></a> 取用</h2>\n<h3 id=\"变量-2\"><a class=\"markdownIt-Anchor\" href=\"#变量-2\"></a> $变量</h3>\n<h3 id=\"变量-3\"><a class=\"markdownIt-Anchor\" href=\"#变量-3\"></a> ${变量}</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行指令结果作为外部指令输入参数\"><a class=\"markdownIt-Anchor\" href=\"#执行指令结果作为外部指令输入参数\"></a> 执行指令，结果作为外部指令输入参数 $()</h3>\n<h3 id=\"获取变量长度\"><a class=\"markdownIt-Anchor\" href=\"#获取变量长度\"></a> 获取变量长度</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $&#123;#PWD&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串截取\"><a class=\"markdownIt-Anchor\" href=\"#字符串截取\"></a> 字符串截取</h3>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$&#123;string:start:length&#125;</code></td>\n<td>从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string:start&#125;</code></td>\n<td>从 string 字符串的左边第 start 个字符开始截取，直到最后。</td>\n</tr>\n<tr>\n<td><code>$&#123;string:0-start:length&#125;</code></td>\n<td>从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string:0-start&#125;</code></td>\n<td>从 string 字符串的右边第 start 个字符开始截取，直到最后。</td>\n</tr>\n<tr>\n<td><code>$&#123;string#*chars&#125;</code></td>\n<td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string##*chars&#125;</code></td>\n<td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string%*chars&#125;</code></td>\n<td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。</td>\n</tr>\n<tr>\n<td><code>$&#123;string%%*chars&#125;</code></td>\n<td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"修改\"><a class=\"markdownIt-Anchor\" href=\"#修改\"></a> 修改</h2>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h3>\n<p><code>$&#123;variable#pattern&#125;</code>: 删除开头到第一个<code>pattern</code>的内容</p>\n<p><code>$&#123;variable##pattern&#125;</code>: 删除开头到最后一个<code>pattern</code>的内容</p>\n<p><code>$&#123;variable%pattern&#125;</code>: 从结尾删除最短匹配的<code>pattern</code></p>\n<p><code>$&#123;variable%%pattern&#125;</code>: 从结尾删除最长匹配的<code>pattern</code></p>\n<h4 id=\"实际应用场景\"><a class=\"markdownIt-Anchor\" href=\"#实际应用场景\"></a> 实际应用场景</h4>\n<p>删除文件扩展名</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">filename=&quot;example.tar.gz&quot;</span></span><br><span class=\"line\"><span class=\"string\">name=$&#123;filename%%.*&#125;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">$name</span> <span class=\"comment\"># example</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"替换\"><a class=\"markdownIt-Anchor\" href=\"#替换\"></a> 替换</h3>\n<p><code>/old_str/new_str</code> 替换第一个</p>\n<p><code>//old_str/new_str</code> 替换最后一个</p>\n<h1 id=\"环境变量\"><a class=\"markdownIt-Anchor\" href=\"#环境变量\"></a> 环境变量</h1>\n<p>export &gt; env</p>\n<h2 id=\"export\"><a class=\"markdownIt-Anchor\" href=\"#export\"></a> export</h2>\n<h2 id=\"env\"><a class=\"markdownIt-Anchor\" href=\"#env\"></a> env</h2>\n<h2 id=\"环境变量配置文件\"><a class=\"markdownIt-Anchor\" href=\"#环境变量配置文件\"></a> 环境变量配置文件</h2>\n<h3 id=\"login-shell\"><a class=\"markdownIt-Anchor\" href=\"#login-shell\"></a> login shell</h3>\n<ol>\n<li>\n<p>/etc/profile：这是系统整体的设置，你最好不要修改这个文件；</p>\n</li>\n<li>\n<p>~/.bash_profile 或 ~/.bash_login 或 ~/.profile：属于使用者个人设置，你要改自己的数据，就写入这里！</p>\n</li>\n</ol>\n<h3 id=\"可执行文件路径\"><a class=\"markdownIt-Anchor\" href=\"#可执行文件路径\"></a> 可执行文件路径</h3>\n<p>将自己创建的可执行文件放置到~/bin/ 目录，就可以直接执行该可执行文件而不需要使用绝对/相对路径来执行该文件</p>\n<h3 id=\"source\"><a class=\"markdownIt-Anchor\" href=\"#source\"></a> source</h3>\n<h3 id=\"non-login-shell\"><a class=\"markdownIt-Anchor\" href=\"#non-login-shell\"></a> non-login shell</h3>\n<p>~/.bashrc 别名通常定义在该文件中</p>\n<h1 id=\"括号\"><a class=\"markdownIt-Anchor\" href=\"#括号\"></a> 括号</h1>\n<h2 id=\"小括号\"><a class=\"markdownIt-Anchor\" href=\"#小括号\"></a> 小括号</h2>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> ()</h3>\n<ol>\n<li>数组赋值</li>\n<li>子shell</li>\n<li>命令集结果重定向</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a&quot;</span>;<span class=\"built_in\">echo</span> <span class=\"string\">&quot;b&quot;</span>;) | awk <span class=\"string\">&#x27;&#123;print NR,$0&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\"></a> $()</h3>\n<p>执行命令</p>\n<h3 id=\"执行计算\"><a class=\"markdownIt-Anchor\" href=\"#执行计算\"></a> $(()) 执行计算</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"number\">13</span>%<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>输入两个变量，输出相乘的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;输入两个变量，输出相乘的结果&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;first number:&quot;</span> firstnum</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">&quot;second number:&quot;</span> secondnum</span><br><span class=\"line\">total = $((<span class=\"variable\">$&#123;firstnum&#125;</span>*<span class=\"variable\">$&#123;secondnum&#125;</span>))</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;<span class=\"variable\">$&#123;total&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"中括号\"><a class=\"markdownIt-Anchor\" href=\"#中括号\"></a> 中括号</h2>\n<h3 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\"></a> []</h3>\n<ol>\n<li><code>[</code>等同于test, <code>]</code>用于关闭条件判断。</li>\n<li>用于正则表达式中，描述一个匹配的字符范围。</li>\n<li>数组编号</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要在 bash 的语法当中使用中括号作为 shell 的判断式，必须要注意中括号的两端需要有空白字符来分隔</span><br><span class=\"line\">中括号内的变量使用`$&#123;var&#125;`格式，最好都以双引号括起来</span><br><span class=\"line\">中括号内的变量会被翻译为原始值再进行比较，若有空格会被翻译为多个值</span><br><span class=\"line\">中括号内的常数，最好都以单或双引号括起来</span><br></pre></td></tr></table></figure>\n<h3 id=\"-4\"><a class=\"markdownIt-Anchor\" href=\"#-4\"></a> [[]]</h3>\n<p>&amp;&amp;、||、&lt;、&gt;操作符可以出现在[[]]结构中</p>\n<h2 id=\"大括号\"><a class=\"markdownIt-Anchor\" href=\"#大括号\"></a> 大括号</h2>\n<h3 id=\"var\"><a class=\"markdownIt-Anchor\" href=\"#var\"></a> ${var}</h3>\n<p>当变量名和后面的内容都是变量命名所允许的内容时候这时候直接用$var是不行的得用{}把变量名括起来</p>\n<h3 id=\"varstr-expr\"><a class=\"markdownIt-Anchor\" href=\"#varstr-expr\"></a> <code>var=$&#123;str-expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置（未定义），则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstr-expr-2\"><a class=\"markdownIt-Anchor\" href=\"#varstr-expr-2\"></a> <code>var=$&#123;str:-expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置或为空字符串，则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr\"></a> <code>var=$&#123;str+expr&#125;</code></h3>\n<p>如果 <code>str</code> 已设置（无论是否为空），则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 为空。</p>\n<h3 id=\"varstrexpr-2\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-2\"></a> <code>var=$&#123;str:+expr&#125;</code></h3>\n<p>如果 <code>str</code> 已设置且不为空，则 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 为空。</p>\n<h3 id=\"varstrexpr-3\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-3\"></a> <code>var=$&#123;str=expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置，则 <code>str</code> 的值为 <code>expr</code>，且 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr-4\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-4\"></a> <code>var=$&#123;str:=expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置或为空字符串，则 <code>str</code> 的值为 <code>expr</code>，且 <code>var</code> 的值为 <code>expr</code>；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr-5\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-5\"></a> <code>var=$&#123;str?expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置，则将 <code>expr</code> 输出到标准错误（stderr），并终止脚本；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h3 id=\"varstrexpr-6\"><a class=\"markdownIt-Anchor\" href=\"#varstrexpr-6\"></a> <code>var=$&#123;str:?expr&#125;</code></h3>\n<p>如果 <code>str</code> 未设置或为空字符串，则将 <code>expr</code> 输出到标准错误（stderr），并终止脚本；否则，<code>var</code> 的值为 <code>str</code> 的值。</p>\n<h1 id=\"test\"><a class=\"markdownIt-Anchor\" href=\"#test\"></a> test</h1>\n<table>\n<thead>\n<tr>\n<th>文件类型判断</th>\n<th>-e</th>\n<th>文件是否存在</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>-f</td>\n<td>文件是否存在且为普通文件</td>\n</tr>\n<tr>\n<td></td>\n<td>-d</td>\n<td>文件是否存在且为目录</td>\n</tr>\n<tr>\n<td></td>\n<td>-b</td>\n<td>检查文件是否是块设备文件。</td>\n</tr>\n<tr>\n<td></td>\n<td>-c</td>\n<td>检查文件是否是字符设备文件。</td>\n</tr>\n<tr>\n<td></td>\n<td>-S</td>\n<td>检查文件是否是套接字文件。</td>\n</tr>\n<tr>\n<td></td>\n<td>-p</td>\n<td>检查文件是否是命名管道（FIFO）</td>\n</tr>\n<tr>\n<td></td>\n<td>-L</td>\n<td>文件是否存在且为符号链接</td>\n</tr>\n<tr>\n<td>文件的权限侦测</td>\n<td>-r</td>\n<td>文件是否存在且可读</td>\n</tr>\n<tr>\n<td></td>\n<td>-w</td>\n<td>文件是否存在且可写</td>\n</tr>\n<tr>\n<td></td>\n<td>-x</td>\n<td>文件是否存在且可执行</td>\n</tr>\n<tr>\n<td></td>\n<td>-u</td>\n<td>检查文件是否设置了Set User ID（SUID）</td>\n</tr>\n<tr>\n<td></td>\n<td>-g</td>\n<td>检查文件是否设置了Set Group ID（SGID）</td>\n</tr>\n<tr>\n<td></td>\n<td>-k</td>\n<td>检查文件是否设置了粘滞位（Sticky Bit）</td>\n</tr>\n<tr>\n<td></td>\n<td>-s</td>\n<td>文件是否存在且大小大于 0</td>\n</tr>\n<tr>\n<td>两个文件之间的比较</td>\n<td>-nt</td>\n<td>检查文件1是否比文件2更新</td>\n</tr>\n<tr>\n<td></td>\n<td>-ot</td>\n<td>检查文件1是否比文件2更旧</td>\n</tr>\n<tr>\n<td></td>\n<td>-ef</td>\n<td>检查文件1和文件2是否是同一个文件（相同的 inode）判断hard link</td>\n</tr>\n<tr>\n<td>两个整数之间的判定</td>\n<td>-eq</td>\n<td>等于</td>\n</tr>\n<tr>\n<td></td>\n<td>-ne</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td></td>\n<td>-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td></td>\n<td>-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td></td>\n<td>-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td></td>\n<td>-le</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>判定字符串的数据</td>\n<td>-z</td>\n<td>字符串长度是否为 0</td>\n</tr>\n<tr>\n<td></td>\n<td>-n</td>\n<td>字符串长度是否不为 0</td>\n</tr>\n<tr>\n<td></td>\n<td>=</td>\n<td>字符串1 是否等于 字符串2</td>\n</tr>\n<tr>\n<td></td>\n<td>!=</td>\n<td>字符串1 是否不等于 字符串2</td>\n</tr>\n<tr>\n<td>条件组合/逻辑操作</td>\n<td>!</td>\n<td>逻辑非</td>\n</tr>\n<tr>\n<td></td>\n<td>-a</td>\n<td>逻辑与</td>\n</tr>\n<tr>\n<td></td>\n<td>-o</td>\n<td>逻辑或</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"若目录不存在则创建\"><a class=\"markdownIt-Anchor\" href=\"#若目录不存在则创建\"></a> 若目录不存在则创建</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[! -d <span class=\"string\">&quot;<span class=\"variable\">$basedir</span>&quot;</span>] &amp;&amp; <span class=\"built_in\">mkdir</span> <span class=\"variable\">$basedir</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"判定字符串是否为空\"><a class=\"markdownIt-Anchor\" href=\"#判定字符串是否为空\"></a> 判定字符串是否为空</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"seq\"><a class=\"markdownIt-Anchor\" href=\"#seq\"></a> seq</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq [option] [start] [increment] end</span><br><span class=\"line\">option:</span><br><span class=\"line\">-f 指定格式</span><br><span class=\"line\">-s 指定分隔符</span><br><span class=\"line\">-w 宽度一致，不能与-f一起用</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定数字宽度，不足用空格补足</span></span><br><span class=\"line\"><span class=\"built_in\">seq</span> -f <span class=\"string\">&quot;%3g&quot;</span> 98 101 </span><br><span class=\"line\"><span class=\"comment\"># 指定数字宽度，不足用0补足</span></span><br><span class=\"line\"><span class=\"built_in\">seq</span> -f <span class=\"string\">&quot;%03g&quot;</span> 98 101 </span><br><span class=\"line\"><span class=\"built_in\">seq</span> -s <span class=\"string\">&quot;:::&quot;</span> -f <span class=\"string\">&quot;%03g&quot;</span> 98 101</span><br></pre></td></tr></table></figure>\n<h1 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> *.sql;</span><br><span class=\"line\"><span class=\"keyword\">do</span> mysql -h localhost -uroot -p park &lt; <span class=\"variable\">$file</span>;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find <span class=\"variable\">$PWD</span> -<span class=\"built_in\">type</span> f | (<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> args;<span class=\"keyword\">do</span> (<span class=\"built_in\">md5sum</span> <span class=\"variable\">$args</span>);<span class=\"keyword\">done</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"脚本调用\"><a class=\"markdownIt-Anchor\" href=\"#脚本调用\"></a> 脚本调用</h1>\n<p>在运行shell脚本时候，有三个命令来实现调用外部脚本：exec、source、fork</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>产生新进程</th>\n<th>继承环境变量</th>\n<th>是否保留环境变量和声明变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>exec</td>\n<td>√</td>\n<td>√</td>\n<td>不保留（原主shell剩下的内容不会执行）</td>\n</tr>\n<tr>\n<td>source</td>\n<td>×</td>\n<td>√</td>\n<td>保留</td>\n</tr>\n<tr>\n<td>fork</td>\n<td>√</td>\n<td>√</td>\n<td>保留</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"exec\"><a class=\"markdownIt-Anchor\" href=\"#exec\"></a> exec</h2>\n<p>使用exec来调用脚本，被执行的脚本会继承当前shell的环境变量。exec产生了新的进程，会把主shell的进程资源占用并替换脚本内容，继承原主shell的PID号，原主shell剩下的内容不会执行。</p>\n<h2 id=\"source-2\"><a class=\"markdownIt-Anchor\" href=\"#source-2\"></a> source</h2>\n<p>使用source调用外部脚本，不会产生新的进程，继承当前shell环境变量，而且被调用的脚本运行结束后，它拥有的环境变量和声明变量会被当前shell保留，类似将调用脚本的内容复制过来直接执行。执行完毕后原主shell继续运行。</p>\n<h2 id=\"fork\"><a class=\"markdownIt-Anchor\" href=\"#fork\"></a> fork</h2>\n<p>直接运行脚本，会以当前shell为父进程，产生新的进程，并且继承主脚本的环境变量和声明变量。执行完毕后，主脚本不会保留其环境变量和声明变量。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>这样来看fork最灵活，source次之，exec最诡异。</p>\n"},{"title":"【Hexo】Next主题个性化配置","date":"2025-03-06T01:09:50.000Z","_content":"\n# 修改菜单\n修改左侧导航栏，包括关于、标签、分类、归档、日历、站点地图等。默认只有主页，其他页面需要自己添加，包括修改配置文件，添加页面，设置页面类型。\n## 修改菜单主题里配置\n1. 修改主题配置文件`themes/_config.yml`，放开关于、标签及分类设置\n   如果是通过npm安装的主题，主题配置文件路径为`node_modules/hexo-theme-next/_config.yml`，将路径下的配置文件复制到项目主题目录下\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  #archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n## 设置about页面\ntodo: about页面创建后没有展示\n1. 创建about页面\n```\nhexo new page about\n```\n2. 编辑页面，添加上`type: \"about\"`，让主题识别页面为about页面\n3. 编辑页面内容，添加关于自己的内容\n\n\n## 设置分类\n1. 创建分类页\n```\nhexo new page categories\n```\n2. 编辑页面，添加上`type: \"categories\"`，让主题识别页面为分类页面\n3. 给文章设置分类属性，支持多级分类\n```\n---\ncategories: \n- 一级分类\n- 二级分类\n---\n```\n\n## 设置标签\n1. 创建标签页\n```\nhexo new page tags\n```\n2. 编辑页面，添加上`type: \"tags\"`，让主题识别页面为标签页面\n3. 给文章设置标签属性，支持多个标签\n\n# 切换风格\nNext主题提供了四种不同的风格（Scheme），在主题配置文件/themes/_config.yml中查找：scheme，修改scheme属性即可切换样式：\n```\n# Schemes\n#scheme: Muse # 经典侧边栏布局，适合文字内容为主的博客。\nscheme: Mist # 简洁现代风格，适合轻量级博客。\n#scheme: Pisces # 双栏布局，功能丰富，适合多功能博客。\n#scheme: Gemini # 杂志风格，适合多媒体内容展示。\n```\n\n# 本地搜索\n1. 安装插件`hexo-generator-searchdb`，执行以下命令:\n```\nnpm install hexo-generator-searchdb --save\n```\n2. 修改hexo/_config.yml站点配置文件，新增以下内容到任意位置：\n``` \nsearch:\n   path: search.xml # 搜索后生成的文件路径，可以生成xml和json两种格式\n   field: post # 搜索的字段，可以是post、page、all\n   #content: true # 是否包含搜索到的文章的全部内容。默认情况下是true\n   #format: html # 搜索到的内容、选项的格式。可以是html、striptags、raw，默认情况下是html\n   limit: 10000\n   template: themes/search.xml # 搜索结果的模板文件路径\n```\n3. 编辑主题配置文件，启用本地搜索功能：\n```\n# Local search\nlocal_search:\nenable: true\n```\n4. 根目录记得创建一个search.xml\n很多教程都没有提到这一步，可能是因为通过git clone安装的主题，根目录已经有了search.xml文件，所以不需要再创建。\n如果是通过npm安装的主题，需要在主题目录下创建search.xml文件，否则搜索功能将无法使用。\n这个文件可以去 https://github.com/wzpan/hexo-generator-search 下载，也可以在刚刚安装的依赖包中找到，地址为`node_modules/hexo-generator-search/demo_output/search.xml`。\n\n\n\n# TODO\n- 浏览页面显示当前浏览进度\n- 文章分享功能\n- 文章加密访问\n- 增加文章字数统计及阅读时常功能\n- 文章置顶功能\n- 评论功能","source":"_posts/Next主题个性化配置.md","raw":"---\ntitle: 【Hexo】Next主题个性化配置\ndate: 2025-03-06 09:09:50\ntags:\n- Hexo教程\n- Next主题\n\ncategories:\n- Hexo教程\n- Next主题\n---\n\n# 修改菜单\n修改左侧导航栏，包括关于、标签、分类、归档、日历、站点地图等。默认只有主页，其他页面需要自己添加，包括修改配置文件，添加页面，设置页面类型。\n## 修改菜单主题里配置\n1. 修改主题配置文件`themes/_config.yml`，放开关于、标签及分类设置\n   如果是通过npm安装的主题，主题配置文件路径为`node_modules/hexo-theme-next/_config.yml`，将路径下的配置文件复制到项目主题目录下\n```\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  #archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n## 设置about页面\ntodo: about页面创建后没有展示\n1. 创建about页面\n```\nhexo new page about\n```\n2. 编辑页面，添加上`type: \"about\"`，让主题识别页面为about页面\n3. 编辑页面内容，添加关于自己的内容\n\n\n## 设置分类\n1. 创建分类页\n```\nhexo new page categories\n```\n2. 编辑页面，添加上`type: \"categories\"`，让主题识别页面为分类页面\n3. 给文章设置分类属性，支持多级分类\n```\n---\ncategories: \n- 一级分类\n- 二级分类\n---\n```\n\n## 设置标签\n1. 创建标签页\n```\nhexo new page tags\n```\n2. 编辑页面，添加上`type: \"tags\"`，让主题识别页面为标签页面\n3. 给文章设置标签属性，支持多个标签\n\n# 切换风格\nNext主题提供了四种不同的风格（Scheme），在主题配置文件/themes/_config.yml中查找：scheme，修改scheme属性即可切换样式：\n```\n# Schemes\n#scheme: Muse # 经典侧边栏布局，适合文字内容为主的博客。\nscheme: Mist # 简洁现代风格，适合轻量级博客。\n#scheme: Pisces # 双栏布局，功能丰富，适合多功能博客。\n#scheme: Gemini # 杂志风格，适合多媒体内容展示。\n```\n\n# 本地搜索\n1. 安装插件`hexo-generator-searchdb`，执行以下命令:\n```\nnpm install hexo-generator-searchdb --save\n```\n2. 修改hexo/_config.yml站点配置文件，新增以下内容到任意位置：\n``` \nsearch:\n   path: search.xml # 搜索后生成的文件路径，可以生成xml和json两种格式\n   field: post # 搜索的字段，可以是post、page、all\n   #content: true # 是否包含搜索到的文章的全部内容。默认情况下是true\n   #format: html # 搜索到的内容、选项的格式。可以是html、striptags、raw，默认情况下是html\n   limit: 10000\n   template: themes/search.xml # 搜索结果的模板文件路径\n```\n3. 编辑主题配置文件，启用本地搜索功能：\n```\n# Local search\nlocal_search:\nenable: true\n```\n4. 根目录记得创建一个search.xml\n很多教程都没有提到这一步，可能是因为通过git clone安装的主题，根目录已经有了search.xml文件，所以不需要再创建。\n如果是通过npm安装的主题，需要在主题目录下创建search.xml文件，否则搜索功能将无法使用。\n这个文件可以去 https://github.com/wzpan/hexo-generator-search 下载，也可以在刚刚安装的依赖包中找到，地址为`node_modules/hexo-generator-search/demo_output/search.xml`。\n\n\n\n# TODO\n- 浏览页面显示当前浏览进度\n- 文章分享功能\n- 文章加密访问\n- 增加文章字数统计及阅读时常功能\n- 文章置顶功能\n- 评论功能","slug":"Next主题个性化配置","published":1,"updated":"2025-03-06T09:03:34.223Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16h000j64v45cqr303f","content":"<h1 id=\"修改菜单\"><a class=\"markdownIt-Anchor\" href=\"#修改菜单\"></a> 修改菜单</h1>\n<p>修改左侧导航栏，包括关于、标签、分类、归档、日历、站点地图等。默认只有主页，其他页面需要自己添加，包括修改配置文件，添加页面，设置页面类型。</p>\n<h2 id=\"修改菜单主题里配置\"><a class=\"markdownIt-Anchor\" href=\"#修改菜单主题里配置\"></a> 修改菜单主题里配置</h2>\n<ol>\n<li>修改主题配置文件<code>themes/_config.yml</code>，放开关于、标签及分类设置<br />\n如果是通过npm安装的主题，主题配置文件路径为<code>node_modules/hexo-theme-next/_config.yml</code>，将路径下的配置文件复制到项目主题目录下</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || fa fa-home</span><br><span class=\"line\">  about: /about/ || fa fa-user</span><br><span class=\"line\">  tags: /tags/ || fa fa-tags</span><br><span class=\"line\">  categories: /categories/ || fa fa-th</span><br><span class=\"line\">  #archives: /archives/ || fa fa-archive</span><br><span class=\"line\">  #schedule: /schedule/ || fa fa-calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置about页面\"><a class=\"markdownIt-Anchor\" href=\"#设置about页面\"></a> 设置about页面</h2>\n<p>todo: about页面创建后没有展示</p>\n<ol>\n<li>创建about页面</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑页面，添加上<code>type: &quot;about&quot;</code>，让主题识别页面为about页面</li>\n<li>编辑页面内容，添加关于自己的内容</li>\n</ol>\n<h2 id=\"设置分类\"><a class=\"markdownIt-Anchor\" href=\"#设置分类\"></a> 设置分类</h2>\n<ol>\n<li>创建分类页</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑页面，添加上<code>type: &quot;categories&quot;</code>，让主题识别页面为分类页面</li>\n<li>给文章设置分类属性，支持多级分类</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- 一级分类</span><br><span class=\"line\">- 二级分类</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置标签\"><a class=\"markdownIt-Anchor\" href=\"#设置标签\"></a> 设置标签</h2>\n<ol>\n<li>创建标签页</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑页面，添加上<code>type: &quot;tags&quot;</code>，让主题识别页面为标签页面</li>\n<li>给文章设置标签属性，支持多个标签</li>\n</ol>\n<h1 id=\"切换风格\"><a class=\"markdownIt-Anchor\" href=\"#切换风格\"></a> 切换风格</h1>\n<p>Next主题提供了四种不同的风格（Scheme），在主题配置文件/themes/_config.yml中查找：scheme，修改scheme属性即可切换样式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse # 经典侧边栏布局，适合文字内容为主的博客。</span><br><span class=\"line\">scheme: Mist # 简洁现代风格，适合轻量级博客。</span><br><span class=\"line\">#scheme: Pisces # 双栏布局，功能丰富，适合多功能博客。</span><br><span class=\"line\">#scheme: Gemini # 杂志风格，适合多媒体内容展示。</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地搜索\"><a class=\"markdownIt-Anchor\" href=\"#本地搜索\"></a> 本地搜索</h1>\n<ol>\n<li>安装插件<code>hexo-generator-searchdb</code>，执行以下命令:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改hexo/_config.yml站点配置文件，新增以下内容到任意位置：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">   path: search.xml # 搜索后生成的文件路径，可以生成xml和json两种格式</span><br><span class=\"line\">   field: post # 搜索的字段，可以是post、page、all</span><br><span class=\"line\">   #content: true # 是否包含搜索到的文章的全部内容。默认情况下是true</span><br><span class=\"line\">   #format: html # 搜索到的内容、选项的格式。可以是html、striptags、raw，默认情况下是html</span><br><span class=\"line\">   limit: 10000</span><br><span class=\"line\">   template: themes/search.xml # 搜索结果的模板文件路径</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编辑主题配置文件，启用本地搜索功能：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">enable: true</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>根目录记得创建一个search.xml<br />\n很多教程都没有提到这一步，可能是因为通过git clone安装的主题，根目录已经有了search.xml文件，所以不需要再创建。<br />\n如果是通过npm安装的主题，需要在主题目录下创建search.xml文件，否则搜索功能将无法使用。<br />\n这个文件可以去 <a href=\"https://github.com/wzpan/hexo-generator-search\">https://github.com/wzpan/hexo-generator-search</a> 下载，也可以在刚刚安装的依赖包中找到，地址为<code>node_modules/hexo-generator-search/demo_output/search.xml</code>。</li>\n</ol>\n<h1 id=\"todo\"><a class=\"markdownIt-Anchor\" href=\"#todo\"></a> TODO</h1>\n<ul>\n<li>浏览页面显示当前浏览进度</li>\n<li>文章分享功能</li>\n<li>文章加密访问</li>\n<li>增加文章字数统计及阅读时常功能</li>\n<li>文章置顶功能</li>\n<li>评论功能</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"修改菜单\"><a class=\"markdownIt-Anchor\" href=\"#修改菜单\"></a> 修改菜单</h1>\n<p>修改左侧导航栏，包括关于、标签、分类、归档、日历、站点地图等。默认只有主页，其他页面需要自己添加，包括修改配置文件，添加页面，设置页面类型。</p>\n<h2 id=\"修改菜单主题里配置\"><a class=\"markdownIt-Anchor\" href=\"#修改菜单主题里配置\"></a> 修改菜单主题里配置</h2>\n<ol>\n<li>修改主题配置文件<code>themes/_config.yml</code>，放开关于、标签及分类设置<br />\n如果是通过npm安装的主题，主题配置文件路径为<code>node_modules/hexo-theme-next/_config.yml</code>，将路径下的配置文件复制到项目主题目录下</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || fa fa-home</span><br><span class=\"line\">  about: /about/ || fa fa-user</span><br><span class=\"line\">  tags: /tags/ || fa fa-tags</span><br><span class=\"line\">  categories: /categories/ || fa fa-th</span><br><span class=\"line\">  #archives: /archives/ || fa fa-archive</span><br><span class=\"line\">  #schedule: /schedule/ || fa fa-calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置about页面\"><a class=\"markdownIt-Anchor\" href=\"#设置about页面\"></a> 设置about页面</h2>\n<p>todo: about页面创建后没有展示</p>\n<ol>\n<li>创建about页面</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑页面，添加上<code>type: &quot;about&quot;</code>，让主题识别页面为about页面</li>\n<li>编辑页面内容，添加关于自己的内容</li>\n</ol>\n<h2 id=\"设置分类\"><a class=\"markdownIt-Anchor\" href=\"#设置分类\"></a> 设置分类</h2>\n<ol>\n<li>创建分类页</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑页面，添加上<code>type: &quot;categories&quot;</code>，让主题识别页面为分类页面</li>\n<li>给文章设置分类属性，支持多级分类</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- 一级分类</span><br><span class=\"line\">- 二级分类</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置标签\"><a class=\"markdownIt-Anchor\" href=\"#设置标签\"></a> 设置标签</h2>\n<ol>\n<li>创建标签页</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑页面，添加上<code>type: &quot;tags&quot;</code>，让主题识别页面为标签页面</li>\n<li>给文章设置标签属性，支持多个标签</li>\n</ol>\n<h1 id=\"切换风格\"><a class=\"markdownIt-Anchor\" href=\"#切换风格\"></a> 切换风格</h1>\n<p>Next主题提供了四种不同的风格（Scheme），在主题配置文件/themes/_config.yml中查找：scheme，修改scheme属性即可切换样式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse # 经典侧边栏布局，适合文字内容为主的博客。</span><br><span class=\"line\">scheme: Mist # 简洁现代风格，适合轻量级博客。</span><br><span class=\"line\">#scheme: Pisces # 双栏布局，功能丰富，适合多功能博客。</span><br><span class=\"line\">#scheme: Gemini # 杂志风格，适合多媒体内容展示。</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地搜索\"><a class=\"markdownIt-Anchor\" href=\"#本地搜索\"></a> 本地搜索</h1>\n<ol>\n<li>安装插件<code>hexo-generator-searchdb</code>，执行以下命令:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改hexo/_config.yml站点配置文件，新增以下内容到任意位置：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">   path: search.xml # 搜索后生成的文件路径，可以生成xml和json两种格式</span><br><span class=\"line\">   field: post # 搜索的字段，可以是post、page、all</span><br><span class=\"line\">   #content: true # 是否包含搜索到的文章的全部内容。默认情况下是true</span><br><span class=\"line\">   #format: html # 搜索到的内容、选项的格式。可以是html、striptags、raw，默认情况下是html</span><br><span class=\"line\">   limit: 10000</span><br><span class=\"line\">   template: themes/search.xml # 搜索结果的模板文件路径</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编辑主题配置文件，启用本地搜索功能：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">enable: true</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>根目录记得创建一个search.xml<br />\n很多教程都没有提到这一步，可能是因为通过git clone安装的主题，根目录已经有了search.xml文件，所以不需要再创建。<br />\n如果是通过npm安装的主题，需要在主题目录下创建search.xml文件，否则搜索功能将无法使用。<br />\n这个文件可以去 <a href=\"https://github.com/wzpan/hexo-generator-search\">https://github.com/wzpan/hexo-generator-search</a> 下载，也可以在刚刚安装的依赖包中找到，地址为<code>node_modules/hexo-generator-search/demo_output/search.xml</code>。</li>\n</ol>\n<h1 id=\"todo\"><a class=\"markdownIt-Anchor\" href=\"#todo\"></a> TODO</h1>\n<ul>\n<li>浏览页面显示当前浏览进度</li>\n<li>文章分享功能</li>\n<li>文章加密访问</li>\n<li>增加文章字数统计及阅读时常功能</li>\n<li>文章置顶功能</li>\n<li>评论功能</li>\n</ul>\n"},{"title":"Linux常用命令","date":"2025-03-05T06:47:35.000Z","_content":"Linux 是一个功能强大且灵活的操作系统，广泛应用于服务器、开发环境和嵌入式设备中。掌握常用的 Linux 命令是高效管理和操作系统的基础。本文整理了一些在日常工作中最常用的 Linux 命令，涵盖了网络、进程管理、服务控制、软件安装、开关机操作、别名设置等多个方面。无论你是初学者还是有一定经验的用户，这些命令都能帮助你更高效地完成系统管理和开发任务。\n\n# 网络\n```bash\nnetstat -a # 显示所有连接和监听端口\nnetstat -ntlp # 显示TCP连接及其监听端口\n```\n\n# 进程\n## 查看进程ps\n```bash\nps -aux # 显示所有进程的详细信息\nps -ef # 显示所有进程的完整信息\n```\n\n## 中止进程kill\n### 从容关闭\n```bash\nkill -QUIT PID # 优雅地终止进程\n```\n\n### 快速停止\n```bash\nkill -TERM PID # 发送终止信号\nkill -INT PID # 发送中断信号\n```\n\n### 强制停止\n```bash\nkill -9 PID # 强制终止进程\n```\n\n# 服务\n## 服务管理\n```bash\nsystemctl # 管理系统服务\n```\n\n## 启动/关闭服务\n```bash\n/etc/init.d/xxx start/stop/restart # 启动/停止/重启服务\n/etc/init.d/network stop # 停止网络服务\n```\n\n## 开机启用或关闭\n```bash\nchkconfig <service-name> on/off # 设置服务开机启动或关闭\nchkconfig smb on # 启用SMB服务\nchkconfig nmb on # 启用NMB服务\n```\n\n## 查看apache运行状态 \n```bash\nservice httpd status\n```\n\n# 安装软件\n## Red Hat版本 rpm\n```\nrpm [参数]\n-a：查询所有套件\n-c：只列出组态配置文件\n-l：显示套件的文件列表\n-q：使用询问模式\n```\n\n```bash\nrpm -qa # 查询所有已安装的软件包\nrpm -qc # 查找配置文件\nrpm -ql samba | grep '/etc' # 查找Samba的配置文件\n```\n\n## Ubuntu版本 apt-get\n```bash\nsudo apt-get update # 更新软件包列表\nsudo apt-get install -y [软件包名称]  # 安装软件包\n```\n\n## CentOS版本 yum\n```\nyum -y update 更新\nyum search [软件包名称]\nsudo yum install -y [软件包名称]\nyum remove [软件包名称]\n```\n\n```bash\nyum search samba # 搜索Samba软件包\nsudo yum install -y samba # 安装Samba软件包\n```\n\n## 定时更新\n```bash\nvim /etc/crontab\n15 2 * * * root /usr/bin/yum -y update\n```\n\n# 开关机\n## 关机 shutdown/poweroff/halt\n```bash\nshutdown # 1分钟后关机\nshutdown -r # 重启\nshutdown -h # 立即关机\nshutdown -c # 取消shutdown命令\npoweroff \nhalt\n```\n\n## 重启reboot\n```bash\nreboot # 重启\n```\n\n# alias别名\n## 查看别名\n```bash\nalias\t#列出当前 Shell 会话中定义的所有别名\nalias [别名] #查看某个特定别名\n```\n\n## 设置临时别名&常用别名\n通过`alias`命令直接设置的别名是临时别名，它们仅在当前 Shell 会话中有效。当关闭终端或退出当前 Shell 会话时，这些别名将丢失。\n\n```bash\nalias cp='cp -i'\nalias l='ls -l'\nalias l.='ls -d .* --color=auto'\nalias la='ls -A'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\nalias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-ti\nalias grep='grep --color'\nalias yum='yum -y'\nalias readlink='readlink -f'\nalias tree='tree -C'\n```\n\n## 永久设置别名\n如果你想永久设置别名，可以将别名定义添加到 Shell 的配置文件中。例如，在 Bash 中：\n\n1. 打开 `~/.bashrc` 文件\n\n```bash\nvi ~/.bashrc\n```\n\n2. 添加别名定义\n\n```bash\nalias ll='ls -l'\nalias la='ls -A'\n```\n\n3. 使更改生效\n\n```bash\nsource ~/.bashrc\n```\n\n## 删除别名\n```bash\nunalias  [别名] #删除某个特定别名\n```\n\n## 查看别名定义的文件\n别名通常定义在 Shell 的配置文件中，具体文件取决于你使用的 Shell：\n\n+ Bash：`~/.bashrc` 或 `~/.bash_profile`\n+ Zsh：`~/.zshrc`\n+ Fish：`~/.config/fish/config.fish`\n\n你可以使用 `cat` 或 `grep` 命令查看这些文件中的别名定义。\n\n```bash\ncat ~/.bashrc | grep alias\n```\n\n# 数据同步写入磁盘\n虽然目前的 shutdown/reboot/halt 等等指令均已经在关机前进行了 sync 这个工具的调用，不过，多做几次总是比较放心点\n\n一般帐号使用者所更新的硬盘数据就仅有自己的数据，不像root可以更新整个系统中的数据了\n\n```bash\nsync  \n```\n","source":"_posts/Linux常用命令.md","raw":"---\ntitle: Linux常用命令\ndate: 2025-03-05 14:47:35\ntags:\ncategories:\n- Linux\n---\nLinux 是一个功能强大且灵活的操作系统，广泛应用于服务器、开发环境和嵌入式设备中。掌握常用的 Linux 命令是高效管理和操作系统的基础。本文整理了一些在日常工作中最常用的 Linux 命令，涵盖了网络、进程管理、服务控制、软件安装、开关机操作、别名设置等多个方面。无论你是初学者还是有一定经验的用户，这些命令都能帮助你更高效地完成系统管理和开发任务。\n\n# 网络\n```bash\nnetstat -a # 显示所有连接和监听端口\nnetstat -ntlp # 显示TCP连接及其监听端口\n```\n\n# 进程\n## 查看进程ps\n```bash\nps -aux # 显示所有进程的详细信息\nps -ef # 显示所有进程的完整信息\n```\n\n## 中止进程kill\n### 从容关闭\n```bash\nkill -QUIT PID # 优雅地终止进程\n```\n\n### 快速停止\n```bash\nkill -TERM PID # 发送终止信号\nkill -INT PID # 发送中断信号\n```\n\n### 强制停止\n```bash\nkill -9 PID # 强制终止进程\n```\n\n# 服务\n## 服务管理\n```bash\nsystemctl # 管理系统服务\n```\n\n## 启动/关闭服务\n```bash\n/etc/init.d/xxx start/stop/restart # 启动/停止/重启服务\n/etc/init.d/network stop # 停止网络服务\n```\n\n## 开机启用或关闭\n```bash\nchkconfig <service-name> on/off # 设置服务开机启动或关闭\nchkconfig smb on # 启用SMB服务\nchkconfig nmb on # 启用NMB服务\n```\n\n## 查看apache运行状态 \n```bash\nservice httpd status\n```\n\n# 安装软件\n## Red Hat版本 rpm\n```\nrpm [参数]\n-a：查询所有套件\n-c：只列出组态配置文件\n-l：显示套件的文件列表\n-q：使用询问模式\n```\n\n```bash\nrpm -qa # 查询所有已安装的软件包\nrpm -qc # 查找配置文件\nrpm -ql samba | grep '/etc' # 查找Samba的配置文件\n```\n\n## Ubuntu版本 apt-get\n```bash\nsudo apt-get update # 更新软件包列表\nsudo apt-get install -y [软件包名称]  # 安装软件包\n```\n\n## CentOS版本 yum\n```\nyum -y update 更新\nyum search [软件包名称]\nsudo yum install -y [软件包名称]\nyum remove [软件包名称]\n```\n\n```bash\nyum search samba # 搜索Samba软件包\nsudo yum install -y samba # 安装Samba软件包\n```\n\n## 定时更新\n```bash\nvim /etc/crontab\n15 2 * * * root /usr/bin/yum -y update\n```\n\n# 开关机\n## 关机 shutdown/poweroff/halt\n```bash\nshutdown # 1分钟后关机\nshutdown -r # 重启\nshutdown -h # 立即关机\nshutdown -c # 取消shutdown命令\npoweroff \nhalt\n```\n\n## 重启reboot\n```bash\nreboot # 重启\n```\n\n# alias别名\n## 查看别名\n```bash\nalias\t#列出当前 Shell 会话中定义的所有别名\nalias [别名] #查看某个特定别名\n```\n\n## 设置临时别名&常用别名\n通过`alias`命令直接设置的别名是临时别名，它们仅在当前 Shell 会话中有效。当关闭终端或退出当前 Shell 会话时，这些别名将丢失。\n\n```bash\nalias cp='cp -i'\nalias l='ls -l'\nalias l.='ls -d .* --color=auto'\nalias la='ls -A'\nalias ll='ls -l --color=auto'\nalias ls='ls --color=auto'\nalias mv='mv -i'\nalias rm='rm -i'\nalias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-ti\nalias grep='grep --color'\nalias yum='yum -y'\nalias readlink='readlink -f'\nalias tree='tree -C'\n```\n\n## 永久设置别名\n如果你想永久设置别名，可以将别名定义添加到 Shell 的配置文件中。例如，在 Bash 中：\n\n1. 打开 `~/.bashrc` 文件\n\n```bash\nvi ~/.bashrc\n```\n\n2. 添加别名定义\n\n```bash\nalias ll='ls -l'\nalias la='ls -A'\n```\n\n3. 使更改生效\n\n```bash\nsource ~/.bashrc\n```\n\n## 删除别名\n```bash\nunalias  [别名] #删除某个特定别名\n```\n\n## 查看别名定义的文件\n别名通常定义在 Shell 的配置文件中，具体文件取决于你使用的 Shell：\n\n+ Bash：`~/.bashrc` 或 `~/.bash_profile`\n+ Zsh：`~/.zshrc`\n+ Fish：`~/.config/fish/config.fish`\n\n你可以使用 `cat` 或 `grep` 命令查看这些文件中的别名定义。\n\n```bash\ncat ~/.bashrc | grep alias\n```\n\n# 数据同步写入磁盘\n虽然目前的 shutdown/reboot/halt 等等指令均已经在关机前进行了 sync 这个工具的调用，不过，多做几次总是比较放心点\n\n一般帐号使用者所更新的硬盘数据就仅有自己的数据，不像root可以更新整个系统中的数据了\n\n```bash\nsync  \n```\n","slug":"Linux常用命令","published":1,"updated":"2025-03-05T08:33:09.144Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16j000m64v4e3vzaj9m","content":"<p>Linux 是一个功能强大且灵活的操作系统，广泛应用于服务器、开发环境和嵌入式设备中。掌握常用的 Linux 命令是高效管理和操作系统的基础。本文整理了一些在日常工作中最常用的 Linux 命令，涵盖了网络、进程管理、服务控制、软件安装、开关机操作、别名设置等多个方面。无论你是初学者还是有一定经验的用户，这些命令都能帮助你更高效地完成系统管理和开发任务。</p>\n<h1 id=\"网络\"><a class=\"markdownIt-Anchor\" href=\"#网络\"></a> 网络</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -a <span class=\"comment\"># 显示所有连接和监听端口</span></span><br><span class=\"line\">netstat -ntlp <span class=\"comment\"># 显示TCP连接及其监听端口</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\"></a> 进程</h1>\n<h2 id=\"查看进程ps\"><a class=\"markdownIt-Anchor\" href=\"#查看进程ps\"></a> 查看进程ps</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux <span class=\"comment\"># 显示所有进程的详细信息</span></span><br><span class=\"line\">ps -ef <span class=\"comment\"># 显示所有进程的完整信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"中止进程kill\"><a class=\"markdownIt-Anchor\" href=\"#中止进程kill\"></a> 中止进程kill</h2>\n<h3 id=\"从容关闭\"><a class=\"markdownIt-Anchor\" href=\"#从容关闭\"></a> 从容关闭</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT PID <span class=\"comment\"># 优雅地终止进程</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"快速停止\"><a class=\"markdownIt-Anchor\" href=\"#快速停止\"></a> 快速停止</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -TERM PID <span class=\"comment\"># 发送终止信号</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -INT PID <span class=\"comment\"># 发送中断信号</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"强制停止\"><a class=\"markdownIt-Anchor\" href=\"#强制停止\"></a> 强制停止</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 PID <span class=\"comment\"># 强制终止进程</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"服务\"><a class=\"markdownIt-Anchor\" href=\"#服务\"></a> 服务</h1>\n<h2 id=\"服务管理\"><a class=\"markdownIt-Anchor\" href=\"#服务管理\"></a> 服务管理</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"comment\"># 管理系统服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动关闭服务\"><a class=\"markdownIt-Anchor\" href=\"#启动关闭服务\"></a> 启动/关闭服务</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/xxx start/stop/restart <span class=\"comment\"># 启动/停止/重启服务</span></span><br><span class=\"line\">/etc/init.d/network stop <span class=\"comment\"># 停止网络服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开机启用或关闭\"><a class=\"markdownIt-Anchor\" href=\"#开机启用或关闭\"></a> 开机启用或关闭</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig &lt;service-name&gt; on/off <span class=\"comment\"># 设置服务开机启动或关闭</span></span><br><span class=\"line\">chkconfig smb on <span class=\"comment\"># 启用SMB服务</span></span><br><span class=\"line\">chkconfig nmb on <span class=\"comment\"># 启用NMB服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看apache运行状态\"><a class=\"markdownIt-Anchor\" href=\"#查看apache运行状态\"></a> 查看apache运行状态</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd status</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h1>\n<h2 id=\"red-hat版本-rpm\"><a class=\"markdownIt-Anchor\" href=\"#red-hat版本-rpm\"></a> Red Hat版本 rpm</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm [参数]</span><br><span class=\"line\">-a：查询所有套件</span><br><span class=\"line\">-c：只列出组态配置文件</span><br><span class=\"line\">-l：显示套件的文件列表</span><br><span class=\"line\">-q：使用询问模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa <span class=\"comment\"># 查询所有已安装的软件包</span></span><br><span class=\"line\">rpm -qc <span class=\"comment\"># 查找配置文件</span></span><br><span class=\"line\">rpm -ql samba | grep <span class=\"string\">&#x27;/etc&#x27;</span> <span class=\"comment\"># 查找Samba的配置文件</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ubuntu版本-apt-get\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu版本-apt-get\"></a> Ubuntu版本 apt-get</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update <span class=\"comment\"># 更新软件包列表</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install -y [软件包名称]  <span class=\"comment\"># 安装软件包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"centos版本-yum\"><a class=\"markdownIt-Anchor\" href=\"#centos版本-yum\"></a> CentOS版本 yum</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update 更新</span><br><span class=\"line\">yum search [软件包名称]</span><br><span class=\"line\">sudo yum install -y [软件包名称]</span><br><span class=\"line\">yum remove [软件包名称]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search samba <span class=\"comment\"># 搜索Samba软件包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install -y samba <span class=\"comment\"># 安装Samba软件包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定时更新\"><a class=\"markdownIt-Anchor\" href=\"#定时更新\"></a> 定时更新</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/crontab</span><br><span class=\"line\">15 2 * * * root /usr/bin/yum -y update</span><br></pre></td></tr></table></figure>\n<h1 id=\"开关机\"><a class=\"markdownIt-Anchor\" href=\"#开关机\"></a> 开关机</h1>\n<h2 id=\"关机-shutdownpoweroffhalt\"><a class=\"markdownIt-Anchor\" href=\"#关机-shutdownpoweroffhalt\"></a> 关机 shutdown/poweroff/halt</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown <span class=\"comment\"># 1分钟后关机</span></span><br><span class=\"line\">shutdown -r <span class=\"comment\"># 重启</span></span><br><span class=\"line\">shutdown -h <span class=\"comment\"># 立即关机</span></span><br><span class=\"line\">shutdown -c <span class=\"comment\"># 取消shutdown命令</span></span><br><span class=\"line\">poweroff </span><br><span class=\"line\">halt</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启reboot\"><a class=\"markdownIt-Anchor\" href=\"#重启reboot\"></a> 重启reboot</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot <span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"alias别名\"><a class=\"markdownIt-Anchor\" href=\"#alias别名\"></a> alias别名</h1>\n<h2 id=\"查看别名\"><a class=\"markdownIt-Anchor\" href=\"#查看别名\"></a> 查看别名</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span>\t<span class=\"comment\">#列出当前 Shell 会话中定义的所有别名</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> [别名] <span class=\"comment\">#查看某个特定别名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"设置临时别名常用别名\"><a class=\"markdownIt-Anchor\" href=\"#设置临时别名常用别名\"></a> 设置临时别名&amp;常用别名</h2>\n<p>通过<code>alias</code>命令直接设置的别名是临时别名，它们仅在当前 Shell 会话中有效。当关闭终端或退出当前 Shell 会话时，这些别名将丢失。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">cp</span>=<span class=\"string\">&#x27;cp -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l=<span class=\"string\">&#x27;ls -l&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l.=<span class=\"string\">&#x27;ls -d .* --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> la=<span class=\"string\">&#x27;ls -A&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">&#x27;ls -l --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">ls</span>=<span class=\"string\">&#x27;ls --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">mv</span>=<span class=\"string\">&#x27;mv -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">rm</span>=<span class=\"string\">&#x27;rm -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">which</span>=<span class=\"string\">&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-ti</span></span><br><span class=\"line\"><span class=\"string\">alias grep=&#x27;</span>grep --color<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias yum=&#x27;</span>yum -y<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias readlink=&#x27;</span><span class=\"built_in\">readlink</span> -f<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias tree=&#x27;</span>tree -C<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"永久设置别名\"><a class=\"markdownIt-Anchor\" href=\"#永久设置别名\"></a> 永久设置别名</h2>\n<p>如果你想永久设置别名，可以将别名定义添加到 Shell 的配置文件中。例如，在 Bash 中：</p>\n<ol>\n<li>打开 <code>~/.bashrc</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bashrc</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加别名定义</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">&#x27;ls -l&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> la=<span class=\"string\">&#x27;ls -A&#x27;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使更改生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除别名\"><a class=\"markdownIt-Anchor\" href=\"#删除别名\"></a> 删除别名</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unalias</span>  [别名] <span class=\"comment\">#删除某个特定别名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看别名定义的文件\"><a class=\"markdownIt-Anchor\" href=\"#查看别名定义的文件\"></a> 查看别名定义的文件</h2>\n<p>别名通常定义在 Shell 的配置文件中，具体文件取决于你使用的 Shell：</p>\n<ul>\n<li>Bash：<code>~/.bashrc</code> 或 <code>~/.bash_profile</code></li>\n<li>Zsh：<code>~/.zshrc</code></li>\n<li>Fish：<code>~/.config/fish/config.fish</code></li>\n</ul>\n<p>你可以使用 <code>cat</code> 或 <code>grep</code> 命令查看这些文件中的别名定义。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> ~/.bashrc | grep <span class=\"built_in\">alias</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据同步写入磁盘\"><a class=\"markdownIt-Anchor\" href=\"#数据同步写入磁盘\"></a> 数据同步写入磁盘</h1>\n<p>虽然目前的 shutdown/reboot/halt 等等指令均已经在关机前进行了 sync 这个工具的调用，不过，多做几次总是比较放心点</p>\n<p>一般帐号使用者所更新的硬盘数据就仅有自己的数据，不像root可以更新整个系统中的数据了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sync</span>  </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Linux 是一个功能强大且灵活的操作系统，广泛应用于服务器、开发环境和嵌入式设备中。掌握常用的 Linux 命令是高效管理和操作系统的基础。本文整理了一些在日常工作中最常用的 Linux 命令，涵盖了网络、进程管理、服务控制、软件安装、开关机操作、别名设置等多个方面。无论你是初学者还是有一定经验的用户，这些命令都能帮助你更高效地完成系统管理和开发任务。</p>\n<h1 id=\"网络\"><a class=\"markdownIt-Anchor\" href=\"#网络\"></a> 网络</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -a <span class=\"comment\"># 显示所有连接和监听端口</span></span><br><span class=\"line\">netstat -ntlp <span class=\"comment\"># 显示TCP连接及其监听端口</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"进程\"><a class=\"markdownIt-Anchor\" href=\"#进程\"></a> 进程</h1>\n<h2 id=\"查看进程ps\"><a class=\"markdownIt-Anchor\" href=\"#查看进程ps\"></a> 查看进程ps</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux <span class=\"comment\"># 显示所有进程的详细信息</span></span><br><span class=\"line\">ps -ef <span class=\"comment\"># 显示所有进程的完整信息</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"中止进程kill\"><a class=\"markdownIt-Anchor\" href=\"#中止进程kill\"></a> 中止进程kill</h2>\n<h3 id=\"从容关闭\"><a class=\"markdownIt-Anchor\" href=\"#从容关闭\"></a> 从容关闭</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT PID <span class=\"comment\"># 优雅地终止进程</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"快速停止\"><a class=\"markdownIt-Anchor\" href=\"#快速停止\"></a> 快速停止</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -TERM PID <span class=\"comment\"># 发送终止信号</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -INT PID <span class=\"comment\"># 发送中断信号</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"强制停止\"><a class=\"markdownIt-Anchor\" href=\"#强制停止\"></a> 强制停止</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -9 PID <span class=\"comment\"># 强制终止进程</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"服务\"><a class=\"markdownIt-Anchor\" href=\"#服务\"></a> 服务</h1>\n<h2 id=\"服务管理\"><a class=\"markdownIt-Anchor\" href=\"#服务管理\"></a> 服务管理</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"comment\"># 管理系统服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启动关闭服务\"><a class=\"markdownIt-Anchor\" href=\"#启动关闭服务\"></a> 启动/关闭服务</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/xxx start/stop/restart <span class=\"comment\"># 启动/停止/重启服务</span></span><br><span class=\"line\">/etc/init.d/network stop <span class=\"comment\"># 停止网络服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开机启用或关闭\"><a class=\"markdownIt-Anchor\" href=\"#开机启用或关闭\"></a> 开机启用或关闭</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig &lt;service-name&gt; on/off <span class=\"comment\"># 设置服务开机启动或关闭</span></span><br><span class=\"line\">chkconfig smb on <span class=\"comment\"># 启用SMB服务</span></span><br><span class=\"line\">chkconfig nmb on <span class=\"comment\"># 启用NMB服务</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看apache运行状态\"><a class=\"markdownIt-Anchor\" href=\"#查看apache运行状态\"></a> 查看apache运行状态</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd status</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装软件\"><a class=\"markdownIt-Anchor\" href=\"#安装软件\"></a> 安装软件</h1>\n<h2 id=\"red-hat版本-rpm\"><a class=\"markdownIt-Anchor\" href=\"#red-hat版本-rpm\"></a> Red Hat版本 rpm</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm [参数]</span><br><span class=\"line\">-a：查询所有套件</span><br><span class=\"line\">-c：只列出组态配置文件</span><br><span class=\"line\">-l：显示套件的文件列表</span><br><span class=\"line\">-q：使用询问模式</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa <span class=\"comment\"># 查询所有已安装的软件包</span></span><br><span class=\"line\">rpm -qc <span class=\"comment\"># 查找配置文件</span></span><br><span class=\"line\">rpm -ql samba | grep <span class=\"string\">&#x27;/etc&#x27;</span> <span class=\"comment\"># 查找Samba的配置文件</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ubuntu版本-apt-get\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu版本-apt-get\"></a> Ubuntu版本 apt-get</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update <span class=\"comment\"># 更新软件包列表</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install -y [软件包名称]  <span class=\"comment\"># 安装软件包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"centos版本-yum\"><a class=\"markdownIt-Anchor\" href=\"#centos版本-yum\"></a> CentOS版本 yum</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update 更新</span><br><span class=\"line\">yum search [软件包名称]</span><br><span class=\"line\">sudo yum install -y [软件包名称]</span><br><span class=\"line\">yum remove [软件包名称]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search samba <span class=\"comment\"># 搜索Samba软件包</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install -y samba <span class=\"comment\"># 安装Samba软件包</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定时更新\"><a class=\"markdownIt-Anchor\" href=\"#定时更新\"></a> 定时更新</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/crontab</span><br><span class=\"line\">15 2 * * * root /usr/bin/yum -y update</span><br></pre></td></tr></table></figure>\n<h1 id=\"开关机\"><a class=\"markdownIt-Anchor\" href=\"#开关机\"></a> 开关机</h1>\n<h2 id=\"关机-shutdownpoweroffhalt\"><a class=\"markdownIt-Anchor\" href=\"#关机-shutdownpoweroffhalt\"></a> 关机 shutdown/poweroff/halt</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown <span class=\"comment\"># 1分钟后关机</span></span><br><span class=\"line\">shutdown -r <span class=\"comment\"># 重启</span></span><br><span class=\"line\">shutdown -h <span class=\"comment\"># 立即关机</span></span><br><span class=\"line\">shutdown -c <span class=\"comment\"># 取消shutdown命令</span></span><br><span class=\"line\">poweroff </span><br><span class=\"line\">halt</span><br></pre></td></tr></table></figure>\n<h2 id=\"重启reboot\"><a class=\"markdownIt-Anchor\" href=\"#重启reboot\"></a> 重启reboot</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot <span class=\"comment\"># 重启</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"alias别名\"><a class=\"markdownIt-Anchor\" href=\"#alias别名\"></a> alias别名</h1>\n<h2 id=\"查看别名\"><a class=\"markdownIt-Anchor\" href=\"#查看别名\"></a> 查看别名</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span>\t<span class=\"comment\">#列出当前 Shell 会话中定义的所有别名</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> [别名] <span class=\"comment\">#查看某个特定别名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"设置临时别名常用别名\"><a class=\"markdownIt-Anchor\" href=\"#设置临时别名常用别名\"></a> 设置临时别名&amp;常用别名</h2>\n<p>通过<code>alias</code>命令直接设置的别名是临时别名，它们仅在当前 Shell 会话中有效。当关闭终端或退出当前 Shell 会话时，这些别名将丢失。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">cp</span>=<span class=\"string\">&#x27;cp -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l=<span class=\"string\">&#x27;ls -l&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> l.=<span class=\"string\">&#x27;ls -d .* --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> la=<span class=\"string\">&#x27;ls -A&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">&#x27;ls -l --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">ls</span>=<span class=\"string\">&#x27;ls --color=auto&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">mv</span>=<span class=\"string\">&#x27;mv -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">rm</span>=<span class=\"string\">&#x27;rm -i&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> <span class=\"built_in\">which</span>=<span class=\"string\">&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-ti</span></span><br><span class=\"line\"><span class=\"string\">alias grep=&#x27;</span>grep --color<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias yum=&#x27;</span>yum -y<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias readlink=&#x27;</span><span class=\"built_in\">readlink</span> -f<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">alias tree=&#x27;</span>tree -C<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"永久设置别名\"><a class=\"markdownIt-Anchor\" href=\"#永久设置别名\"></a> 永久设置别名</h2>\n<p>如果你想永久设置别名，可以将别名定义添加到 Shell 的配置文件中。例如，在 Bash 中：</p>\n<ol>\n<li>打开 <code>~/.bashrc</code> 文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bashrc</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加别名定义</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> ll=<span class=\"string\">&#x27;ls -l&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> la=<span class=\"string\">&#x27;ls -A&#x27;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使更改生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除别名\"><a class=\"markdownIt-Anchor\" href=\"#删除别名\"></a> 删除别名</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unalias</span>  [别名] <span class=\"comment\">#删除某个特定别名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看别名定义的文件\"><a class=\"markdownIt-Anchor\" href=\"#查看别名定义的文件\"></a> 查看别名定义的文件</h2>\n<p>别名通常定义在 Shell 的配置文件中，具体文件取决于你使用的 Shell：</p>\n<ul>\n<li>Bash：<code>~/.bashrc</code> 或 <code>~/.bash_profile</code></li>\n<li>Zsh：<code>~/.zshrc</code></li>\n<li>Fish：<code>~/.config/fish/config.fish</code></li>\n</ul>\n<p>你可以使用 <code>cat</code> 或 <code>grep</code> 命令查看这些文件中的别名定义。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> ~/.bashrc | grep <span class=\"built_in\">alias</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据同步写入磁盘\"><a class=\"markdownIt-Anchor\" href=\"#数据同步写入磁盘\"></a> 数据同步写入磁盘</h1>\n<p>虽然目前的 shutdown/reboot/halt 等等指令均已经在关机前进行了 sync 这个工具的调用，不过，多做几次总是比较放心点</p>\n<p>一般帐号使用者所更新的硬盘数据就仅有自己的数据，不像root可以更新整个系统中的数据了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sync</span>  </span><br></pre></td></tr></table></figure>\n"},{"title":"【Hexo】更高级的Markdown渲染器","date":"2025-03-06T08:56:57.000Z","_content":"\n\n\nHexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成`hexo-renderer-markdown-it-plus`渲染器。\n# 切换渲染器\n```bash\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-markdown-it-plus --save\n```\n\n# 安装所需插件\n使用npm命令安装以下三个插件：\n```bash\nnpm install markdown-it --save\nnpm install markdown-it-checkbox --save # 任务列表\nnpm install markdown-it-expandable --save # 折叠/展开内容\nnpm install markdown-it-container --save # 自定义容器\n```\n其他插件`hexo-renderer-markdown-it-plus`渲染器自带，无需安装，包括以下插件：\n- markdown-it-emoji 表情\n- markdown-it-sub 下标\n- markdown-it-sup 上标\n- markdown-it-deflist\n- markdown-it-abbr\n- markdown-it-footnote 脚注\n- markdown-it-ins 下划线\n- markdown-it-mark 高亮\n- @iktakahiro/markdown-it-katex\n- markdown-it-toc-and-anchor\n\n# 启用插件\n修改博客目录里的 _config.yml 文件，启用插件，渲染器自带插件默认启用，无需配置。\n```yaml\nmarkdown:\n  plugins:\n    - markdown-it-checkbox\n    - markdown-it-expandable\n    - name: markdown-it-container\n      options: success\n    - name: markdown-it-container\n      options: tips\n    - name: markdown-it-container\n      options: warning\n    - name: markdown-it-container\n      options: danger\n```\n\n# 语法\n:( 添加依赖，启用插件后，手动安装的插件（任务列表和进阶语法）都不支持，先把语法贴上来，后面再解决。\n## 基础语法\n|名称|描述|语法|效果|\n|----|----|----|----|\n|markdown-it-emoji|表情|`:)`| :) |\n| markdown-it-sub |下标|`H~2~O`|H~2~O|\n| markdown-it-sup |上标|`X^2^`|X^2^|\n|markdown-it-ins|下划线|`++下划线++`| ++下划线++ |\n|markdown-it-mark|高亮|`==高亮==`| ==高亮== |\n|markdown-it-checkbox|任务列表/复选框|`-[x] 任务列表/复选框`| -[x] 不支持任务列表/复选框 |\n\n<!-- # - 脚注[^1] -->\n### Emoji编码合集\nhttps://www.emojiall.com/zh-hans#google_vignette\nhttps://emojipedia.org/zh\nhttps://www.webfx.com/tools/emoji-cheat-sheet/\n## 进阶语法\n\n### 折叠展开内容\n语法:\n```\n+++ **点击折叠**\n这是被隐藏的内容\n+++\n```\n### 自定义容器\n语法：\n```\n::: tips\n提示\n:::\n\n::: warning\n警告\n:::\n\n::: danger\n危险\n:::\n```\n### Markdown-it插件\nhttps://mdit-plugins.github.io/zh/","source":"_posts/【Hexo】更高级的Markdown渲染器.md","raw":"---\ntitle: 【Hexo】更高级的Markdown渲染器\ndate: 2025-03-06 16:56:57\ntags:\n  - Hexo教程\n  - Markdown\ncategories:\n  - Hexo教程\n  - Markdown\n---\n\n\n\nHexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成`hexo-renderer-markdown-it-plus`渲染器。\n# 切换渲染器\n```bash\nnpm uninstall hexo-renderer-marked --save\nnpm install hexo-renderer-markdown-it-plus --save\n```\n\n# 安装所需插件\n使用npm命令安装以下三个插件：\n```bash\nnpm install markdown-it --save\nnpm install markdown-it-checkbox --save # 任务列表\nnpm install markdown-it-expandable --save # 折叠/展开内容\nnpm install markdown-it-container --save # 自定义容器\n```\n其他插件`hexo-renderer-markdown-it-plus`渲染器自带，无需安装，包括以下插件：\n- markdown-it-emoji 表情\n- markdown-it-sub 下标\n- markdown-it-sup 上标\n- markdown-it-deflist\n- markdown-it-abbr\n- markdown-it-footnote 脚注\n- markdown-it-ins 下划线\n- markdown-it-mark 高亮\n- @iktakahiro/markdown-it-katex\n- markdown-it-toc-and-anchor\n\n# 启用插件\n修改博客目录里的 _config.yml 文件，启用插件，渲染器自带插件默认启用，无需配置。\n```yaml\nmarkdown:\n  plugins:\n    - markdown-it-checkbox\n    - markdown-it-expandable\n    - name: markdown-it-container\n      options: success\n    - name: markdown-it-container\n      options: tips\n    - name: markdown-it-container\n      options: warning\n    - name: markdown-it-container\n      options: danger\n```\n\n# 语法\n:( 添加依赖，启用插件后，手动安装的插件（任务列表和进阶语法）都不支持，先把语法贴上来，后面再解决。\n## 基础语法\n|名称|描述|语法|效果|\n|----|----|----|----|\n|markdown-it-emoji|表情|`:)`| :) |\n| markdown-it-sub |下标|`H~2~O`|H~2~O|\n| markdown-it-sup |上标|`X^2^`|X^2^|\n|markdown-it-ins|下划线|`++下划线++`| ++下划线++ |\n|markdown-it-mark|高亮|`==高亮==`| ==高亮== |\n|markdown-it-checkbox|任务列表/复选框|`-[x] 任务列表/复选框`| -[x] 不支持任务列表/复选框 |\n\n<!-- # - 脚注[^1] -->\n### Emoji编码合集\nhttps://www.emojiall.com/zh-hans#google_vignette\nhttps://emojipedia.org/zh\nhttps://www.webfx.com/tools/emoji-cheat-sheet/\n## 进阶语法\n\n### 折叠展开内容\n语法:\n```\n+++ **点击折叠**\n这是被隐藏的内容\n+++\n```\n### 自定义容器\n语法：\n```\n::: tips\n提示\n:::\n\n::: warning\n警告\n:::\n\n::: danger\n危险\n:::\n```\n### Markdown-it插件\nhttps://mdit-plugins.github.io/zh/","slug":"【Hexo】更高级的Markdown渲染器","published":1,"updated":"2025-03-06T09:03:34.214Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16k000n64v43k7uaadx","content":"<p>Hexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成<code>hexo-renderer-markdown-it-plus</code>渲染器。</p>\n<h1 id=\"切换渲染器\"><a class=\"markdownIt-Anchor\" href=\"#切换渲染器\"></a> 切换渲染器</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装所需插件\"><a class=\"markdownIt-Anchor\" href=\"#安装所需插件\"></a> 安装所需插件</h1>\n<p>使用npm命令安装以下三个插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install markdown-it --save</span><br><span class=\"line\">npm install markdown-it-checkbox --save <span class=\"comment\"># 任务列表</span></span><br><span class=\"line\">npm install markdown-it-expandable --save <span class=\"comment\"># 折叠/展开内容</span></span><br><span class=\"line\">npm install markdown-it-container --save <span class=\"comment\"># 自定义容器</span></span><br></pre></td></tr></table></figure>\n<p>其他插件<code>hexo-renderer-markdown-it-plus</code>渲染器自带，无需安装，包括以下插件：</p>\n<ul>\n<li>markdown-it-emoji 表情</li>\n<li>markdown-it-sub 下标</li>\n<li>markdown-it-sup 上标</li>\n<li>markdown-it-deflist</li>\n<li>markdown-it-abbr</li>\n<li>markdown-it-footnote 脚注</li>\n<li>markdown-it-ins 下划线</li>\n<li>markdown-it-mark 高亮</li>\n<li>@iktakahiro/markdown-it-katex</li>\n<li>markdown-it-toc-and-anchor</li>\n</ul>\n<h1 id=\"启用插件\"><a class=\"markdownIt-Anchor\" href=\"#启用插件\"></a> 启用插件</h1>\n<p>修改博客目录里的 _config.yml 文件，启用插件，渲染器自带插件默认启用，无需配置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">plugins:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">markdown-it-checkbox</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">markdown-it-expandable</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">success</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">tips</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">warning</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">danger</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h1>\n<p>😦 添加依赖，启用插件后，手动安装的插件（任务列表和进阶语法）都不支持，先把语法贴上来，后面再解决。</p>\n<h2 id=\"基础语法\"><a class=\"markdownIt-Anchor\" href=\"#基础语法\"></a> 基础语法</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>语法</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>markdown-it-emoji</td>\n<td>表情</td>\n<td><code>:)</code></td>\n<td>😃</td>\n</tr>\n<tr>\n<td>markdown-it-sub</td>\n<td>下标</td>\n<td><code>H~2~O</code></td>\n<td>H<sub>2</sub>O</td>\n</tr>\n<tr>\n<td>markdown-it-sup</td>\n<td>上标</td>\n<td><code>X^2^</code></td>\n<td>X<sup>2</sup></td>\n</tr>\n<tr>\n<td>markdown-it-ins</td>\n<td>下划线</td>\n<td><code>++下划线++</code></td>\n<td><ins>下划线</ins></td>\n</tr>\n<tr>\n<td>markdown-it-mark</td>\n<td>高亮</td>\n<td><code>==高亮==</code></td>\n<td><mark>高亮</mark></td>\n</tr>\n<tr>\n<td>markdown-it-checkbox</td>\n<td>任务列表/复选框</td>\n<td><code>-[x] 任务列表/复选框</code></td>\n<td>-[x] 不支持任务列表/复选框</td>\n</tr>\n</tbody>\n</table>\n<!-- # - 脚注[^1] -->\n<h3 id=\"emoji编码合集\"><a class=\"markdownIt-Anchor\" href=\"#emoji编码合集\"></a> Emoji编码合集</h3>\n<p><a href=\"https://www.emojiall.com/zh-hans#google_vignette\">https://www.emojiall.com/zh-hans#google_vignette</a><br />\n<a href=\"https://emojipedia.org/zh\">https://emojipedia.org/zh</a><br />\n<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">https://www.webfx.com/tools/emoji-cheat-sheet/</a></p>\n<h2 id=\"进阶语法\"><a class=\"markdownIt-Anchor\" href=\"#进阶语法\"></a> 进阶语法</h2>\n<h3 id=\"折叠展开内容\"><a class=\"markdownIt-Anchor\" href=\"#折叠展开内容\"></a> 折叠展开内容</h3>\n<p>语法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++ **点击折叠**</span><br><span class=\"line\">这是被隐藏的内容</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义容器\"><a class=\"markdownIt-Anchor\" href=\"#自定义容器\"></a> 自定义容器</h3>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::: tips</span><br><span class=\"line\">提示</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">::: warning</span><br><span class=\"line\">警告</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">::: danger</span><br><span class=\"line\">危险</span><br><span class=\"line\">:::</span><br></pre></td></tr></table></figure>\n<h3 id=\"markdown-it插件\"><a class=\"markdownIt-Anchor\" href=\"#markdown-it插件\"></a> Markdown-it插件</h3>\n<p><a href=\"https://mdit-plugins.github.io/zh/\">https://mdit-plugins.github.io/zh/</a></p>\n","excerpt":"","more":"<p>Hexo 默认搭配的 Markdown 渲染器为 hexo-renderer-marked，但其实现功能有限，推荐换成<code>hexo-renderer-markdown-it-plus</code>渲染器。</p>\n<h1 id=\"切换渲染器\"><a class=\"markdownIt-Anchor\" href=\"#切换渲染器\"></a> 切换渲染器</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\">npm install hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装所需插件\"><a class=\"markdownIt-Anchor\" href=\"#安装所需插件\"></a> 安装所需插件</h1>\n<p>使用npm命令安装以下三个插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install markdown-it --save</span><br><span class=\"line\">npm install markdown-it-checkbox --save <span class=\"comment\"># 任务列表</span></span><br><span class=\"line\">npm install markdown-it-expandable --save <span class=\"comment\"># 折叠/展开内容</span></span><br><span class=\"line\">npm install markdown-it-container --save <span class=\"comment\"># 自定义容器</span></span><br></pre></td></tr></table></figure>\n<p>其他插件<code>hexo-renderer-markdown-it-plus</code>渲染器自带，无需安装，包括以下插件：</p>\n<ul>\n<li>markdown-it-emoji 表情</li>\n<li>markdown-it-sub 下标</li>\n<li>markdown-it-sup 上标</li>\n<li>markdown-it-deflist</li>\n<li>markdown-it-abbr</li>\n<li>markdown-it-footnote 脚注</li>\n<li>markdown-it-ins 下划线</li>\n<li>markdown-it-mark 高亮</li>\n<li>@iktakahiro/markdown-it-katex</li>\n<li>markdown-it-toc-and-anchor</li>\n</ul>\n<h1 id=\"启用插件\"><a class=\"markdownIt-Anchor\" href=\"#启用插件\"></a> 启用插件</h1>\n<p>修改博客目录里的 _config.yml 文件，启用插件，渲染器自带插件默认启用，无需配置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">plugins:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">markdown-it-checkbox</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">markdown-it-expandable</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">success</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">tips</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">warning</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">markdown-it-container</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span> <span class=\"string\">danger</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h1>\n<p>😦 添加依赖，启用插件后，手动安装的插件（任务列表和进阶语法）都不支持，先把语法贴上来，后面再解决。</p>\n<h2 id=\"基础语法\"><a class=\"markdownIt-Anchor\" href=\"#基础语法\"></a> 基础语法</h2>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>语法</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>markdown-it-emoji</td>\n<td>表情</td>\n<td><code>:)</code></td>\n<td>😃</td>\n</tr>\n<tr>\n<td>markdown-it-sub</td>\n<td>下标</td>\n<td><code>H~2~O</code></td>\n<td>H<sub>2</sub>O</td>\n</tr>\n<tr>\n<td>markdown-it-sup</td>\n<td>上标</td>\n<td><code>X^2^</code></td>\n<td>X<sup>2</sup></td>\n</tr>\n<tr>\n<td>markdown-it-ins</td>\n<td>下划线</td>\n<td><code>++下划线++</code></td>\n<td><ins>下划线</ins></td>\n</tr>\n<tr>\n<td>markdown-it-mark</td>\n<td>高亮</td>\n<td><code>==高亮==</code></td>\n<td><mark>高亮</mark></td>\n</tr>\n<tr>\n<td>markdown-it-checkbox</td>\n<td>任务列表/复选框</td>\n<td><code>-[x] 任务列表/复选框</code></td>\n<td>-[x] 不支持任务列表/复选框</td>\n</tr>\n</tbody>\n</table>\n<!-- # - 脚注[^1] -->\n<h3 id=\"emoji编码合集\"><a class=\"markdownIt-Anchor\" href=\"#emoji编码合集\"></a> Emoji编码合集</h3>\n<p><a href=\"https://www.emojiall.com/zh-hans#google_vignette\">https://www.emojiall.com/zh-hans#google_vignette</a><br />\n<a href=\"https://emojipedia.org/zh\">https://emojipedia.org/zh</a><br />\n<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">https://www.webfx.com/tools/emoji-cheat-sheet/</a></p>\n<h2 id=\"进阶语法\"><a class=\"markdownIt-Anchor\" href=\"#进阶语法\"></a> 进阶语法</h2>\n<h3 id=\"折叠展开内容\"><a class=\"markdownIt-Anchor\" href=\"#折叠展开内容\"></a> 折叠展开内容</h3>\n<p>语法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++ **点击折叠**</span><br><span class=\"line\">这是被隐藏的内容</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义容器\"><a class=\"markdownIt-Anchor\" href=\"#自定义容器\"></a> 自定义容器</h3>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::: tips</span><br><span class=\"line\">提示</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">::: warning</span><br><span class=\"line\">警告</span><br><span class=\"line\">:::</span><br><span class=\"line\"></span><br><span class=\"line\">::: danger</span><br><span class=\"line\">危险</span><br><span class=\"line\">:::</span><br></pre></td></tr></table></figure>\n<h3 id=\"markdown-it插件\"><a class=\"markdownIt-Anchor\" href=\"#markdown-it插件\"></a> Markdown-it插件</h3>\n<p><a href=\"https://mdit-plugins.github.io/zh/\">https://mdit-plugins.github.io/zh/</a></p>\n"},{"title":"集合在不同语言中的对比：Java、JavaScript、Python","date":"2025-03-10T01:25:46.000Z","_content":"# TODO\n哈希表\n# 概述\n本文对比了Java、JavaScript和Python的集合API方法，包括数组/列表、散列表、哈希表等。\n\n# 数组/列表\n- 数组：\n  - javaScript和Python中的数组是有属性和方法的 \n  - Java中的数组只有属性，没有方法，只能通过Arrays工具类操作数组 \n  - 可以认为javaScript和Python中的数组相当于Java中的数组+Arrays工具类。\n- List:\n  - java中List的API方法很少，很多功能需要借助工具类Collections工具类/Stream实现\n  - javaScript和Python中的数组是有属性和方法的，等价于Java中的List\n\n## 基本操作\n\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|创建集合|int arr[] = {1,2,3};<br>int[] arr = new int[]{1,2,3};<br>int[] arr = new int[10];|Arrays.asList()|var arr =  [1,2,3];<br>var arr = new Array();<br>var arr = new Array(1,2,3);<br>var arr = new Array(3)|list()|\n|头部入栈|\\\\|list.add(0, value);|arr.unshift(value1, value2,..., valueN);<br> arr.splice(0, 0, value1, value2,..., valueN);|arr.insert(0, 1)|\n|尾部入栈|\\\\|list.add(value);<br>list.addAll(collection)|arr.push(value1, value2,..., valueN);|arr.append(1)|\n|头部出栈|\\\\|list.remove(0);|arr.shift();|arr.pop(0)|\n|尾部出栈|\\\\|list.remove(list.size()-1);|arr.pop();|arr.pop()|\n|修改元素|arr[index] = value;|list.set(index, value);|arr[index] = value|\n|替换|\\\\|list.replaceAll(newVal);|arr.fill(newVal)<br>arr.splice(start, deleteCount [,value1,value2,...])|arr[start:end] = [newVal1, newVal2,...]|\n|删除元素|\\\\|list.remove(index);<br>list.remove(value);<br>list.removeAll();<br>list.removeRange();<br>list.removeIf(filter)|arr.splice(start,deleteCount);|del arr[index]|\n|清空列表|\\\\|list.clear();|arr.length = 0|\n|查询长度|arr.length|list.size()|arr.length|len(arr)|\n|是否为空|arr.length == 0|list.isEmpty()|arr.length === 0|len(arr) == 0|\n|访问元素|arr[index]|list.get(index)|arr[index]<br>字符串不能修改，但也不会报错|arr[index]|\n|forEach|借助Stream实现<br>Arrays.stream(arr).forEach(System.out::println);|list.forEach(System.out::println);|arr.forEach(function(value){<br>&nbsp;&nbsp;console.log(value);<br>});|for i in arr:<br>&nbsp;&nbsp;print(i)<br>|\n\njavaScript中直接给arr.length 赋一个新值会导致arr的长度发生变化，使用索引赋值时，索引超过了范围，同样会引起数组长度发生变化。\njavaScript中删除和替换元素使用同一个方法arr.splice(start, deleteCount [,value1,value2...])\n    1. 返回所有被删除元素组成的子数组。\n    2. 插入的元素会排在 start 处元素之前。\n    3. 删除元素从 start 开始，并包含 start 处的元素。\nJava List<Integer>的remove方法只能传下标（无法区分下标和值）\n\n## 查找\n### 根据元素查找\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|元素是否存在|Arrays.asList(arr).contains(value)<br>Arrays.asList(arr).containsAll(collection)|list.contains(value);<br>list.contains(collection)|arr.includes(value)|value in arr|\n|元素位置|Arrays.asList(arr).indexOf(value)<br>Arrays.asList(arr).lastIndexOf(value)|list.indexOf(value)<br>list.lastIndexOf(value)|arr.indexOf(value)<br>arr.lastIndexOf(value)|arr.index(value)<br>arr.rindex(value)|\n|二分查找|Arrays.binarySearch(arr, value)||||\n### 根据条件查找\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|满足条件的元素是否存在|||array.some(callback, thisArg);||\n|第一个满足条件的元素本身|||array.find(callback, thisArg);||\n|第一个满足条件的元素位置|||array.findIndex(callback, thisArg);||\n\nJavaScript中find, findIndex, some方法的第一个参数是回调函数callback(element, index, array)，第二个参数是可选的thisArg。回调函数有三个参数：当前元素、当前索引、原数组。\n\n## 比较\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|判断内容相等|Arrays.equals(arr1, arr2)||arr1.every(function(value, index, arr){<br>&nbsp;&nbsp;return arr2.includes(value);<br>})|arr1==arr2|\n|深层次判断相等|Arrays.deepEquals()||||\n\n## 转换\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|=>String|Arrays.toString(arr)<br>Arrays.deepToString(arr)|list.toString()|String(arr)<br>arr.toString()<br>arr.join()|list(arr)|\n|数组<=>List|Arrays.asList(arr)|list.toArray()|arr.slice()|list(arr)|\n\n## 匹配\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|全部满足条件|Arrays.stream(arr).allMatch(predicate)|list.stream().allMatch(predicate)|arr.every(predicate)|\n|部分满足条件|Arrays.stream(arr).anyMatch(predicate)|list.stream().anyMatch(predicate)|arr.some(predicate)|\n|全部不匹配|Arrays.stream(arr).noneMatch(predicate)|list.stream(arr).noneMatch(predicate)|arr.every(function(value){return !predicate(value);})||\n|返回满足条件的第一个元素|Arrays.stream(arr).filter(predicate).findFirst().orElse(null)|list.stream(arr).filter(predicate).findFirst().orElse(null)|arr.find(predicate)||\n|返回满足条件的任意元素|Arrays.stream(arr).filter(predicate).findAny()|list.stream().filter(predicate).findAny()|arr.filter(predicate)||\n\n## 规约\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|规约|Arrays.stream(arr).reduce(accumulator)<br>Arrays.stream(arr).reduce(identity, accumulator)|list.stream().reduce(accumulator)<br>list.stream().reduce(identity, accumulator)| reduce((total,value,index,arr)=>{return total+value}) |reduce(arr, accumulator)<br>reduce(arr, identity, accumulator)<br>list(arr)|\n|reduceRight|||同reduce||\n\n## 不修改原数组\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----| ----|----|----|\n|拼接|||arr1.concat(arr2)|arr1 + arr2|\n|截取|切片操作符[from:to]<br>Arrays.copyOfRange()|list.subList(start,length)|arr.slice(from,to)|arr[from:to:step]|\n|浅拷贝|Arrays.copyOfRange(arr,from,to)<br>Arrays.copyOf(arr,newLength)<br>Arrays.copyOf(arr,newLength,newType)|Collections.copy(to,from);<br>list2 = new ArrayList<>(list1); |||\n\n执行Collections.copy前，必须手动把list2的长度增加到10，否则拷贝了之后list2长度仍是0\n## 修改原数组\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|排序|Arrays.sort(arr)<br>Arrays.sort(arr,from,to)<br>Arrays.sort(arr,comparator)<br>Arrays.sort(arr,from,to,comparator)<br>Collections.sort(arr);|list.sort()<br>list.sort(comparator)|arr.sort()<br>arr.sort(compareFunction)||\n|并行排序|Arrays.parallelSort(arr)<br>Arrays.parallelSort(arr, from, to)<br>Arrays.parallelSort(arr,comparator)<br>Arrays.parallelSort(arr,from,to,comparator)|list.parallelSort()<br>list.parallelSort(comparator)|||\n|反转|Arrays.reverse(arr)|Collections.reverse(list)|arr.reverse()|arr.reverse()|\n|填充|Arrays.fill(arr,value)<br>Arrays.fill(arr, fromIndex, toIndex, value)||||\n|拼接|||arr1.splice(index, 0, arr2)||\n|保留||list.retainAll()|||\n\n# Set\n## 基本操作\n|操作|Java Set|JavaScript Set|Python Set|\n|----|----|----|----|\n|创建集合|Set<String> set = new HashSet<>();<br>Set<String> set = new LinkedHashSet<>();|var set = new Set();|set()|\n|添加元素|set.add(value);<br>set.addAll()|set.add(value);|set.add(value)|\n|删除元素|set.remove(value);<br>set.removeAll()|set.delete(value);|set.remove(value)<br>set.discard(value)|\n|判断元素是否存在|set.contains(value);<br>set.containsAll()|set.has(value);|value in set|\n|清空集合|set.clear();|set.clear();|set.clear()|\n|查询长度|set.size();|set.size();|len(set)|\n|是否为空|set.isEmpty();|set.size() === 0|len(set) == 0|\n\n## 集合运算\n|操作|Java Set|JavaScript Set|Python Set|\n|----|----|----|----|\n|交集||set1.intersection(set2);|set1.intersection(set2)<br>set1 & set2|\n|交集更新|set1.retainAll(set2);||set1.intersection_update(set2)|\n|并集||set1.union(set2);|set1.union(set2)<br>set1 \\| set2|\n|并集更新|set1.addAll(set2);|||\n|差集||set1.difference(set2);|set1.difference(set2)<br>set1 - set2|\n|差集更新|set1.removeAll(set2);||set1.difference_update(set2)|\n|对称差集||set1.symmetricDifference(set2);|symmetric_difference()<br>set1 ^ set2|\n|对称差集更新|||symmetric_difference_update()|\n|子集|set2.containsAll(set1);|set1.isSubsetOf(set2);|set1.issubset(set2)<br>set1 <= set2|\n|超集|set1.containsAll(set2);|set1.isSupersetOf(set2);|set1.issuperset(set2)<br>set1 >= set2|\n|不相交|set1.disjoint(set2);|set1.isDisjoint(set2);|set1.isdisjoint(set2)|\n","source":"_posts/【语言对比】集合.md","raw":"---\ntitle: 集合在不同语言中的对比：Java、JavaScript、Python\ndate: 2025-03-10 09:25:46\ntags:\n  - 语言对比\n  - 集合\n  - Python\n  - Java\n  - JavaScript\ncategories:\n  - 语言对比\n---\n# TODO\n哈希表\n# 概述\n本文对比了Java、JavaScript和Python的集合API方法，包括数组/列表、散列表、哈希表等。\n\n# 数组/列表\n- 数组：\n  - javaScript和Python中的数组是有属性和方法的 \n  - Java中的数组只有属性，没有方法，只能通过Arrays工具类操作数组 \n  - 可以认为javaScript和Python中的数组相当于Java中的数组+Arrays工具类。\n- List:\n  - java中List的API方法很少，很多功能需要借助工具类Collections工具类/Stream实现\n  - javaScript和Python中的数组是有属性和方法的，等价于Java中的List\n\n## 基本操作\n\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|创建集合|int arr[] = {1,2,3};<br>int[] arr = new int[]{1,2,3};<br>int[] arr = new int[10];|Arrays.asList()|var arr =  [1,2,3];<br>var arr = new Array();<br>var arr = new Array(1,2,3);<br>var arr = new Array(3)|list()|\n|头部入栈|\\\\|list.add(0, value);|arr.unshift(value1, value2,..., valueN);<br> arr.splice(0, 0, value1, value2,..., valueN);|arr.insert(0, 1)|\n|尾部入栈|\\\\|list.add(value);<br>list.addAll(collection)|arr.push(value1, value2,..., valueN);|arr.append(1)|\n|头部出栈|\\\\|list.remove(0);|arr.shift();|arr.pop(0)|\n|尾部出栈|\\\\|list.remove(list.size()-1);|arr.pop();|arr.pop()|\n|修改元素|arr[index] = value;|list.set(index, value);|arr[index] = value|\n|替换|\\\\|list.replaceAll(newVal);|arr.fill(newVal)<br>arr.splice(start, deleteCount [,value1,value2,...])|arr[start:end] = [newVal1, newVal2,...]|\n|删除元素|\\\\|list.remove(index);<br>list.remove(value);<br>list.removeAll();<br>list.removeRange();<br>list.removeIf(filter)|arr.splice(start,deleteCount);|del arr[index]|\n|清空列表|\\\\|list.clear();|arr.length = 0|\n|查询长度|arr.length|list.size()|arr.length|len(arr)|\n|是否为空|arr.length == 0|list.isEmpty()|arr.length === 0|len(arr) == 0|\n|访问元素|arr[index]|list.get(index)|arr[index]<br>字符串不能修改，但也不会报错|arr[index]|\n|forEach|借助Stream实现<br>Arrays.stream(arr).forEach(System.out::println);|list.forEach(System.out::println);|arr.forEach(function(value){<br>&nbsp;&nbsp;console.log(value);<br>});|for i in arr:<br>&nbsp;&nbsp;print(i)<br>|\n\njavaScript中直接给arr.length 赋一个新值会导致arr的长度发生变化，使用索引赋值时，索引超过了范围，同样会引起数组长度发生变化。\njavaScript中删除和替换元素使用同一个方法arr.splice(start, deleteCount [,value1,value2...])\n    1. 返回所有被删除元素组成的子数组。\n    2. 插入的元素会排在 start 处元素之前。\n    3. 删除元素从 start 开始，并包含 start 处的元素。\nJava List<Integer>的remove方法只能传下标（无法区分下标和值）\n\n## 查找\n### 根据元素查找\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|元素是否存在|Arrays.asList(arr).contains(value)<br>Arrays.asList(arr).containsAll(collection)|list.contains(value);<br>list.contains(collection)|arr.includes(value)|value in arr|\n|元素位置|Arrays.asList(arr).indexOf(value)<br>Arrays.asList(arr).lastIndexOf(value)|list.indexOf(value)<br>list.lastIndexOf(value)|arr.indexOf(value)<br>arr.lastIndexOf(value)|arr.index(value)<br>arr.rindex(value)|\n|二分查找|Arrays.binarySearch(arr, value)||||\n### 根据条件查找\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|满足条件的元素是否存在|||array.some(callback, thisArg);||\n|第一个满足条件的元素本身|||array.find(callback, thisArg);||\n|第一个满足条件的元素位置|||array.findIndex(callback, thisArg);||\n\nJavaScript中find, findIndex, some方法的第一个参数是回调函数callback(element, index, array)，第二个参数是可选的thisArg。回调函数有三个参数：当前元素、当前索引、原数组。\n\n## 比较\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|判断内容相等|Arrays.equals(arr1, arr2)||arr1.every(function(value, index, arr){<br>&nbsp;&nbsp;return arr2.includes(value);<br>})|arr1==arr2|\n|深层次判断相等|Arrays.deepEquals()||||\n\n## 转换\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|=>String|Arrays.toString(arr)<br>Arrays.deepToString(arr)|list.toString()|String(arr)<br>arr.toString()<br>arr.join()|list(arr)|\n|数组<=>List|Arrays.asList(arr)|list.toArray()|arr.slice()|list(arr)|\n\n## 匹配\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|全部满足条件|Arrays.stream(arr).allMatch(predicate)|list.stream().allMatch(predicate)|arr.every(predicate)|\n|部分满足条件|Arrays.stream(arr).anyMatch(predicate)|list.stream().anyMatch(predicate)|arr.some(predicate)|\n|全部不匹配|Arrays.stream(arr).noneMatch(predicate)|list.stream(arr).noneMatch(predicate)|arr.every(function(value){return !predicate(value);})||\n|返回满足条件的第一个元素|Arrays.stream(arr).filter(predicate).findFirst().orElse(null)|list.stream(arr).filter(predicate).findFirst().orElse(null)|arr.find(predicate)||\n|返回满足条件的任意元素|Arrays.stream(arr).filter(predicate).findAny()|list.stream().filter(predicate).findAny()|arr.filter(predicate)||\n\n## 规约\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|规约|Arrays.stream(arr).reduce(accumulator)<br>Arrays.stream(arr).reduce(identity, accumulator)|list.stream().reduce(accumulator)<br>list.stream().reduce(identity, accumulator)| reduce((total,value,index,arr)=>{return total+value}) |reduce(arr, accumulator)<br>reduce(arr, identity, accumulator)<br>list(arr)|\n|reduceRight|||同reduce||\n\n## 不修改原数组\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----| ----|----|----|\n|拼接|||arr1.concat(arr2)|arr1 + arr2|\n|截取|切片操作符[from:to]<br>Arrays.copyOfRange()|list.subList(start,length)|arr.slice(from,to)|arr[from:to:step]|\n|浅拷贝|Arrays.copyOfRange(arr,from,to)<br>Arrays.copyOf(arr,newLength)<br>Arrays.copyOf(arr,newLength,newType)|Collections.copy(to,from);<br>list2 = new ArrayList<>(list1); |||\n\n执行Collections.copy前，必须手动把list2的长度增加到10，否则拷贝了之后list2长度仍是0\n## 修改原数组\n|操作|Java数组|Java List|JavaScript数组|Python数组|\n|----|----|----|----|----|\n|排序|Arrays.sort(arr)<br>Arrays.sort(arr,from,to)<br>Arrays.sort(arr,comparator)<br>Arrays.sort(arr,from,to,comparator)<br>Collections.sort(arr);|list.sort()<br>list.sort(comparator)|arr.sort()<br>arr.sort(compareFunction)||\n|并行排序|Arrays.parallelSort(arr)<br>Arrays.parallelSort(arr, from, to)<br>Arrays.parallelSort(arr,comparator)<br>Arrays.parallelSort(arr,from,to,comparator)|list.parallelSort()<br>list.parallelSort(comparator)|||\n|反转|Arrays.reverse(arr)|Collections.reverse(list)|arr.reverse()|arr.reverse()|\n|填充|Arrays.fill(arr,value)<br>Arrays.fill(arr, fromIndex, toIndex, value)||||\n|拼接|||arr1.splice(index, 0, arr2)||\n|保留||list.retainAll()|||\n\n# Set\n## 基本操作\n|操作|Java Set|JavaScript Set|Python Set|\n|----|----|----|----|\n|创建集合|Set<String> set = new HashSet<>();<br>Set<String> set = new LinkedHashSet<>();|var set = new Set();|set()|\n|添加元素|set.add(value);<br>set.addAll()|set.add(value);|set.add(value)|\n|删除元素|set.remove(value);<br>set.removeAll()|set.delete(value);|set.remove(value)<br>set.discard(value)|\n|判断元素是否存在|set.contains(value);<br>set.containsAll()|set.has(value);|value in set|\n|清空集合|set.clear();|set.clear();|set.clear()|\n|查询长度|set.size();|set.size();|len(set)|\n|是否为空|set.isEmpty();|set.size() === 0|len(set) == 0|\n\n## 集合运算\n|操作|Java Set|JavaScript Set|Python Set|\n|----|----|----|----|\n|交集||set1.intersection(set2);|set1.intersection(set2)<br>set1 & set2|\n|交集更新|set1.retainAll(set2);||set1.intersection_update(set2)|\n|并集||set1.union(set2);|set1.union(set2)<br>set1 \\| set2|\n|并集更新|set1.addAll(set2);|||\n|差集||set1.difference(set2);|set1.difference(set2)<br>set1 - set2|\n|差集更新|set1.removeAll(set2);||set1.difference_update(set2)|\n|对称差集||set1.symmetricDifference(set2);|symmetric_difference()<br>set1 ^ set2|\n|对称差集更新|||symmetric_difference_update()|\n|子集|set2.containsAll(set1);|set1.isSubsetOf(set2);|set1.issubset(set2)<br>set1 <= set2|\n|超集|set1.containsAll(set2);|set1.isSupersetOf(set2);|set1.issuperset(set2)<br>set1 >= set2|\n|不相交|set1.disjoint(set2);|set1.isDisjoint(set2);|set1.isdisjoint(set2)|\n","slug":"【语言对比】集合","published":1,"updated":"2025-05-06T05:36:30.578Z","_id":"cm8o1f16l000r64v44b87ftmd","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"todo\"><a class=\"markdownIt-Anchor\" href=\"#todo\"></a> TODO</h1>\n<p>哈希表</p>\n<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h1>\n<p>本文对比了Java、JavaScript和Python的集合API方法，包括数组/列表、散列表、哈希表等。</p>\n<h1 id=\"数组列表\"><a class=\"markdownIt-Anchor\" href=\"#数组列表\"></a> 数组/列表</h1>\n<ul>\n<li>数组：\n<ul>\n<li>javaScript和Python中的数组是有属性和方法的</li>\n<li>Java中的数组只有属性，没有方法，只能通过Arrays工具类操作数组</li>\n<li>可以认为javaScript和Python中的数组相当于Java中的数组+Arrays工具类。</li>\n</ul>\n</li>\n<li>List:\n<ul>\n<li>java中List的API方法很少，很多功能需要借助工具类Collections工具类/Stream实现</li>\n<li>javaScript和Python中的数组是有属性和方法的，等价于Java中的List</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\"></a> 基本操作</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建集合</td>\n<td>int arr[] = {1,2,3};<br>int[] arr = new int[]{1,2,3};<br>int[] arr = new int[10];</td>\n<td>Arrays.asList()</td>\n<td>var arr =  [1,2,3];<br>var arr = new Array();<br>var arr = new Array(1,2,3);<br>var arr = new Array(3)</td>\n<td>list()</td>\n</tr>\n<tr>\n<td>头部入栈</td>\n<td>|list.add(0, value);</td>\n<td>arr.unshift(value1, value2,…, valueN);<br> arr.splice(0, 0, value1, value2,…, valueN);</td>\n<td>arr.insert(0, 1)</td>\n<td></td>\n</tr>\n<tr>\n<td>尾部入栈</td>\n<td>|list.add(value);<br>list.addAll(collection)</td>\n<td>arr.push(value1, value2,…, valueN);</td>\n<td>arr.append(1)</td>\n<td></td>\n</tr>\n<tr>\n<td>头部出栈</td>\n<td>|list.remove(0);</td>\n<td>arr.shift();</td>\n<td>arr.pop(0)</td>\n<td></td>\n</tr>\n<tr>\n<td>尾部出栈</td>\n<td>|list.remove(list.size()-1);</td>\n<td>arr.pop();</td>\n<td>arr.pop()</td>\n<td></td>\n</tr>\n<tr>\n<td>修改元素</td>\n<td>arr[index] = value;</td>\n<td>list.set(index, value);</td>\n<td>arr[index] = value</td>\n<td></td>\n</tr>\n<tr>\n<td>替换</td>\n<td>|list.replaceAll(newVal);</td>\n<td>arr.fill(newVal)<br>arr.splice(start, deleteCount [,value1,value2,…])</td>\n<td>arr[start:end] = [newVal1, newVal2,…]</td>\n<td></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td>|list.remove(index);<br>list.remove(value);<br>list.removeAll();<br>list.removeRange();<br>list.removeIf(filter)</td>\n<td>arr.splice(start,deleteCount);</td>\n<td>del arr[index]</td>\n<td></td>\n</tr>\n<tr>\n<td>清空列表</td>\n<td>|list.clear();</td>\n<td>arr.length = 0</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>查询长度</td>\n<td>arr.length</td>\n<td>list.size()</td>\n<td>arr.length</td>\n<td>len(arr)</td>\n</tr>\n<tr>\n<td>是否为空</td>\n<td>arr.length == 0</td>\n<td>list.isEmpty()</td>\n<td>arr.length === 0</td>\n<td>len(arr) == 0</td>\n</tr>\n<tr>\n<td>访问元素</td>\n<td>arr[index]</td>\n<td>list.get(index)</td>\n<td>arr[index]<br>字符串不能修改，但也不会报错</td>\n<td>arr[index]</td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>借助Stream实现<br>Arrays.stream(arr).forEach(System.out::println);</td>\n<td>list.forEach(System.out::println);</td>\n<td>arr.forEach(function(value){<br>  console.log(value);<br>});</td>\n<td>for i in arr:<br>  print(i)<br></td>\n</tr>\n</tbody>\n</table>\n<p>javaScript中直接给arr.length 赋一个新值会导致arr的长度发生变化，使用索引赋值时，索引超过了范围，同样会引起数组长度发生变化。<br />\njavaScript中删除和替换元素使用同一个方法arr.splice(start, deleteCount [,value1,value2…])<br />\n1. 返回所有被删除元素组成的子数组。<br />\n2. 插入的元素会排在 start 处元素之前。<br />\n3. 删除元素从 start 开始，并包含 start 处的元素。<br />\nJava List<Integer>的remove方法只能传下标（无法区分下标和值）</p>\n<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h2>\n<h3 id=\"根据元素查找\"><a class=\"markdownIt-Anchor\" href=\"#根据元素查找\"></a> 根据元素查找</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>元素是否存在</td>\n<td>Arrays.asList(arr).contains(value)<br>Arrays.asList(arr).containsAll(collection)</td>\n<td>list.contains(value);<br>list.contains(collection)</td>\n<td>arr.includes(value)</td>\n<td>value in arr</td>\n</tr>\n<tr>\n<td>元素位置</td>\n<td>Arrays.asList(arr).indexOf(value)<br>Arrays.asList(arr).lastIndexOf(value)</td>\n<td>list.indexOf(value)<br>list.lastIndexOf(value)</td>\n<td>arr.indexOf(value)<br>arr.lastIndexOf(value)</td>\n<td>arr.index(value)<br>arr.rindex(value)</td>\n</tr>\n<tr>\n<td>二分查找</td>\n<td>Arrays.binarySearch(arr, value)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"根据条件查找\"><a class=\"markdownIt-Anchor\" href=\"#根据条件查找\"></a> 根据条件查找</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>满足条件的元素是否存在</td>\n<td></td>\n<td></td>\n<td>array.some(callback, thisArg);</td>\n<td></td>\n</tr>\n<tr>\n<td>第一个满足条件的元素本身</td>\n<td></td>\n<td></td>\n<td>array.find(callback, thisArg);</td>\n<td></td>\n</tr>\n<tr>\n<td>第一个满足条件的元素位置</td>\n<td></td>\n<td></td>\n<td>array.findIndex(callback, thisArg);</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>JavaScript中find, findIndex, some方法的第一个参数是回调函数callback(element, index, array)，第二个参数是可选的thisArg。回调函数有三个参数：当前元素、当前索引、原数组。</p>\n<h2 id=\"比较\"><a class=\"markdownIt-Anchor\" href=\"#比较\"></a> 比较</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判断内容相等</td>\n<td>Arrays.equals(arr1, arr2)</td>\n<td></td>\n<td>arr1.every(function(value, index, arr){<br>  return arr2.includes(value);<br>})</td>\n<td>arr1==arr2</td>\n</tr>\n<tr>\n<td>深层次判断相等</td>\n<td>Arrays.deepEquals()</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"转换\"><a class=\"markdownIt-Anchor\" href=\"#转换\"></a> 转换</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=&gt;String</td>\n<td>Arrays.toString(arr)<br>Arrays.deepToString(arr)</td>\n<td>list.toString()</td>\n<td>String(arr)<br>arr.toString()<br>arr.join()</td>\n<td>list(arr)</td>\n</tr>\n<tr>\n<td>数组&lt;=&gt;List</td>\n<td>Arrays.asList(arr)</td>\n<td>list.toArray()</td>\n<td>arr.slice()</td>\n<td>list(arr)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"匹配\"><a class=\"markdownIt-Anchor\" href=\"#匹配\"></a> 匹配</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全部满足条件</td>\n<td>Arrays.stream(arr).allMatch(predicate)</td>\n<td>list.stream().allMatch(predicate)</td>\n<td>arr.every(predicate)</td>\n<td></td>\n</tr>\n<tr>\n<td>部分满足条件</td>\n<td>Arrays.stream(arr).anyMatch(predicate)</td>\n<td>list.stream().anyMatch(predicate)</td>\n<td>arr.some(predicate)</td>\n<td></td>\n</tr>\n<tr>\n<td>全部不匹配</td>\n<td>Arrays.stream(arr).noneMatch(predicate)</td>\n<td>list.stream(arr).noneMatch(predicate)</td>\n<td>arr.every(function(value){return !predicate(value);})</td>\n<td></td>\n</tr>\n<tr>\n<td>返回满足条件的第一个元素</td>\n<td>Arrays.stream(arr).filter(predicate).findFirst().orElse(null)</td>\n<td>list.stream(arr).filter(predicate).findFirst().orElse(null)</td>\n<td>arr.find(predicate)</td>\n<td></td>\n</tr>\n<tr>\n<td>返回满足条件的任意元素</td>\n<td>Arrays.stream(arr).filter(predicate).findAny()</td>\n<td>list.stream().filter(predicate).findAny()</td>\n<td>arr.filter(predicate)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"规约\"><a class=\"markdownIt-Anchor\" href=\"#规约\"></a> 规约</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>规约</td>\n<td>Arrays.stream(arr).reduce(accumulator)<br>Arrays.stream(arr).reduce(identity, accumulator)</td>\n<td>list.stream().reduce(accumulator)<br>list.stream().reduce(identity, accumulator)</td>\n<td>reduce((total,value,index,arr)=&gt;{return total+value})</td>\n<td>reduce(arr, accumulator)<br>reduce(arr, identity, accumulator)<br>list(arr)</td>\n</tr>\n<tr>\n<td>reduceRight</td>\n<td></td>\n<td></td>\n<td>同reduce</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"不修改原数组\"><a class=\"markdownIt-Anchor\" href=\"#不修改原数组\"></a> 不修改原数组</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>拼接</td>\n<td></td>\n<td></td>\n<td>arr1.concat(arr2)</td>\n<td>arr1 + arr2</td>\n</tr>\n<tr>\n<td>截取</td>\n<td>切片操作符[from:to]<br>Arrays.copyOfRange()</td>\n<td>list.subList(start,length)</td>\n<td>arr.slice(from,to)</td>\n<td>arr[from:to:step]</td>\n</tr>\n<tr>\n<td>浅拷贝</td>\n<td>Arrays.copyOfRange(arr,from,to)<br>Arrays.copyOf(arr,newLength)<br>Arrays.copyOf(arr,newLength,newType)</td>\n<td>Collections.copy(to,from);<br>list2 = new ArrayList&lt;&gt;(list1);</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>执行Collections.copy前，必须手动把list2的长度增加到10，否则拷贝了之后list2长度仍是0</p>\n<h2 id=\"修改原数组\"><a class=\"markdownIt-Anchor\" href=\"#修改原数组\"></a> 修改原数组</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排序</td>\n<td>Arrays.sort(arr)<br>Arrays.sort(arr,from,to)<br>Arrays.sort(arr,comparator)<br>Arrays.sort(arr,from,to,comparator)<br>Collections.sort(arr);</td>\n<td>list.sort()<br>list.sort(comparator)</td>\n<td>arr.sort()<br>arr.sort(compareFunction)</td>\n<td></td>\n</tr>\n<tr>\n<td>并行排序</td>\n<td>Arrays.parallelSort(arr)<br>Arrays.parallelSort(arr, from, to)<br>Arrays.parallelSort(arr,comparator)<br>Arrays.parallelSort(arr,from,to,comparator)</td>\n<td>list.parallelSort()<br>list.parallelSort(comparator)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>反转</td>\n<td>Arrays.reverse(arr)</td>\n<td>Collections.reverse(list)</td>\n<td>arr.reverse()</td>\n<td>arr.reverse()</td>\n</tr>\n<tr>\n<td>填充</td>\n<td>Arrays.fill(arr,value)<br>Arrays.fill(arr, fromIndex, toIndex, value)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>拼接</td>\n<td></td>\n<td></td>\n<td>arr1.splice(index, 0, arr2)</td>\n<td></td>\n</tr>\n<tr>\n<td>保留</td>\n<td></td>\n<td>list.retainAll()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> Set</h1>\n<h2 id=\"基本操作-2\"><a class=\"markdownIt-Anchor\" href=\"#基本操作-2\"></a> 基本操作</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java Set</th>\n<th>JavaScript Set</th>\n<th>Python Set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建集合</td>\n<td>Set<String> set = new HashSet&lt;&gt;();<br>Set<String> set = new LinkedHashSet&lt;&gt;();</td>\n<td>var set = new Set();</td>\n<td>set()</td>\n</tr>\n<tr>\n<td>添加元素</td>\n<td>set.add(value);<br>set.addAll()</td>\n<td>set.add(value);</td>\n<td>set.add(value)</td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td>set.remove(value);<br>set.removeAll()</td>\n<td>set.delete(value);</td>\n<td>set.remove(value)<br>set.discard(value)</td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td>set.contains(value);<br>set.containsAll()</td>\n<td>set.has(value);</td>\n<td>value in set</td>\n</tr>\n<tr>\n<td>清空集合</td>\n<td>set.clear();</td>\n<td>set.clear();</td>\n<td>set.clear()</td>\n</tr>\n<tr>\n<td>查询长度</td>\n<td>set.size();</td>\n<td>set.size();</td>\n<td>len(set)</td>\n</tr>\n<tr>\n<td>是否为空</td>\n<td>set.isEmpty();</td>\n<td>set.size() === 0</td>\n<td>len(set) == 0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集合运算\"><a class=\"markdownIt-Anchor\" href=\"#集合运算\"></a> 集合运算</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java Set</th>\n<th>JavaScript Set</th>\n<th>Python Set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>交集</td>\n<td></td>\n<td>set1.intersection(set2);</td>\n<td>set1.intersection(set2)<br>set1 &amp; set2</td>\n</tr>\n<tr>\n<td>交集更新</td>\n<td>set1.retainAll(set2);</td>\n<td></td>\n<td>set1.intersection_update(set2)</td>\n</tr>\n<tr>\n<td>并集</td>\n<td></td>\n<td>set1.union(set2);</td>\n<td>set1.union(set2)<br>set1 | set2</td>\n</tr>\n<tr>\n<td>并集更新</td>\n<td>set1.addAll(set2);</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>差集</td>\n<td></td>\n<td>set1.difference(set2);</td>\n<td>set1.difference(set2)<br>set1 - set2</td>\n</tr>\n<tr>\n<td>差集更新</td>\n<td>set1.removeAll(set2);</td>\n<td></td>\n<td>set1.difference_update(set2)</td>\n</tr>\n<tr>\n<td>对称差集</td>\n<td></td>\n<td>set1.symmetricDifference(set2);</td>\n<td>symmetric_difference()<br>set1 ^ set2</td>\n</tr>\n<tr>\n<td>对称差集更新</td>\n<td></td>\n<td></td>\n<td>symmetric_difference_update()</td>\n</tr>\n<tr>\n<td>子集</td>\n<td>set2.containsAll(set1);</td>\n<td>set1.isSubsetOf(set2);</td>\n<td>set1.issubset(set2)<br>set1 &lt;= set2</td>\n</tr>\n<tr>\n<td>超集</td>\n<td>set1.containsAll(set2);</td>\n<td>set1.isSupersetOf(set2);</td>\n<td>set1.issuperset(set2)<br>set1 &gt;= set2</td>\n</tr>\n<tr>\n<td>不相交</td>\n<td>set1.disjoint(set2);</td>\n<td>set1.isDisjoint(set2);</td>\n<td>set1.isdisjoint(set2)</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h1 id=\"todo\"><a class=\"markdownIt-Anchor\" href=\"#todo\"></a> TODO</h1>\n<p>哈希表</p>\n<h1 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h1>\n<p>本文对比了Java、JavaScript和Python的集合API方法，包括数组/列表、散列表、哈希表等。</p>\n<h1 id=\"数组列表\"><a class=\"markdownIt-Anchor\" href=\"#数组列表\"></a> 数组/列表</h1>\n<ul>\n<li>数组：\n<ul>\n<li>javaScript和Python中的数组是有属性和方法的</li>\n<li>Java中的数组只有属性，没有方法，只能通过Arrays工具类操作数组</li>\n<li>可以认为javaScript和Python中的数组相当于Java中的数组+Arrays工具类。</li>\n</ul>\n</li>\n<li>List:\n<ul>\n<li>java中List的API方法很少，很多功能需要借助工具类Collections工具类/Stream实现</li>\n<li>javaScript和Python中的数组是有属性和方法的，等价于Java中的List</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\"></a> 基本操作</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建集合</td>\n<td>int arr[] = {1,2,3};<br>int[] arr = new int[]{1,2,3};<br>int[] arr = new int[10];</td>\n<td>Arrays.asList()</td>\n<td>var arr =  [1,2,3];<br>var arr = new Array();<br>var arr = new Array(1,2,3);<br>var arr = new Array(3)</td>\n<td>list()</td>\n</tr>\n<tr>\n<td>头部入栈</td>\n<td>|list.add(0, value);</td>\n<td>arr.unshift(value1, value2,…, valueN);<br> arr.splice(0, 0, value1, value2,…, valueN);</td>\n<td>arr.insert(0, 1)</td>\n<td></td>\n</tr>\n<tr>\n<td>尾部入栈</td>\n<td>|list.add(value);<br>list.addAll(collection)</td>\n<td>arr.push(value1, value2,…, valueN);</td>\n<td>arr.append(1)</td>\n<td></td>\n</tr>\n<tr>\n<td>头部出栈</td>\n<td>|list.remove(0);</td>\n<td>arr.shift();</td>\n<td>arr.pop(0)</td>\n<td></td>\n</tr>\n<tr>\n<td>尾部出栈</td>\n<td>|list.remove(list.size()-1);</td>\n<td>arr.pop();</td>\n<td>arr.pop()</td>\n<td></td>\n</tr>\n<tr>\n<td>修改元素</td>\n<td>arr[index] = value;</td>\n<td>list.set(index, value);</td>\n<td>arr[index] = value</td>\n<td></td>\n</tr>\n<tr>\n<td>替换</td>\n<td>|list.replaceAll(newVal);</td>\n<td>arr.fill(newVal)<br>arr.splice(start, deleteCount [,value1,value2,…])</td>\n<td>arr[start:end] = [newVal1, newVal2,…]</td>\n<td></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td>|list.remove(index);<br>list.remove(value);<br>list.removeAll();<br>list.removeRange();<br>list.removeIf(filter)</td>\n<td>arr.splice(start,deleteCount);</td>\n<td>del arr[index]</td>\n<td></td>\n</tr>\n<tr>\n<td>清空列表</td>\n<td>|list.clear();</td>\n<td>arr.length = 0</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>查询长度</td>\n<td>arr.length</td>\n<td>list.size()</td>\n<td>arr.length</td>\n<td>len(arr)</td>\n</tr>\n<tr>\n<td>是否为空</td>\n<td>arr.length == 0</td>\n<td>list.isEmpty()</td>\n<td>arr.length === 0</td>\n<td>len(arr) == 0</td>\n</tr>\n<tr>\n<td>访问元素</td>\n<td>arr[index]</td>\n<td>list.get(index)</td>\n<td>arr[index]<br>字符串不能修改，但也不会报错</td>\n<td>arr[index]</td>\n</tr>\n<tr>\n<td>forEach</td>\n<td>借助Stream实现<br>Arrays.stream(arr).forEach(System.out::println);</td>\n<td>list.forEach(System.out::println);</td>\n<td>arr.forEach(function(value){<br>  console.log(value);<br>});</td>\n<td>for i in arr:<br>  print(i)<br></td>\n</tr>\n</tbody>\n</table>\n<p>javaScript中直接给arr.length 赋一个新值会导致arr的长度发生变化，使用索引赋值时，索引超过了范围，同样会引起数组长度发生变化。<br />\njavaScript中删除和替换元素使用同一个方法arr.splice(start, deleteCount [,value1,value2…])<br />\n1. 返回所有被删除元素组成的子数组。<br />\n2. 插入的元素会排在 start 处元素之前。<br />\n3. 删除元素从 start 开始，并包含 start 处的元素。<br />\nJava List<Integer>的remove方法只能传下标（无法区分下标和值）</p>\n<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h2>\n<h3 id=\"根据元素查找\"><a class=\"markdownIt-Anchor\" href=\"#根据元素查找\"></a> 根据元素查找</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>元素是否存在</td>\n<td>Arrays.asList(arr).contains(value)<br>Arrays.asList(arr).containsAll(collection)</td>\n<td>list.contains(value);<br>list.contains(collection)</td>\n<td>arr.includes(value)</td>\n<td>value in arr</td>\n</tr>\n<tr>\n<td>元素位置</td>\n<td>Arrays.asList(arr).indexOf(value)<br>Arrays.asList(arr).lastIndexOf(value)</td>\n<td>list.indexOf(value)<br>list.lastIndexOf(value)</td>\n<td>arr.indexOf(value)<br>arr.lastIndexOf(value)</td>\n<td>arr.index(value)<br>arr.rindex(value)</td>\n</tr>\n<tr>\n<td>二分查找</td>\n<td>Arrays.binarySearch(arr, value)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"根据条件查找\"><a class=\"markdownIt-Anchor\" href=\"#根据条件查找\"></a> 根据条件查找</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>满足条件的元素是否存在</td>\n<td></td>\n<td></td>\n<td>array.some(callback, thisArg);</td>\n<td></td>\n</tr>\n<tr>\n<td>第一个满足条件的元素本身</td>\n<td></td>\n<td></td>\n<td>array.find(callback, thisArg);</td>\n<td></td>\n</tr>\n<tr>\n<td>第一个满足条件的元素位置</td>\n<td></td>\n<td></td>\n<td>array.findIndex(callback, thisArg);</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>JavaScript中find, findIndex, some方法的第一个参数是回调函数callback(element, index, array)，第二个参数是可选的thisArg。回调函数有三个参数：当前元素、当前索引、原数组。</p>\n<h2 id=\"比较\"><a class=\"markdownIt-Anchor\" href=\"#比较\"></a> 比较</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>判断内容相等</td>\n<td>Arrays.equals(arr1, arr2)</td>\n<td></td>\n<td>arr1.every(function(value, index, arr){<br>  return arr2.includes(value);<br>})</td>\n<td>arr1==arr2</td>\n</tr>\n<tr>\n<td>深层次判断相等</td>\n<td>Arrays.deepEquals()</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"转换\"><a class=\"markdownIt-Anchor\" href=\"#转换\"></a> 转换</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=&gt;String</td>\n<td>Arrays.toString(arr)<br>Arrays.deepToString(arr)</td>\n<td>list.toString()</td>\n<td>String(arr)<br>arr.toString()<br>arr.join()</td>\n<td>list(arr)</td>\n</tr>\n<tr>\n<td>数组&lt;=&gt;List</td>\n<td>Arrays.asList(arr)</td>\n<td>list.toArray()</td>\n<td>arr.slice()</td>\n<td>list(arr)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"匹配\"><a class=\"markdownIt-Anchor\" href=\"#匹配\"></a> 匹配</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全部满足条件</td>\n<td>Arrays.stream(arr).allMatch(predicate)</td>\n<td>list.stream().allMatch(predicate)</td>\n<td>arr.every(predicate)</td>\n<td></td>\n</tr>\n<tr>\n<td>部分满足条件</td>\n<td>Arrays.stream(arr).anyMatch(predicate)</td>\n<td>list.stream().anyMatch(predicate)</td>\n<td>arr.some(predicate)</td>\n<td></td>\n</tr>\n<tr>\n<td>全部不匹配</td>\n<td>Arrays.stream(arr).noneMatch(predicate)</td>\n<td>list.stream(arr).noneMatch(predicate)</td>\n<td>arr.every(function(value){return !predicate(value);})</td>\n<td></td>\n</tr>\n<tr>\n<td>返回满足条件的第一个元素</td>\n<td>Arrays.stream(arr).filter(predicate).findFirst().orElse(null)</td>\n<td>list.stream(arr).filter(predicate).findFirst().orElse(null)</td>\n<td>arr.find(predicate)</td>\n<td></td>\n</tr>\n<tr>\n<td>返回满足条件的任意元素</td>\n<td>Arrays.stream(arr).filter(predicate).findAny()</td>\n<td>list.stream().filter(predicate).findAny()</td>\n<td>arr.filter(predicate)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"规约\"><a class=\"markdownIt-Anchor\" href=\"#规约\"></a> 规约</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>规约</td>\n<td>Arrays.stream(arr).reduce(accumulator)<br>Arrays.stream(arr).reduce(identity, accumulator)</td>\n<td>list.stream().reduce(accumulator)<br>list.stream().reduce(identity, accumulator)</td>\n<td>reduce((total,value,index,arr)=&gt;{return total+value})</td>\n<td>reduce(arr, accumulator)<br>reduce(arr, identity, accumulator)<br>list(arr)</td>\n</tr>\n<tr>\n<td>reduceRight</td>\n<td></td>\n<td></td>\n<td>同reduce</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"不修改原数组\"><a class=\"markdownIt-Anchor\" href=\"#不修改原数组\"></a> 不修改原数组</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>拼接</td>\n<td></td>\n<td></td>\n<td>arr1.concat(arr2)</td>\n<td>arr1 + arr2</td>\n</tr>\n<tr>\n<td>截取</td>\n<td>切片操作符[from:to]<br>Arrays.copyOfRange()</td>\n<td>list.subList(start,length)</td>\n<td>arr.slice(from,to)</td>\n<td>arr[from:to:step]</td>\n</tr>\n<tr>\n<td>浅拷贝</td>\n<td>Arrays.copyOfRange(arr,from,to)<br>Arrays.copyOf(arr,newLength)<br>Arrays.copyOf(arr,newLength,newType)</td>\n<td>Collections.copy(to,from);<br>list2 = new ArrayList&lt;&gt;(list1);</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>执行Collections.copy前，必须手动把list2的长度增加到10，否则拷贝了之后list2长度仍是0</p>\n<h2 id=\"修改原数组\"><a class=\"markdownIt-Anchor\" href=\"#修改原数组\"></a> 修改原数组</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java数组</th>\n<th>Java List</th>\n<th>JavaScript数组</th>\n<th>Python数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排序</td>\n<td>Arrays.sort(arr)<br>Arrays.sort(arr,from,to)<br>Arrays.sort(arr,comparator)<br>Arrays.sort(arr,from,to,comparator)<br>Collections.sort(arr);</td>\n<td>list.sort()<br>list.sort(comparator)</td>\n<td>arr.sort()<br>arr.sort(compareFunction)</td>\n<td></td>\n</tr>\n<tr>\n<td>并行排序</td>\n<td>Arrays.parallelSort(arr)<br>Arrays.parallelSort(arr, from, to)<br>Arrays.parallelSort(arr,comparator)<br>Arrays.parallelSort(arr,from,to,comparator)</td>\n<td>list.parallelSort()<br>list.parallelSort(comparator)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>反转</td>\n<td>Arrays.reverse(arr)</td>\n<td>Collections.reverse(list)</td>\n<td>arr.reverse()</td>\n<td>arr.reverse()</td>\n</tr>\n<tr>\n<td>填充</td>\n<td>Arrays.fill(arr,value)<br>Arrays.fill(arr, fromIndex, toIndex, value)</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>拼接</td>\n<td></td>\n<td></td>\n<td>arr1.splice(index, 0, arr2)</td>\n<td></td>\n</tr>\n<tr>\n<td>保留</td>\n<td></td>\n<td>list.retainAll()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> Set</h1>\n<h2 id=\"基本操作-2\"><a class=\"markdownIt-Anchor\" href=\"#基本操作-2\"></a> 基本操作</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java Set</th>\n<th>JavaScript Set</th>\n<th>Python Set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建集合</td>\n<td>Set<String> set = new HashSet&lt;&gt;();<br>Set<String> set = new LinkedHashSet&lt;&gt;();</td>\n<td>var set = new Set();</td>\n<td>set()</td>\n</tr>\n<tr>\n<td>添加元素</td>\n<td>set.add(value);<br>set.addAll()</td>\n<td>set.add(value);</td>\n<td>set.add(value)</td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td>set.remove(value);<br>set.removeAll()</td>\n<td>set.delete(value);</td>\n<td>set.remove(value)<br>set.discard(value)</td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td>set.contains(value);<br>set.containsAll()</td>\n<td>set.has(value);</td>\n<td>value in set</td>\n</tr>\n<tr>\n<td>清空集合</td>\n<td>set.clear();</td>\n<td>set.clear();</td>\n<td>set.clear()</td>\n</tr>\n<tr>\n<td>查询长度</td>\n<td>set.size();</td>\n<td>set.size();</td>\n<td>len(set)</td>\n</tr>\n<tr>\n<td>是否为空</td>\n<td>set.isEmpty();</td>\n<td>set.size() === 0</td>\n<td>len(set) == 0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集合运算\"><a class=\"markdownIt-Anchor\" href=\"#集合运算\"></a> 集合运算</h2>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>Java Set</th>\n<th>JavaScript Set</th>\n<th>Python Set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>交集</td>\n<td></td>\n<td>set1.intersection(set2);</td>\n<td>set1.intersection(set2)<br>set1 &amp; set2</td>\n</tr>\n<tr>\n<td>交集更新</td>\n<td>set1.retainAll(set2);</td>\n<td></td>\n<td>set1.intersection_update(set2)</td>\n</tr>\n<tr>\n<td>并集</td>\n<td></td>\n<td>set1.union(set2);</td>\n<td>set1.union(set2)<br>set1 | set2</td>\n</tr>\n<tr>\n<td>并集更新</td>\n<td>set1.addAll(set2);</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>差集</td>\n<td></td>\n<td>set1.difference(set2);</td>\n<td>set1.difference(set2)<br>set1 - set2</td>\n</tr>\n<tr>\n<td>差集更新</td>\n<td>set1.removeAll(set2);</td>\n<td></td>\n<td>set1.difference_update(set2)</td>\n</tr>\n<tr>\n<td>对称差集</td>\n<td></td>\n<td>set1.symmetricDifference(set2);</td>\n<td>symmetric_difference()<br>set1 ^ set2</td>\n</tr>\n<tr>\n<td>对称差集更新</td>\n<td></td>\n<td></td>\n<td>symmetric_difference_update()</td>\n</tr>\n<tr>\n<td>子集</td>\n<td>set2.containsAll(set1);</td>\n<td>set1.isSubsetOf(set2);</td>\n<td>set1.issubset(set2)<br>set1 &lt;= set2</td>\n</tr>\n<tr>\n<td>超集</td>\n<td>set1.containsAll(set2);</td>\n<td>set1.isSupersetOf(set2);</td>\n<td>set1.issuperset(set2)<br>set1 &gt;= set2</td>\n</tr>\n<tr>\n<td>不相交</td>\n<td>set1.disjoint(set2);</td>\n<td>set1.isDisjoint(set2);</td>\n<td>set1.isdisjoint(set2)</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"技术书单","date":"2025-03-04T08:56:06.000Z","_content":"# .NET【2】\n1. [.NET性能优化.pdf](https://pan.quark.cn/s/97d7714c29f9)\n2. [你必须知道的.NET.pdf](https://pan.quark.cn/s/791094f7f308)\n\n# OS【3】\n1. [深入理解计算机系统 第三版.pdf](https://pan.quark.cn/s/c65c12be1cd1)\n2. [计算机操作系统 第三版.pdf](https://pan.quark.cn/s/6133d52dda52)\n3. [现代操作系统 第四版.pdf](https://pan.quark.cn/s/1ca930af409e)\n\n# Java【106】\n1. [重学Java设计模式.pdf](https://pan.quark.cn/s/b55131875a32)\n2. [数据结构与算法分析_Java语言描述(第2版).pdf](https://pan.quark.cn/s/093468f34967)\n3. [实战Java虚拟机.pdf](https://pan.quark.cn/s/ae461a002c7d)\n4. [实战Java高并发程序设计.pdf](https://pan.quark.cn/s/25d360017961)\n5. [深入分析Java Web技术内幕.pdf](https://pan.quark.cn/s/6fd9c48983a4)\n6. [深入理解Java虚拟机：JVM高级特性与最佳实践(第2版).pdf](https://pan.quark.cn/s/9db67b7de2e6)\n7. [深入Java虚拟机.pdf](https://pan.quark.cn/s/035892bbe4f0)\n8. [自己动手写Java虚拟机.pdf](https://pan.quark.cn/s/098e5c4ede8a)\n9. [Java语言描述.pdf](https://pan.quark.cn/s/b2587931e0ed)\n10. [码出高效：Java开发手册.pdf](https://pan.quark.cn/s/fb611cfdf7cd)\n11. [轻量级Java Web开发整合入门.pdf](https://pan.quark.cn/s/bd48432b67e9)\n12. [明解Java.pdf](https://pan.quark.cn/s/7ce207306528)\n13. [垃圾回收的算法与实现.pdf](https://pan.quark.cn/s/13b630f5d3c5)\n14. [精通lambda表达式：Java多核编程.pdf](https://pan.quark.cn/s/bd6cae6ce891)\n15. [深入理解Java内存模型.pdf](https://pan.quark.cn/s/8ed73e8f04d9)\n16. [剑指offer.pdf](https://pan.quark.cn/s/8dc9ca0d7bc0)\n17. [疯狂Java讲义(第4版).pdf](https://pan.quark.cn/s/9ca00a3211f7)\n18. [Java网络编程(第4版).pdf](https://pan.quark.cn/s/b49112bba4d6)\n19. [深入Java虚拟机：JVM G1GC的算法与实现.pdf](https://pan.quark.cn/s/e3f0d0e6e369)\n20. [疯狂Java讲义(第4版)01.pdf](https://pan.quark.cn/s/896fdf5f8011)\n21. [疯狂Java讲义(第4版)02.pdf](https://pan.quark.cn/s/f8eeddf95770)\n22. [疯狂Java讲义(第3版).pdf](https://pan.quark.cn/s/37805fbeca4f)\n23. [分布式Java应用：基础与实践.pdf](https://pan.quark.cn/s/2b8776118b91)\n24. [第一行代码Java.pdf](https://pan.quark.cn/s/8f7327c6c575)\n25. [大型网站系统与Java中间件实践.pdf](https://pan.quark.cn/s/6036a531decf)\n26. [编写高质量代码：改善Java程序的151个建议.pdf](https://pan.quark.cn/s/2d4cbc7b3717)\n27. [编程之美——微软技术面试心得.pdf](https://pan.quark.cn/s/554b75625596)\n28. [阿里巴巴Java开发手册v1.4.0.pdf](https://pan.quark.cn/s/2b42aae2d0de)\n29. [RxJava响应式编程.pdf](https://pan.quark.cn/s/3e71acd0f58c)\n30. [RxJava 2.x 实战.pdf](https://pan.quark.cn/s/dd7fb4a619d3)\n31. [Offer来了：Java面试核心知识点精讲 原理篇.pdf](https://pan.quark.cn/s/47d97a4c8bb2)\n32. [Java中文文本信息处理(从海量到精准).pdf](https://pan.quark.cn/s/2f57de531568)\n33. [Java中间件技术及其应用开发.pdf](https://pan.quark.cn/s/f83f3016fce4)\n34. [Java语言规范：基于Java SE 8.pdf](https://pan.quark.cn/s/e85a5e3a9f0f)\n35. [阿里巴巴Java开发手册v1.3.1.pdf](https://pan.quark.cn/s/a265c3c6c4b9)\n36. [Java游戏高级编程.pdf](https://pan.quark.cn/s/453faf067f48)\n37. [Java性能优化权威指南.pdf](https://pan.quark.cn/s/229cc326da7b)\n38. [Java遗传算法编程.pdf](https://pan.quark.cn/s/ae16ee7b458b)\n39. [JVM性能调优-JVM内存整理及GC回收.pdf](https://pan.quark.cn/s/298ec55322cc)\n40. [Java性能权威指南.pdf](https://pan.quark.cn/s/10a444544f68)\n41. [Java项目开发全程实录(第三版).pdf](https://pan.quark.cn/s/527f6ea2b06f)\n42. [Java核心技术 卷Ⅰ 基础知识(原书第10版).pdf](https://pan.quark.cn/s/1af4f5be9eff)\n43. [Java微服务.pdf](https://pan.quark.cn/s/5eb8dc721e92)\n44. [JVM面试专题及答案.pdf](https://pan.quark.cn/s/2d49455e2316)\n45. [Java网络编程.pdf](https://pan.quark.cn/s/ec565e398e66)\n46. [Java核心技术 卷Ⅱ 高级特性(原书第10版).pdf](https://pan.quark.cn/s/e33b727a4579)\n47. [Java设计模式(第2版)中文版.pdf](https://pan.quark.cn/s/cf7648a5ace8)\n48. [Java求职面试宝典(157页).pdf](https://pan.quark.cn/s/22520d157795)\n49. [Java面试突击-V3.0.pdf](https://pan.quark.cn/s/4c605ea41273)\n50. [Java面试突击-V2.0.pdf](https://pan.quark.cn/s/dfc358a0c654)\n51. [Java虚拟机规范(Java SE 7版).pdf](https://pan.quark.cn/s/ddb90a401115)\n52. [Java网络编程第三版.pdf](https://pan.quark.cn/s/f6ac9f60791d)\n53. [Java面试宝典2018版【超全】很不错.pdf](https://pan.quark.cn/s/36ee41d95d85)\n54. [Java面经-百度准入职老哥整理.pdf](https://pan.quark.cn/s/191afecfe820)\n55. [Java灵魂17问.pdf](https://pan.quark.cn/s/092a008fd879)\n56. [Java开发实例大全(提高卷).pdf](https://pan.quark.cn/s/10ae61781ab7)\n57. [Java加密与解密的艺术-中文版.pdf](https://pan.quark.cn/s/266fa16cda11)\n58. [Java面试资料汇总.pdf](https://pan.quark.cn/s/f6b8090e54aa)\n59. [Java面试问题集.pdf](https://pan.quark.cn/s/24e831977547)\n60. [Java面试突击-V1.0.pdf](https://pan.quark.cn/s/f5298f429a2b)\n61. [Java加密与解密的艺术.pdf](https://pan.quark.cn/s/98c0e84e7267)\n62. [Java核心面试知识整理.pdf](https://pan.quark.cn/s/d62c7886cd59)\n63. [Java面试题以及答案(小生).pdf](https://pan.quark.cn/s/37daddb43cb0)\n64. [Java面试精选72题.pdf](https://pan.quark.cn/s/43e91307ccb0)\n65. [Java面试题解惑系列.pdf](https://pan.quark.cn/s/adad60bfe0b5)\n66. [Java面试笔试题大汇总%28最全%2B详细答案.pdf](https://pan.quark.cn/s/2fb9c70886e9)\n67. [Java9编程参考官方大全(第10版).pdf](https://pan.quark.cn/s/7e7a042b5689)\n68. [Java核心技术 卷Ⅱ 高级特性 (原书第9版).pdf](https://pan.quark.cn/s/0b700ca8dbe9)\n69. [Java核心技术 卷Ⅰ 基础知识(原书第8版).pdf](https://pan.quark.cn/s/e48224fe015d)\n70. [Java核心技术 卷Ⅰ 基础知识(原书第9版).pdf](https://pan.quark.cn/s/650429452014)\n71. [Java经典算法40题.doc](https://pan.quark.cn/s/797e42a287b3)\n72. [Java并发编程从入门到精通.pdf](https://pan.quark.cn/s/7a3f4b2ab094)\n73. [Java高并发编程详解.pdf](https://pan.quark.cn/s/757980091c3b)\n74. [Java基础教程.pdf](https://pan.quark.cn/s/1b78de0321fa)\n75. [Java多线程设计模式.pdf](https://pan.quark.cn/s/865a4e90053b)\n76. [Java多线程编程实战指南(设计模式篇).pdf](https://pan.quark.cn/s/5a67ce6880c7)\n77. [Java多线程编程核心技术.pdf](https://pan.quark.cn/s/a142cb8d1284)\n78. [Java从小白到大牛.pdf](https://pan.quark.cn/s/846f3a3e486a)\n79. [Java从入门到精通.pdf](https://pan.quark.cn/s/ed5f5752b050)\n80. [Java程序员面试笔试宝典.pdf](https://pan.quark.cn/s/e4147e6fa91a)\n81. [Java程序员面试宝典.pdf](https://pan.quark.cn/s/82458d9c4f89)\n82. [Java程序员面试宝典(第2版).pdf](https://pan.quark.cn/s/a5c52053ec15)\n83. [Java常用算法手册.pdf](https://pan.quark.cn/s/9337683527c2)\n84. [Java测试与设计 从单元测试到自动Web测试.pdf](https://pan.quark.cn/s/55be892fadb5)\n85. [Java并发编程之美.pdf](https://pan.quark.cn/s/3eac540d8a21)\n86. [Java并发编程实战.pdf](https://pan.quark.cn/s/a48e4a6f240e)\n87. [Java并发编程实践.pdf](https://pan.quark.cn/s/22f6aa9d7a9a)\n88. [Java程序员面试宝典+.pdf](https://pan.quark.cn/s/57a649b2480f)\n89. [Java并发编程的艺术.pdf](https://pan.quark.cn/s/e37a683191be)\n90. [Java编程实战宝典.pdf](https://pan.quark.cn/s/86a0020320d1)\n91. [JavaEE开发的颠覆者 Spring Boot实战.pdf](https://pan.quark.cn/s/d705e51e593c)\n92. [Java9模块化开发核心原则与实践.pdf](https://pan.quark.cn/s/9f2042d91312)\n93. [Java Web整合开发王者归来.pdf](https://pan.quark.cn/s/1c789f72f191)\n94. [Java Web实战开发完全学习手册.pdf](https://pan.quark.cn/s/e971c4dc3b3a)\n95. [Java Web开发实例大全 提高卷.pdf](https://pan.quark.cn/s/ebf72040ed5d)\n96. [Java编程思想(第4版)_.pdf](https://pan.quark.cn/s/1e4ea3d3a825)\n97. [Java Web轻量级开发面试教程.pdf](https://pan.quark.cn/s/85a6bd76cfe8)\n98. [Java JDK 8学习笔记.pdf](https://pan.quark.cn/s/912a0d4f8740)\n99. [Java RESTful Web Service实战(第2版).pdf](https://pan.quark.cn/s/22c5dd9daba7)\n100. [Java Web开发实例大全 基础卷.pdf](https://pan.quark.cn/s/61a219b12517)\n101. [Head First Java(第2版)中文版.pdf](https://pan.quark.cn/s/cc48aeedde55)\n102. [Head First Servlets and JSP （第2版）.pdf](https://pan.quark.cn/s/52603315c4d7)\n103. [Java EE核心技术与应用.pdf](https://pan.quark.cn/s/d183d88b468d)\n104. [Java 8实战.pdf](https://pan.quark.cn/s/22ea02b3d413)\n105. [Java编程思想(第4版).pdf](https://pan.quark.cn/s/d6f313502b41)\n106. [Java 编程要点.pdf](https://pan.quark.cn/s/312682f29721)\n\n## Spring【1】\n1. [Spring实战（第3版）.pdf](https://pan.quark.cn/s/6c343740549e)\n\n# JavaScript【1】\n1. [【JavaScript高级程序设计（第3版）】中文 高清 .pdf](https://pan.quark.cn/s/36a55873f521)\n\n# Python【27】\n1. [21天学通Python.pdf](https://pan.quark.cn/s/ab083e7fcb7d)\n2. [A Byte of Python.pdf](https://pan.quark.cn/s/9e2cb7d9ed11)\n3. [A Primer on Scientfic Programming with Python, Third Edition .pdf](https://pan.quark.cn/s/a7aa35afd655)\n4. [An Introduction to Statistical Learning.pdf](https://pan.quark.cn/s/31d1757a3788)\n5. [Bayesian methods for hackers.pdf](https://pan.quark.cn/s/44078f3f6b7b)\n6. [Beautiful Soup 中文文档.pdf](https://pan.quark.cn/s/6c72bae01578)\n7. [Beginning Game Development with Python and Pygame.pdf](https://pan.quark.cn/s/ffda3a29fdf8)\n8. [Beginning PyQt.pdf](https://pan.quark.cn/s/37f709f0515d)\n9. [Beginning Python Visualization：Crafting Visual Transformation Scripts.pdf](https://pan.quark.cn/s/c38336a8aa26)\n10. [Beginning Python：Using Python 2.6 and Python 3.1.pdf](https://pan.quark.cn/s/1fd6db6d4166)\n11. [Building Machine Learning Systems with Python.pdf](https://pan.quark.cn/s/8d821873094d)\n12. [CherryPy Essentials：Rapid Python Web Application Development.pdf](https://pan.quark.cn/s/43e4a78e8bb1)\n13. [Deep Learning Tutorial.pdf](https://pan.quark.cn/s/964ea0cc0b93)\n14. [Developing MeeGo apps with Python and QML.pdf](https://pan.quark.cn/s/596c88402787)\n15. [Dive Into Python 3.pdf](https://pan.quark.cn/s/8e29ed7b191b)\n16. [Django 中文文档 1.8.pdf](https://pan.quark.cn/s/a3c393a4309e)\n17. [Django 中文教程.pdf](https://pan.quark.cn/s/7a50874625f3)\n18. [Effective Python：编写高质量Python代码的59个有效方法.pdf](https://pan.quark.cn/s/2bc267fb5588)\n19. [Ensemble Machine Learning-Methods and Applications.pdf](https://pan.quark.cn/s/ef97c3d811db)\n20. [Evaluating Machine Learning Models.pdf](https://pan.quark.cn/s/3fb5ed5c7c7e)\n21. [Expert Python Programming.pdf](https://pan.quark.cn/s/4de3e0deb299)\n22. [Flask Documentation.pdf](https://pan.quark.cn/s/653d03aed325)\n23. [Flask Web开发：基于Python的Web应用开发实战.pdf](https://pan.quark.cn/s/b5971dd0e34e)\n24. [Flask Web开发实战：入门、进阶与原理解析.pdf](https://pan.quark.cn/s/cf4208d247d2)\n25. [Focus on SDL.pdf](https://pan.quark.cn/s/26dd964ca82f)\n26. [Foundations of Python Network Programming, 2nd Edition.pdf](https://pan.quark.cn/s/517836ebcf65)\n27. [Foundations of Python Network Programming, 3rd Edition.pdf](https://pan.quark.cn/s/53f57a61a78a)\n\n# DB\n\n## SQL\n1. [收获，不止SQL优化：抓住SQL的本质.pdf](https://pan.quark.cn/s/ebf4b348c82e)\n2. [SQL解惑（第2版）.pdf](https://pan.quark.cn/s/6f093a9ea474)\n3. [SQL注入自学指南.pdf](https://pan.quark.cn/s/66d7f4b23661)\n4. [SQL初学者指南.pdf](https://pan.quark.cn/s/ad0a3f46cfd1)\n5. [SQL基础教程.pdf](https://pan.quark.cn/s/69eefdd7babc)\n6. [SQL必知必会（第4版）.pdf](https://pan.quark.cn/s/b69d9fa11ef8)\n\n## MySQL【16】\n1. [高性能MYSQL（第3版）.pdf](https://pan.quark.cn/s/484352f68b34)\n2. [MySQL Cookbook(第2版).pdf](https://pan.quark.cn/s/71c5c3812a01)\n3. [MySQL 从入门到项目实践.pdf](https://pan.quark.cn/s/df081f84496b)\n4. [MySQL 超新手入门.epub](https://pan.quark.cn/s/f3a9cb8fd50e)\n5. [MySQL 注入天书：sqli-labs 使用手册.pdf](https://pan.quark.cn/s/2db70a53e08d)\n6. [MySQL5.5从零开始学.pdf](https://pan.quark.cn/s/aa1f8be674c4)\n7. [MySQL笔记.pdf](https://pan.quark.cn/s/80712cb50dc5)\n8. [MySQL必知必会（文字版）.pdf](https://pan.quark.cn/s/c5d3608a0cd8)\n9. [MySQL常用命令大全.pdf](https://pan.quark.cn/s/23b3ffcc73b7)\n10. [MySQL技术精粹：架构、高级特性、性能优化与集群实战.pdf](https://pan.quark.cn/s/5b32d983e713)\n11. [MySQL技术内幕：InnoDB存储引擎(第2版).mobi](https://pan.quark.cn/s/88a02bb9333d)\n12. [MySQL开发者：SQL权威指南.pdf](https://pan.quark.cn/s/d333b71839cc)\n13. [MySQL排错指南 .pdf](https://pan.quark.cn/s/9afc328dc966)\n14. [Mysql数据库多实例安装.pdf](https://pan.quark.cn/s/23d1910b4c67)\n15. [MySQL王者晋级之路.pdf](https://pan.quark.cn/s/261cc035e429)\n16. [深入浅出MySQL：数据库开发、优化与管理维护（第2版）.pdf](https://pan.quark.cn/s/209850bffcd3)\n\n## redis【6】\n1. [Redis开发与运维.pdf](https://pan.quark.cn/s/58e05d8a9111)\n2. [Redis入门指南（第2版）.pdf](https://pan.quark.cn/s/d28067dcd022)\n3. [Redis实战（扫描版）.pdf](https://pan.quark.cn/s/194c7edee828)\n4. [Redis实战（电子版）.pdf](https://pan.quark.cn/s/197ebca7d0fa)\n5. [Redis设计与实现.pdf](https://pan.quark.cn/s/7c1d9d3e9a51)\n6. [redis设计与实现(第二版).pdf](https://pan.quark.cn/s/de28692010d4)\n\n## Elasticsearch【1】\n1. [Elasticsearch 权威指南（中文版）.pdf](https://pan.quark.cn/s/bee69b4d8a06)\n\n# docker【2】\n1. [Docker开发实践.pdf](https://pan.quark.cn/s/ca398bce7ca5)\n2. [狂神说docker.pdf](https://pan.quark.cn/s/97647c02b7b3)\n\n# git【1】\n1. [Pro Git.pdf](https://pan.quark.cn/s/ec5be60730dc)\n\n# Nginx【1】\n1. [实战Nginx取代Apache的高性能Web服务器 .PDF](https://pan.quark.cn/s/ffa1a4bb5b9b)\n\n# 正则表达式【6】\n1. [精通正则表达式（第三版）.pdf]( https://pan.quark.cn/s/ccc13e1790ea)\n2. [学习正则表达式.epub](https://pan.quark.cn/s/a58aa5a698c9)\n3. [正则表达式.pdf](https://pan.quark.cn/s/ee3368009d77)\n4. [正则表达式必知必会.pdf](https://pan.quark.cn/s/dfb3d043dda3)\n5. [正则表达式入门经典.pdf](https://pan.quark.cn/s/2be34e0bb33c)\n6. [正则指引.pdf](https://pan.quark.cn/s/43f1a62689b0)\n\n# 软工【2】\n1. [编写可读代码的艺术.pdf](https://pan.quark.cn/s/f4f53786db9a)\n2. [重构-改善既有代码的设计（第2版）.pdf](https://pan.quark.cn/s/0ebac0bfc13e)","source":"_posts/技术书单.md","raw":"---\ntitle: 技术书单\ndate: 2025-03-04 16:56:06\ntags:\n---\n# .NET【2】\n1. [.NET性能优化.pdf](https://pan.quark.cn/s/97d7714c29f9)\n2. [你必须知道的.NET.pdf](https://pan.quark.cn/s/791094f7f308)\n\n# OS【3】\n1. [深入理解计算机系统 第三版.pdf](https://pan.quark.cn/s/c65c12be1cd1)\n2. [计算机操作系统 第三版.pdf](https://pan.quark.cn/s/6133d52dda52)\n3. [现代操作系统 第四版.pdf](https://pan.quark.cn/s/1ca930af409e)\n\n# Java【106】\n1. [重学Java设计模式.pdf](https://pan.quark.cn/s/b55131875a32)\n2. [数据结构与算法分析_Java语言描述(第2版).pdf](https://pan.quark.cn/s/093468f34967)\n3. [实战Java虚拟机.pdf](https://pan.quark.cn/s/ae461a002c7d)\n4. [实战Java高并发程序设计.pdf](https://pan.quark.cn/s/25d360017961)\n5. [深入分析Java Web技术内幕.pdf](https://pan.quark.cn/s/6fd9c48983a4)\n6. [深入理解Java虚拟机：JVM高级特性与最佳实践(第2版).pdf](https://pan.quark.cn/s/9db67b7de2e6)\n7. [深入Java虚拟机.pdf](https://pan.quark.cn/s/035892bbe4f0)\n8. [自己动手写Java虚拟机.pdf](https://pan.quark.cn/s/098e5c4ede8a)\n9. [Java语言描述.pdf](https://pan.quark.cn/s/b2587931e0ed)\n10. [码出高效：Java开发手册.pdf](https://pan.quark.cn/s/fb611cfdf7cd)\n11. [轻量级Java Web开发整合入门.pdf](https://pan.quark.cn/s/bd48432b67e9)\n12. [明解Java.pdf](https://pan.quark.cn/s/7ce207306528)\n13. [垃圾回收的算法与实现.pdf](https://pan.quark.cn/s/13b630f5d3c5)\n14. [精通lambda表达式：Java多核编程.pdf](https://pan.quark.cn/s/bd6cae6ce891)\n15. [深入理解Java内存模型.pdf](https://pan.quark.cn/s/8ed73e8f04d9)\n16. [剑指offer.pdf](https://pan.quark.cn/s/8dc9ca0d7bc0)\n17. [疯狂Java讲义(第4版).pdf](https://pan.quark.cn/s/9ca00a3211f7)\n18. [Java网络编程(第4版).pdf](https://pan.quark.cn/s/b49112bba4d6)\n19. [深入Java虚拟机：JVM G1GC的算法与实现.pdf](https://pan.quark.cn/s/e3f0d0e6e369)\n20. [疯狂Java讲义(第4版)01.pdf](https://pan.quark.cn/s/896fdf5f8011)\n21. [疯狂Java讲义(第4版)02.pdf](https://pan.quark.cn/s/f8eeddf95770)\n22. [疯狂Java讲义(第3版).pdf](https://pan.quark.cn/s/37805fbeca4f)\n23. [分布式Java应用：基础与实践.pdf](https://pan.quark.cn/s/2b8776118b91)\n24. [第一行代码Java.pdf](https://pan.quark.cn/s/8f7327c6c575)\n25. [大型网站系统与Java中间件实践.pdf](https://pan.quark.cn/s/6036a531decf)\n26. [编写高质量代码：改善Java程序的151个建议.pdf](https://pan.quark.cn/s/2d4cbc7b3717)\n27. [编程之美——微软技术面试心得.pdf](https://pan.quark.cn/s/554b75625596)\n28. [阿里巴巴Java开发手册v1.4.0.pdf](https://pan.quark.cn/s/2b42aae2d0de)\n29. [RxJava响应式编程.pdf](https://pan.quark.cn/s/3e71acd0f58c)\n30. [RxJava 2.x 实战.pdf](https://pan.quark.cn/s/dd7fb4a619d3)\n31. [Offer来了：Java面试核心知识点精讲 原理篇.pdf](https://pan.quark.cn/s/47d97a4c8bb2)\n32. [Java中文文本信息处理(从海量到精准).pdf](https://pan.quark.cn/s/2f57de531568)\n33. [Java中间件技术及其应用开发.pdf](https://pan.quark.cn/s/f83f3016fce4)\n34. [Java语言规范：基于Java SE 8.pdf](https://pan.quark.cn/s/e85a5e3a9f0f)\n35. [阿里巴巴Java开发手册v1.3.1.pdf](https://pan.quark.cn/s/a265c3c6c4b9)\n36. [Java游戏高级编程.pdf](https://pan.quark.cn/s/453faf067f48)\n37. [Java性能优化权威指南.pdf](https://pan.quark.cn/s/229cc326da7b)\n38. [Java遗传算法编程.pdf](https://pan.quark.cn/s/ae16ee7b458b)\n39. [JVM性能调优-JVM内存整理及GC回收.pdf](https://pan.quark.cn/s/298ec55322cc)\n40. [Java性能权威指南.pdf](https://pan.quark.cn/s/10a444544f68)\n41. [Java项目开发全程实录(第三版).pdf](https://pan.quark.cn/s/527f6ea2b06f)\n42. [Java核心技术 卷Ⅰ 基础知识(原书第10版).pdf](https://pan.quark.cn/s/1af4f5be9eff)\n43. [Java微服务.pdf](https://pan.quark.cn/s/5eb8dc721e92)\n44. [JVM面试专题及答案.pdf](https://pan.quark.cn/s/2d49455e2316)\n45. [Java网络编程.pdf](https://pan.quark.cn/s/ec565e398e66)\n46. [Java核心技术 卷Ⅱ 高级特性(原书第10版).pdf](https://pan.quark.cn/s/e33b727a4579)\n47. [Java设计模式(第2版)中文版.pdf](https://pan.quark.cn/s/cf7648a5ace8)\n48. [Java求职面试宝典(157页).pdf](https://pan.quark.cn/s/22520d157795)\n49. [Java面试突击-V3.0.pdf](https://pan.quark.cn/s/4c605ea41273)\n50. [Java面试突击-V2.0.pdf](https://pan.quark.cn/s/dfc358a0c654)\n51. [Java虚拟机规范(Java SE 7版).pdf](https://pan.quark.cn/s/ddb90a401115)\n52. [Java网络编程第三版.pdf](https://pan.quark.cn/s/f6ac9f60791d)\n53. [Java面试宝典2018版【超全】很不错.pdf](https://pan.quark.cn/s/36ee41d95d85)\n54. [Java面经-百度准入职老哥整理.pdf](https://pan.quark.cn/s/191afecfe820)\n55. [Java灵魂17问.pdf](https://pan.quark.cn/s/092a008fd879)\n56. [Java开发实例大全(提高卷).pdf](https://pan.quark.cn/s/10ae61781ab7)\n57. [Java加密与解密的艺术-中文版.pdf](https://pan.quark.cn/s/266fa16cda11)\n58. [Java面试资料汇总.pdf](https://pan.quark.cn/s/f6b8090e54aa)\n59. [Java面试问题集.pdf](https://pan.quark.cn/s/24e831977547)\n60. [Java面试突击-V1.0.pdf](https://pan.quark.cn/s/f5298f429a2b)\n61. [Java加密与解密的艺术.pdf](https://pan.quark.cn/s/98c0e84e7267)\n62. [Java核心面试知识整理.pdf](https://pan.quark.cn/s/d62c7886cd59)\n63. [Java面试题以及答案(小生).pdf](https://pan.quark.cn/s/37daddb43cb0)\n64. [Java面试精选72题.pdf](https://pan.quark.cn/s/43e91307ccb0)\n65. [Java面试题解惑系列.pdf](https://pan.quark.cn/s/adad60bfe0b5)\n66. [Java面试笔试题大汇总%28最全%2B详细答案.pdf](https://pan.quark.cn/s/2fb9c70886e9)\n67. [Java9编程参考官方大全(第10版).pdf](https://pan.quark.cn/s/7e7a042b5689)\n68. [Java核心技术 卷Ⅱ 高级特性 (原书第9版).pdf](https://pan.quark.cn/s/0b700ca8dbe9)\n69. [Java核心技术 卷Ⅰ 基础知识(原书第8版).pdf](https://pan.quark.cn/s/e48224fe015d)\n70. [Java核心技术 卷Ⅰ 基础知识(原书第9版).pdf](https://pan.quark.cn/s/650429452014)\n71. [Java经典算法40题.doc](https://pan.quark.cn/s/797e42a287b3)\n72. [Java并发编程从入门到精通.pdf](https://pan.quark.cn/s/7a3f4b2ab094)\n73. [Java高并发编程详解.pdf](https://pan.quark.cn/s/757980091c3b)\n74. [Java基础教程.pdf](https://pan.quark.cn/s/1b78de0321fa)\n75. [Java多线程设计模式.pdf](https://pan.quark.cn/s/865a4e90053b)\n76. [Java多线程编程实战指南(设计模式篇).pdf](https://pan.quark.cn/s/5a67ce6880c7)\n77. [Java多线程编程核心技术.pdf](https://pan.quark.cn/s/a142cb8d1284)\n78. [Java从小白到大牛.pdf](https://pan.quark.cn/s/846f3a3e486a)\n79. [Java从入门到精通.pdf](https://pan.quark.cn/s/ed5f5752b050)\n80. [Java程序员面试笔试宝典.pdf](https://pan.quark.cn/s/e4147e6fa91a)\n81. [Java程序员面试宝典.pdf](https://pan.quark.cn/s/82458d9c4f89)\n82. [Java程序员面试宝典(第2版).pdf](https://pan.quark.cn/s/a5c52053ec15)\n83. [Java常用算法手册.pdf](https://pan.quark.cn/s/9337683527c2)\n84. [Java测试与设计 从单元测试到自动Web测试.pdf](https://pan.quark.cn/s/55be892fadb5)\n85. [Java并发编程之美.pdf](https://pan.quark.cn/s/3eac540d8a21)\n86. [Java并发编程实战.pdf](https://pan.quark.cn/s/a48e4a6f240e)\n87. [Java并发编程实践.pdf](https://pan.quark.cn/s/22f6aa9d7a9a)\n88. [Java程序员面试宝典+.pdf](https://pan.quark.cn/s/57a649b2480f)\n89. [Java并发编程的艺术.pdf](https://pan.quark.cn/s/e37a683191be)\n90. [Java编程实战宝典.pdf](https://pan.quark.cn/s/86a0020320d1)\n91. [JavaEE开发的颠覆者 Spring Boot实战.pdf](https://pan.quark.cn/s/d705e51e593c)\n92. [Java9模块化开发核心原则与实践.pdf](https://pan.quark.cn/s/9f2042d91312)\n93. [Java Web整合开发王者归来.pdf](https://pan.quark.cn/s/1c789f72f191)\n94. [Java Web实战开发完全学习手册.pdf](https://pan.quark.cn/s/e971c4dc3b3a)\n95. [Java Web开发实例大全 提高卷.pdf](https://pan.quark.cn/s/ebf72040ed5d)\n96. [Java编程思想(第4版)_.pdf](https://pan.quark.cn/s/1e4ea3d3a825)\n97. [Java Web轻量级开发面试教程.pdf](https://pan.quark.cn/s/85a6bd76cfe8)\n98. [Java JDK 8学习笔记.pdf](https://pan.quark.cn/s/912a0d4f8740)\n99. [Java RESTful Web Service实战(第2版).pdf](https://pan.quark.cn/s/22c5dd9daba7)\n100. [Java Web开发实例大全 基础卷.pdf](https://pan.quark.cn/s/61a219b12517)\n101. [Head First Java(第2版)中文版.pdf](https://pan.quark.cn/s/cc48aeedde55)\n102. [Head First Servlets and JSP （第2版）.pdf](https://pan.quark.cn/s/52603315c4d7)\n103. [Java EE核心技术与应用.pdf](https://pan.quark.cn/s/d183d88b468d)\n104. [Java 8实战.pdf](https://pan.quark.cn/s/22ea02b3d413)\n105. [Java编程思想(第4版).pdf](https://pan.quark.cn/s/d6f313502b41)\n106. [Java 编程要点.pdf](https://pan.quark.cn/s/312682f29721)\n\n## Spring【1】\n1. [Spring实战（第3版）.pdf](https://pan.quark.cn/s/6c343740549e)\n\n# JavaScript【1】\n1. [【JavaScript高级程序设计（第3版）】中文 高清 .pdf](https://pan.quark.cn/s/36a55873f521)\n\n# Python【27】\n1. [21天学通Python.pdf](https://pan.quark.cn/s/ab083e7fcb7d)\n2. [A Byte of Python.pdf](https://pan.quark.cn/s/9e2cb7d9ed11)\n3. [A Primer on Scientfic Programming with Python, Third Edition .pdf](https://pan.quark.cn/s/a7aa35afd655)\n4. [An Introduction to Statistical Learning.pdf](https://pan.quark.cn/s/31d1757a3788)\n5. [Bayesian methods for hackers.pdf](https://pan.quark.cn/s/44078f3f6b7b)\n6. [Beautiful Soup 中文文档.pdf](https://pan.quark.cn/s/6c72bae01578)\n7. [Beginning Game Development with Python and Pygame.pdf](https://pan.quark.cn/s/ffda3a29fdf8)\n8. [Beginning PyQt.pdf](https://pan.quark.cn/s/37f709f0515d)\n9. [Beginning Python Visualization：Crafting Visual Transformation Scripts.pdf](https://pan.quark.cn/s/c38336a8aa26)\n10. [Beginning Python：Using Python 2.6 and Python 3.1.pdf](https://pan.quark.cn/s/1fd6db6d4166)\n11. [Building Machine Learning Systems with Python.pdf](https://pan.quark.cn/s/8d821873094d)\n12. [CherryPy Essentials：Rapid Python Web Application Development.pdf](https://pan.quark.cn/s/43e4a78e8bb1)\n13. [Deep Learning Tutorial.pdf](https://pan.quark.cn/s/964ea0cc0b93)\n14. [Developing MeeGo apps with Python and QML.pdf](https://pan.quark.cn/s/596c88402787)\n15. [Dive Into Python 3.pdf](https://pan.quark.cn/s/8e29ed7b191b)\n16. [Django 中文文档 1.8.pdf](https://pan.quark.cn/s/a3c393a4309e)\n17. [Django 中文教程.pdf](https://pan.quark.cn/s/7a50874625f3)\n18. [Effective Python：编写高质量Python代码的59个有效方法.pdf](https://pan.quark.cn/s/2bc267fb5588)\n19. [Ensemble Machine Learning-Methods and Applications.pdf](https://pan.quark.cn/s/ef97c3d811db)\n20. [Evaluating Machine Learning Models.pdf](https://pan.quark.cn/s/3fb5ed5c7c7e)\n21. [Expert Python Programming.pdf](https://pan.quark.cn/s/4de3e0deb299)\n22. [Flask Documentation.pdf](https://pan.quark.cn/s/653d03aed325)\n23. [Flask Web开发：基于Python的Web应用开发实战.pdf](https://pan.quark.cn/s/b5971dd0e34e)\n24. [Flask Web开发实战：入门、进阶与原理解析.pdf](https://pan.quark.cn/s/cf4208d247d2)\n25. [Focus on SDL.pdf](https://pan.quark.cn/s/26dd964ca82f)\n26. [Foundations of Python Network Programming, 2nd Edition.pdf](https://pan.quark.cn/s/517836ebcf65)\n27. [Foundations of Python Network Programming, 3rd Edition.pdf](https://pan.quark.cn/s/53f57a61a78a)\n\n# DB\n\n## SQL\n1. [收获，不止SQL优化：抓住SQL的本质.pdf](https://pan.quark.cn/s/ebf4b348c82e)\n2. [SQL解惑（第2版）.pdf](https://pan.quark.cn/s/6f093a9ea474)\n3. [SQL注入自学指南.pdf](https://pan.quark.cn/s/66d7f4b23661)\n4. [SQL初学者指南.pdf](https://pan.quark.cn/s/ad0a3f46cfd1)\n5. [SQL基础教程.pdf](https://pan.quark.cn/s/69eefdd7babc)\n6. [SQL必知必会（第4版）.pdf](https://pan.quark.cn/s/b69d9fa11ef8)\n\n## MySQL【16】\n1. [高性能MYSQL（第3版）.pdf](https://pan.quark.cn/s/484352f68b34)\n2. [MySQL Cookbook(第2版).pdf](https://pan.quark.cn/s/71c5c3812a01)\n3. [MySQL 从入门到项目实践.pdf](https://pan.quark.cn/s/df081f84496b)\n4. [MySQL 超新手入门.epub](https://pan.quark.cn/s/f3a9cb8fd50e)\n5. [MySQL 注入天书：sqli-labs 使用手册.pdf](https://pan.quark.cn/s/2db70a53e08d)\n6. [MySQL5.5从零开始学.pdf](https://pan.quark.cn/s/aa1f8be674c4)\n7. [MySQL笔记.pdf](https://pan.quark.cn/s/80712cb50dc5)\n8. [MySQL必知必会（文字版）.pdf](https://pan.quark.cn/s/c5d3608a0cd8)\n9. [MySQL常用命令大全.pdf](https://pan.quark.cn/s/23b3ffcc73b7)\n10. [MySQL技术精粹：架构、高级特性、性能优化与集群实战.pdf](https://pan.quark.cn/s/5b32d983e713)\n11. [MySQL技术内幕：InnoDB存储引擎(第2版).mobi](https://pan.quark.cn/s/88a02bb9333d)\n12. [MySQL开发者：SQL权威指南.pdf](https://pan.quark.cn/s/d333b71839cc)\n13. [MySQL排错指南 .pdf](https://pan.quark.cn/s/9afc328dc966)\n14. [Mysql数据库多实例安装.pdf](https://pan.quark.cn/s/23d1910b4c67)\n15. [MySQL王者晋级之路.pdf](https://pan.quark.cn/s/261cc035e429)\n16. [深入浅出MySQL：数据库开发、优化与管理维护（第2版）.pdf](https://pan.quark.cn/s/209850bffcd3)\n\n## redis【6】\n1. [Redis开发与运维.pdf](https://pan.quark.cn/s/58e05d8a9111)\n2. [Redis入门指南（第2版）.pdf](https://pan.quark.cn/s/d28067dcd022)\n3. [Redis实战（扫描版）.pdf](https://pan.quark.cn/s/194c7edee828)\n4. [Redis实战（电子版）.pdf](https://pan.quark.cn/s/197ebca7d0fa)\n5. [Redis设计与实现.pdf](https://pan.quark.cn/s/7c1d9d3e9a51)\n6. [redis设计与实现(第二版).pdf](https://pan.quark.cn/s/de28692010d4)\n\n## Elasticsearch【1】\n1. [Elasticsearch 权威指南（中文版）.pdf](https://pan.quark.cn/s/bee69b4d8a06)\n\n# docker【2】\n1. [Docker开发实践.pdf](https://pan.quark.cn/s/ca398bce7ca5)\n2. [狂神说docker.pdf](https://pan.quark.cn/s/97647c02b7b3)\n\n# git【1】\n1. [Pro Git.pdf](https://pan.quark.cn/s/ec5be60730dc)\n\n# Nginx【1】\n1. [实战Nginx取代Apache的高性能Web服务器 .PDF](https://pan.quark.cn/s/ffa1a4bb5b9b)\n\n# 正则表达式【6】\n1. [精通正则表达式（第三版）.pdf]( https://pan.quark.cn/s/ccc13e1790ea)\n2. [学习正则表达式.epub](https://pan.quark.cn/s/a58aa5a698c9)\n3. [正则表达式.pdf](https://pan.quark.cn/s/ee3368009d77)\n4. [正则表达式必知必会.pdf](https://pan.quark.cn/s/dfb3d043dda3)\n5. [正则表达式入门经典.pdf](https://pan.quark.cn/s/2be34e0bb33c)\n6. [正则指引.pdf](https://pan.quark.cn/s/43f1a62689b0)\n\n# 软工【2】\n1. [编写可读代码的艺术.pdf](https://pan.quark.cn/s/f4f53786db9a)\n2. [重构-改善既有代码的设计（第2版）.pdf](https://pan.quark.cn/s/0ebac0bfc13e)","slug":"技术书单","published":1,"updated":"2025-03-24T06:38:33.552Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16l000s64v4d6k12t71","content":"<h1 id=\"net2\"><a class=\"markdownIt-Anchor\" href=\"#net2\"></a> .NET【2】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/97d7714c29f9\">.NET性能优化.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/791094f7f308\">你必须知道的.NET.pdf</a></li>\n</ol>\n<h1 id=\"os3\"><a class=\"markdownIt-Anchor\" href=\"#os3\"></a> OS【3】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/c65c12be1cd1\">深入理解计算机系统 第三版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6133d52dda52\">计算机操作系统 第三版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1ca930af409e\">现代操作系统 第四版.pdf</a></li>\n</ol>\n<h1 id=\"java106\"><a class=\"markdownIt-Anchor\" href=\"#java106\"></a> Java【106】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/b55131875a32\">重学Java设计模式.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/093468f34967\">数据结构与算法分析_Java语言描述(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ae461a002c7d\">实战Java虚拟机.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/25d360017961\">实战Java高并发程序设计.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6fd9c48983a4\">深入分析Java Web技术内幕.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9db67b7de2e6\">深入理解Java虚拟机：JVM高级特性与最佳实践(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/035892bbe4f0\">深入Java虚拟机.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/098e5c4ede8a\">自己动手写Java虚拟机.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b2587931e0ed\">Java语言描述.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/fb611cfdf7cd\">码出高效：Java开发手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/bd48432b67e9\">轻量级Java Web开发整合入门.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7ce207306528\">明解Java.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/13b630f5d3c5\">垃圾回收的算法与实现.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/bd6cae6ce891\">精通lambda表达式：Java多核编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8ed73e8f04d9\">深入理解Java内存模型.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8dc9ca0d7bc0\">剑指offer.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9ca00a3211f7\">疯狂Java讲义(第4版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b49112bba4d6\">Java网络编程(第4版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e3f0d0e6e369\">深入Java虚拟机：JVM G1GC的算法与实现.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/896fdf5f8011\">疯狂Java讲义(第4版)01.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f8eeddf95770\">疯狂Java讲义(第4版)02.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/37805fbeca4f\">疯狂Java讲义(第3版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2b8776118b91\">分布式Java应用：基础与实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8f7327c6c575\">第一行代码Java.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6036a531decf\">大型网站系统与Java中间件实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2d4cbc7b3717\">编写高质量代码：改善Java程序的151个建议.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/554b75625596\">编程之美——微软技术面试心得.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2b42aae2d0de\">阿里巴巴Java开发手册v1.4.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/3e71acd0f58c\">RxJava响应式编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/dd7fb4a619d3\">RxJava 2.x 实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/47d97a4c8bb2\">Offer来了：Java面试核心知识点精讲 原理篇.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2f57de531568\">Java中文文本信息处理(从海量到精准).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f83f3016fce4\">Java中间件技术及其应用开发.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e85a5e3a9f0f\">Java语言规范：基于Java SE 8.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a265c3c6c4b9\">阿里巴巴Java开发手册v1.3.1.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/453faf067f48\">Java游戏高级编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/229cc326da7b\">Java性能优化权威指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ae16ee7b458b\">Java遗传算法编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/298ec55322cc\">JVM性能调优-JVM内存整理及GC回收.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/10a444544f68\">Java性能权威指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/527f6ea2b06f\">Java项目开发全程实录(第三版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1af4f5be9eff\">Java核心技术 卷Ⅰ 基础知识(原书第10版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/5eb8dc721e92\">Java微服务.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2d49455e2316\">JVM面试专题及答案.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ec565e398e66\">Java网络编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e33b727a4579\">Java核心技术 卷Ⅱ 高级特性(原书第10版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/cf7648a5ace8\">Java设计模式(第2版)中文版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22520d157795\">Java求职面试宝典(157页).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/4c605ea41273\">Java面试突击-V3.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/dfc358a0c654\">Java面试突击-V2.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ddb90a401115\">Java虚拟机规范(Java SE 7版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f6ac9f60791d\">Java网络编程第三版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/36ee41d95d85\">Java面试宝典2018版【超全】很不错.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/191afecfe820\">Java面经-百度准入职老哥整理.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/092a008fd879\">Java灵魂17问.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/10ae61781ab7\">Java开发实例大全(提高卷).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/266fa16cda11\">Java加密与解密的艺术-中文版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f6b8090e54aa\">Java面试资料汇总.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/24e831977547\">Java面试问题集.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f5298f429a2b\">Java面试突击-V1.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/98c0e84e7267\">Java加密与解密的艺术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d62c7886cd59\">Java核心面试知识整理.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/37daddb43cb0\">Java面试题以及答案(小生).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/43e91307ccb0\">Java面试精选72题.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/adad60bfe0b5\">Java面试题解惑系列.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2fb9c70886e9\">Java面试笔试题大汇总%28最全%2B详细答案.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7e7a042b5689\">Java9编程参考官方大全(第10版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/0b700ca8dbe9\">Java核心技术 卷Ⅱ 高级特性 (原书第9版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e48224fe015d\">Java核心技术 卷Ⅰ 基础知识(原书第8版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/650429452014\">Java核心技术 卷Ⅰ 基础知识(原书第9版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/797e42a287b3\">Java经典算法40题.doc</a></li>\n<li><a href=\"https://pan.quark.cn/s/7a3f4b2ab094\">Java并发编程从入门到精通.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/757980091c3b\">Java高并发编程详解.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1b78de0321fa\">Java基础教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/865a4e90053b\">Java多线程设计模式.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/5a67ce6880c7\">Java多线程编程实战指南(设计模式篇).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a142cb8d1284\">Java多线程编程核心技术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/846f3a3e486a\">Java从小白到大牛.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ed5f5752b050\">Java从入门到精通.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e4147e6fa91a\">Java程序员面试笔试宝典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/82458d9c4f89\">Java程序员面试宝典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a5c52053ec15\">Java程序员面试宝典(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9337683527c2\">Java常用算法手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/55be892fadb5\">Java测试与设计 从单元测试到自动Web测试.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/3eac540d8a21\">Java并发编程之美.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a48e4a6f240e\">Java并发编程实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22f6aa9d7a9a\">Java并发编程实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/57a649b2480f\">Java程序员面试宝典+.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e37a683191be\">Java并发编程的艺术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/86a0020320d1\">Java编程实战宝典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d705e51e593c\">JavaEE开发的颠覆者 Spring Boot实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9f2042d91312\">Java9模块化开发核心原则与实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1c789f72f191\">Java Web整合开发王者归来.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e971c4dc3b3a\">Java Web实战开发完全学习手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ebf72040ed5d\">Java Web开发实例大全 提高卷.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1e4ea3d3a825\">Java编程思想(第4版)_.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/85a6bd76cfe8\">Java Web轻量级开发面试教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/912a0d4f8740\">Java JDK 8学习笔记.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22c5dd9daba7\">Java RESTful Web Service实战(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/61a219b12517\">Java Web开发实例大全 基础卷.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/cc48aeedde55\">Head First Java(第2版)中文版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/52603315c4d7\">Head First Servlets and JSP （第2版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d183d88b468d\">Java EE核心技术与应用.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22ea02b3d413\">Java 8实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d6f313502b41\">Java编程思想(第4版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/312682f29721\">Java 编程要点.pdf</a></li>\n</ol>\n<h2 id=\"spring1\"><a class=\"markdownIt-Anchor\" href=\"#spring1\"></a> Spring【1】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/6c343740549e\">Spring实战（第3版）.pdf</a></li>\n</ol>\n<h1 id=\"javascript1\"><a class=\"markdownIt-Anchor\" href=\"#javascript1\"></a> JavaScript【1】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/36a55873f521\">【JavaScript高级程序设计（第3版）】中文 高清 .pdf</a></li>\n</ol>\n<h1 id=\"python27\"><a class=\"markdownIt-Anchor\" href=\"#python27\"></a> Python【27】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ab083e7fcb7d\">21天学通Python.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9e2cb7d9ed11\">A Byte of Python.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a7aa35afd655\">A Primer on Scientfic Programming with Python, Third Edition .pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/31d1757a3788\">An Introduction to Statistical Learning.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/44078f3f6b7b\">Bayesian methods for hackers.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6c72bae01578\">Beautiful Soup 中文文档.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ffda3a29fdf8\">Beginning Game Development with Python and Pygame.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/37f709f0515d\">Beginning PyQt.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/c38336a8aa26\">Beginning Python Visualization：Crafting Visual Transformation Scripts.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1fd6db6d4166\">Beginning Python：Using Python 2.6 and Python 3.1.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8d821873094d\">Building Machine Learning Systems with Python.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/43e4a78e8bb1\">CherryPy Essentials：Rapid Python Web Application Development.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/964ea0cc0b93\">Deep Learning Tutorial.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/596c88402787\">Developing MeeGo apps with Python and QML.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8e29ed7b191b\">Dive Into Python 3.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a3c393a4309e\">Django 中文文档 1.8.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7a50874625f3\">Django 中文教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2bc267fb5588\">Effective Python：编写高质量Python代码的59个有效方法.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ef97c3d811db\">Ensemble Machine Learning-Methods and Applications.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/3fb5ed5c7c7e\">Evaluating Machine Learning Models.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/4de3e0deb299\">Expert Python Programming.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/653d03aed325\">Flask Documentation.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b5971dd0e34e\">Flask Web开发：基于Python的Web应用开发实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/cf4208d247d2\">Flask Web开发实战：入门、进阶与原理解析.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/26dd964ca82f\">Focus on SDL.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/517836ebcf65\">Foundations of Python Network Programming, 2nd Edition.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/53f57a61a78a\">Foundations of Python Network Programming, 3rd Edition.pdf</a></li>\n</ol>\n<h1 id=\"db\"><a class=\"markdownIt-Anchor\" href=\"#db\"></a> DB</h1>\n<h2 id=\"sql\"><a class=\"markdownIt-Anchor\" href=\"#sql\"></a> SQL</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ebf4b348c82e\">收获，不止SQL优化：抓住SQL的本质.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6f093a9ea474\">SQL解惑（第2版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/66d7f4b23661\">SQL注入自学指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ad0a3f46cfd1\">SQL初学者指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/69eefdd7babc\">SQL基础教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b69d9fa11ef8\">SQL必知必会（第4版）.pdf</a></li>\n</ol>\n<h2 id=\"mysql16\"><a class=\"markdownIt-Anchor\" href=\"#mysql16\"></a> MySQL【16】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/484352f68b34\">高性能MYSQL（第3版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/71c5c3812a01\">MySQL Cookbook(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/df081f84496b\">MySQL 从入门到项目实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f3a9cb8fd50e\">MySQL 超新手入门.epub</a></li>\n<li><a href=\"https://pan.quark.cn/s/2db70a53e08d\">MySQL 注入天书：sqli-labs 使用手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/aa1f8be674c4\">MySQL5.5从零开始学.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/80712cb50dc5\">MySQL笔记.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/c5d3608a0cd8\">MySQL必知必会（文字版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/23b3ffcc73b7\">MySQL常用命令大全.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/5b32d983e713\">MySQL技术精粹：架构、高级特性、性能优化与集群实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/88a02bb9333d\">MySQL技术内幕：InnoDB存储引擎(第2版).mobi</a></li>\n<li><a href=\"https://pan.quark.cn/s/d333b71839cc\">MySQL开发者：SQL权威指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9afc328dc966\">MySQL排错指南 .pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/23d1910b4c67\">Mysql数据库多实例安装.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/261cc035e429\">MySQL王者晋级之路.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/209850bffcd3\">深入浅出MySQL：数据库开发、优化与管理维护（第2版）.pdf</a></li>\n</ol>\n<h2 id=\"redis6\"><a class=\"markdownIt-Anchor\" href=\"#redis6\"></a> redis【6】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/58e05d8a9111\">Redis开发与运维.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d28067dcd022\">Redis入门指南（第2版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/194c7edee828\">Redis实战（扫描版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/197ebca7d0fa\">Redis实战（电子版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7c1d9d3e9a51\">Redis设计与实现.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/de28692010d4\">redis设计与实现(第二版).pdf</a></li>\n</ol>\n<h2 id=\"elasticsearch1\"><a class=\"markdownIt-Anchor\" href=\"#elasticsearch1\"></a> Elasticsearch【1】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/bee69b4d8a06\">Elasticsearch 权威指南（中文版）.pdf</a></li>\n</ol>\n<h1 id=\"docker2\"><a class=\"markdownIt-Anchor\" href=\"#docker2\"></a> docker【2】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ca398bce7ca5\">Docker开发实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/97647c02b7b3\">狂神说docker.pdf</a></li>\n</ol>\n<h1 id=\"git1\"><a class=\"markdownIt-Anchor\" href=\"#git1\"></a> git【1】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ec5be60730dc\">Pro Git.pdf</a></li>\n</ol>\n<h1 id=\"nginx1\"><a class=\"markdownIt-Anchor\" href=\"#nginx1\"></a> Nginx【1】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ffa1a4bb5b9b\">实战Nginx取代Apache的高性能Web服务器 .PDF</a></li>\n</ol>\n<h1 id=\"正则表达式6\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式6\"></a> 正则表达式【6】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ccc13e1790ea\">精通正则表达式（第三版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a58aa5a698c9\">学习正则表达式.epub</a></li>\n<li><a href=\"https://pan.quark.cn/s/ee3368009d77\">正则表达式.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/dfb3d043dda3\">正则表达式必知必会.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2be34e0bb33c\">正则表达式入门经典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/43f1a62689b0\">正则指引.pdf</a></li>\n</ol>\n<h1 id=\"软工2\"><a class=\"markdownIt-Anchor\" href=\"#软工2\"></a> 软工【2】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/f4f53786db9a\">编写可读代码的艺术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/0ebac0bfc13e\">重构-改善既有代码的设计（第2版）.pdf</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"net2\"><a class=\"markdownIt-Anchor\" href=\"#net2\"></a> .NET【2】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/97d7714c29f9\">.NET性能优化.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/791094f7f308\">你必须知道的.NET.pdf</a></li>\n</ol>\n<h1 id=\"os3\"><a class=\"markdownIt-Anchor\" href=\"#os3\"></a> OS【3】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/c65c12be1cd1\">深入理解计算机系统 第三版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6133d52dda52\">计算机操作系统 第三版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1ca930af409e\">现代操作系统 第四版.pdf</a></li>\n</ol>\n<h1 id=\"java106\"><a class=\"markdownIt-Anchor\" href=\"#java106\"></a> Java【106】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/b55131875a32\">重学Java设计模式.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/093468f34967\">数据结构与算法分析_Java语言描述(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ae461a002c7d\">实战Java虚拟机.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/25d360017961\">实战Java高并发程序设计.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6fd9c48983a4\">深入分析Java Web技术内幕.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9db67b7de2e6\">深入理解Java虚拟机：JVM高级特性与最佳实践(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/035892bbe4f0\">深入Java虚拟机.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/098e5c4ede8a\">自己动手写Java虚拟机.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b2587931e0ed\">Java语言描述.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/fb611cfdf7cd\">码出高效：Java开发手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/bd48432b67e9\">轻量级Java Web开发整合入门.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7ce207306528\">明解Java.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/13b630f5d3c5\">垃圾回收的算法与实现.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/bd6cae6ce891\">精通lambda表达式：Java多核编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8ed73e8f04d9\">深入理解Java内存模型.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8dc9ca0d7bc0\">剑指offer.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9ca00a3211f7\">疯狂Java讲义(第4版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b49112bba4d6\">Java网络编程(第4版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e3f0d0e6e369\">深入Java虚拟机：JVM G1GC的算法与实现.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/896fdf5f8011\">疯狂Java讲义(第4版)01.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f8eeddf95770\">疯狂Java讲义(第4版)02.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/37805fbeca4f\">疯狂Java讲义(第3版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2b8776118b91\">分布式Java应用：基础与实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8f7327c6c575\">第一行代码Java.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6036a531decf\">大型网站系统与Java中间件实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2d4cbc7b3717\">编写高质量代码：改善Java程序的151个建议.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/554b75625596\">编程之美——微软技术面试心得.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2b42aae2d0de\">阿里巴巴Java开发手册v1.4.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/3e71acd0f58c\">RxJava响应式编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/dd7fb4a619d3\">RxJava 2.x 实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/47d97a4c8bb2\">Offer来了：Java面试核心知识点精讲 原理篇.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2f57de531568\">Java中文文本信息处理(从海量到精准).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f83f3016fce4\">Java中间件技术及其应用开发.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e85a5e3a9f0f\">Java语言规范：基于Java SE 8.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a265c3c6c4b9\">阿里巴巴Java开发手册v1.3.1.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/453faf067f48\">Java游戏高级编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/229cc326da7b\">Java性能优化权威指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ae16ee7b458b\">Java遗传算法编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/298ec55322cc\">JVM性能调优-JVM内存整理及GC回收.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/10a444544f68\">Java性能权威指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/527f6ea2b06f\">Java项目开发全程实录(第三版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1af4f5be9eff\">Java核心技术 卷Ⅰ 基础知识(原书第10版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/5eb8dc721e92\">Java微服务.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2d49455e2316\">JVM面试专题及答案.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ec565e398e66\">Java网络编程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e33b727a4579\">Java核心技术 卷Ⅱ 高级特性(原书第10版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/cf7648a5ace8\">Java设计模式(第2版)中文版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22520d157795\">Java求职面试宝典(157页).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/4c605ea41273\">Java面试突击-V3.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/dfc358a0c654\">Java面试突击-V2.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ddb90a401115\">Java虚拟机规范(Java SE 7版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f6ac9f60791d\">Java网络编程第三版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/36ee41d95d85\">Java面试宝典2018版【超全】很不错.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/191afecfe820\">Java面经-百度准入职老哥整理.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/092a008fd879\">Java灵魂17问.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/10ae61781ab7\">Java开发实例大全(提高卷).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/266fa16cda11\">Java加密与解密的艺术-中文版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f6b8090e54aa\">Java面试资料汇总.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/24e831977547\">Java面试问题集.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f5298f429a2b\">Java面试突击-V1.0.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/98c0e84e7267\">Java加密与解密的艺术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d62c7886cd59\">Java核心面试知识整理.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/37daddb43cb0\">Java面试题以及答案(小生).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/43e91307ccb0\">Java面试精选72题.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/adad60bfe0b5\">Java面试题解惑系列.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2fb9c70886e9\">Java面试笔试题大汇总%28最全%2B详细答案.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7e7a042b5689\">Java9编程参考官方大全(第10版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/0b700ca8dbe9\">Java核心技术 卷Ⅱ 高级特性 (原书第9版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e48224fe015d\">Java核心技术 卷Ⅰ 基础知识(原书第8版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/650429452014\">Java核心技术 卷Ⅰ 基础知识(原书第9版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/797e42a287b3\">Java经典算法40题.doc</a></li>\n<li><a href=\"https://pan.quark.cn/s/7a3f4b2ab094\">Java并发编程从入门到精通.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/757980091c3b\">Java高并发编程详解.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1b78de0321fa\">Java基础教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/865a4e90053b\">Java多线程设计模式.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/5a67ce6880c7\">Java多线程编程实战指南(设计模式篇).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a142cb8d1284\">Java多线程编程核心技术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/846f3a3e486a\">Java从小白到大牛.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ed5f5752b050\">Java从入门到精通.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e4147e6fa91a\">Java程序员面试笔试宝典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/82458d9c4f89\">Java程序员面试宝典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a5c52053ec15\">Java程序员面试宝典(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9337683527c2\">Java常用算法手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/55be892fadb5\">Java测试与设计 从单元测试到自动Web测试.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/3eac540d8a21\">Java并发编程之美.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a48e4a6f240e\">Java并发编程实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22f6aa9d7a9a\">Java并发编程实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/57a649b2480f\">Java程序员面试宝典+.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e37a683191be\">Java并发编程的艺术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/86a0020320d1\">Java编程实战宝典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d705e51e593c\">JavaEE开发的颠覆者 Spring Boot实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9f2042d91312\">Java9模块化开发核心原则与实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1c789f72f191\">Java Web整合开发王者归来.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/e971c4dc3b3a\">Java Web实战开发完全学习手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ebf72040ed5d\">Java Web开发实例大全 提高卷.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1e4ea3d3a825\">Java编程思想(第4版)_.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/85a6bd76cfe8\">Java Web轻量级开发面试教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/912a0d4f8740\">Java JDK 8学习笔记.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22c5dd9daba7\">Java RESTful Web Service实战(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/61a219b12517\">Java Web开发实例大全 基础卷.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/cc48aeedde55\">Head First Java(第2版)中文版.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/52603315c4d7\">Head First Servlets and JSP （第2版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d183d88b468d\">Java EE核心技术与应用.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/22ea02b3d413\">Java 8实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d6f313502b41\">Java编程思想(第4版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/312682f29721\">Java 编程要点.pdf</a></li>\n</ol>\n<h2 id=\"spring1\"><a class=\"markdownIt-Anchor\" href=\"#spring1\"></a> Spring【1】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/6c343740549e\">Spring实战（第3版）.pdf</a></li>\n</ol>\n<h1 id=\"javascript1\"><a class=\"markdownIt-Anchor\" href=\"#javascript1\"></a> JavaScript【1】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/36a55873f521\">【JavaScript高级程序设计（第3版）】中文 高清 .pdf</a></li>\n</ol>\n<h1 id=\"python27\"><a class=\"markdownIt-Anchor\" href=\"#python27\"></a> Python【27】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ab083e7fcb7d\">21天学通Python.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9e2cb7d9ed11\">A Byte of Python.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a7aa35afd655\">A Primer on Scientfic Programming with Python, Third Edition .pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/31d1757a3788\">An Introduction to Statistical Learning.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/44078f3f6b7b\">Bayesian methods for hackers.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6c72bae01578\">Beautiful Soup 中文文档.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ffda3a29fdf8\">Beginning Game Development with Python and Pygame.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/37f709f0515d\">Beginning PyQt.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/c38336a8aa26\">Beginning Python Visualization：Crafting Visual Transformation Scripts.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/1fd6db6d4166\">Beginning Python：Using Python 2.6 and Python 3.1.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8d821873094d\">Building Machine Learning Systems with Python.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/43e4a78e8bb1\">CherryPy Essentials：Rapid Python Web Application Development.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/964ea0cc0b93\">Deep Learning Tutorial.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/596c88402787\">Developing MeeGo apps with Python and QML.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/8e29ed7b191b\">Dive Into Python 3.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a3c393a4309e\">Django 中文文档 1.8.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7a50874625f3\">Django 中文教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2bc267fb5588\">Effective Python：编写高质量Python代码的59个有效方法.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ef97c3d811db\">Ensemble Machine Learning-Methods and Applications.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/3fb5ed5c7c7e\">Evaluating Machine Learning Models.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/4de3e0deb299\">Expert Python Programming.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/653d03aed325\">Flask Documentation.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b5971dd0e34e\">Flask Web开发：基于Python的Web应用开发实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/cf4208d247d2\">Flask Web开发实战：入门、进阶与原理解析.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/26dd964ca82f\">Focus on SDL.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/517836ebcf65\">Foundations of Python Network Programming, 2nd Edition.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/53f57a61a78a\">Foundations of Python Network Programming, 3rd Edition.pdf</a></li>\n</ol>\n<h1 id=\"db\"><a class=\"markdownIt-Anchor\" href=\"#db\"></a> DB</h1>\n<h2 id=\"sql\"><a class=\"markdownIt-Anchor\" href=\"#sql\"></a> SQL</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ebf4b348c82e\">收获，不止SQL优化：抓住SQL的本质.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/6f093a9ea474\">SQL解惑（第2版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/66d7f4b23661\">SQL注入自学指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/ad0a3f46cfd1\">SQL初学者指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/69eefdd7babc\">SQL基础教程.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/b69d9fa11ef8\">SQL必知必会（第4版）.pdf</a></li>\n</ol>\n<h2 id=\"mysql16\"><a class=\"markdownIt-Anchor\" href=\"#mysql16\"></a> MySQL【16】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/484352f68b34\">高性能MYSQL（第3版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/71c5c3812a01\">MySQL Cookbook(第2版).pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/df081f84496b\">MySQL 从入门到项目实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/f3a9cb8fd50e\">MySQL 超新手入门.epub</a></li>\n<li><a href=\"https://pan.quark.cn/s/2db70a53e08d\">MySQL 注入天书：sqli-labs 使用手册.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/aa1f8be674c4\">MySQL5.5从零开始学.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/80712cb50dc5\">MySQL笔记.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/c5d3608a0cd8\">MySQL必知必会（文字版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/23b3ffcc73b7\">MySQL常用命令大全.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/5b32d983e713\">MySQL技术精粹：架构、高级特性、性能优化与集群实战.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/88a02bb9333d\">MySQL技术内幕：InnoDB存储引擎(第2版).mobi</a></li>\n<li><a href=\"https://pan.quark.cn/s/d333b71839cc\">MySQL开发者：SQL权威指南.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/9afc328dc966\">MySQL排错指南 .pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/23d1910b4c67\">Mysql数据库多实例安装.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/261cc035e429\">MySQL王者晋级之路.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/209850bffcd3\">深入浅出MySQL：数据库开发、优化与管理维护（第2版）.pdf</a></li>\n</ol>\n<h2 id=\"redis6\"><a class=\"markdownIt-Anchor\" href=\"#redis6\"></a> redis【6】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/58e05d8a9111\">Redis开发与运维.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/d28067dcd022\">Redis入门指南（第2版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/194c7edee828\">Redis实战（扫描版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/197ebca7d0fa\">Redis实战（电子版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/7c1d9d3e9a51\">Redis设计与实现.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/de28692010d4\">redis设计与实现(第二版).pdf</a></li>\n</ol>\n<h2 id=\"elasticsearch1\"><a class=\"markdownIt-Anchor\" href=\"#elasticsearch1\"></a> Elasticsearch【1】</h2>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/bee69b4d8a06\">Elasticsearch 权威指南（中文版）.pdf</a></li>\n</ol>\n<h1 id=\"docker2\"><a class=\"markdownIt-Anchor\" href=\"#docker2\"></a> docker【2】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ca398bce7ca5\">Docker开发实践.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/97647c02b7b3\">狂神说docker.pdf</a></li>\n</ol>\n<h1 id=\"git1\"><a class=\"markdownIt-Anchor\" href=\"#git1\"></a> git【1】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ec5be60730dc\">Pro Git.pdf</a></li>\n</ol>\n<h1 id=\"nginx1\"><a class=\"markdownIt-Anchor\" href=\"#nginx1\"></a> Nginx【1】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ffa1a4bb5b9b\">实战Nginx取代Apache的高性能Web服务器 .PDF</a></li>\n</ol>\n<h1 id=\"正则表达式6\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式6\"></a> 正则表达式【6】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/ccc13e1790ea\">精通正则表达式（第三版）.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/a58aa5a698c9\">学习正则表达式.epub</a></li>\n<li><a href=\"https://pan.quark.cn/s/ee3368009d77\">正则表达式.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/dfb3d043dda3\">正则表达式必知必会.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/2be34e0bb33c\">正则表达式入门经典.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/43f1a62689b0\">正则指引.pdf</a></li>\n</ol>\n<h1 id=\"软工2\"><a class=\"markdownIt-Anchor\" href=\"#软工2\"></a> 软工【2】</h1>\n<ol>\n<li><a href=\"https://pan.quark.cn/s/f4f53786db9a\">编写可读代码的艺术.pdf</a></li>\n<li><a href=\"https://pan.quark.cn/s/0ebac0bfc13e\">重构-改善既有代码的设计（第2版）.pdf</a></li>\n</ol>\n"},{"title":"正则表达式在不同语言中的对比：egrep、Java、JavaScript、Perl、Python","date":"2025-03-21T03:21:31.000Z","_content":"# 特性对比\n| 特性 |  | egrep | Java需要转义反斜杠 | JavaScriptES2018开始支持 | Perl | Python |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| <span style=\"white-space: nowrap;\">包/对象/模块</span> |  |  |  `java.util.regex` | RegExp |  | re |\n| 零宽断言 |  | × | √ | √|√ | √|\n| 非贪婪匹配 |  | × | √ | √| √|√ |\n| 命名捕获组 | 命名捕获组 | × | `(?<name>pattern)` |`(?<name>pattern)` |`(?<name>pattern)` | `(?P<name>pattern)` |\n| |  <span style=\"white-space: nowrap;\">正则中的引用</span> | | `\\k<name>` | `\\k<name>`| <span style=\"white-space: nowrap;\">`\\k<name>` 或`\\g{name}`</span> | `(?P=name)` |\n| | 替换中的引用 | ×| `${name}` | `$<name>` | `\\g<name>` | `\\g<name>` |\n| | 代码中的引用 | ×| `matcher.group(\"name\")` | `match.groups.name` | `$+{name}` | `match.group('name')` |\n| 语法 | 匹配 | <span style=\"white-space: nowrap;\">`egrep '...' file.txt`</span> | <span style=\"white-space: nowrap;\">`regex =Pattern.compile(\"...\");`</span><br/>`regex.matcher(text);` | `/.../g` | `m/.../` | `re.compile(r'...')` |\n| | 替换 | × |  | `text.replace(oldPattern,newPattern)` | `s/.../.../` | `re.sub(oldPattern,newPattern,text)` |\n\n\n# 示例对比\n## 基本语法\n| 语言 | 匹配Java或JavaScript | 匹配3到5个数字 |\n| --- | --- | --- |\n| egrep | `egrep 'Java(Script)?' file.txt` | `egrep '[0-9]{3,5}' file.txt` |\n| Perl | `$reply =~ m/Java(Script)?/` | `$reply =~ m/[0-9]{3,5}/` |\n| Java | `Pattern.compile(\"Java(Script)?\");` | `Pattern.compile(\"\\\\d{3,5}\");` |\n| JavaScript | `/Java(Script)?/g;` | `/\\d{3,5}/g;` |\n| Python | `re.compile(r'Java(Script)?')` | `re.compile(r'\\d{3,5}')` |\n\n\n## 正则表达式中引用命名捕获组\n### Perl `\\k<name>` \n```perl\nmy $text = \"hello-hello\";\nif ($text =~ /(?<word>\\w+)-\\k<word>/) {\n    print \"Matched: $&\\n\"; # 输出: Matched: hello-hello\n}\n```\n\n### Java `\\k<name>`\n```java\nString text = \"hello-hello\";\nString pattern = \"(?<word>\\\\w+)-\\\\k<word>\"; // 引用命名捕获组\n\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nif (matcher.find()) {\n    System.out.println(\"Matched: \" + matcher.group()); // 输出: Matched: hello-hello\n}\n```\n\n### JavaScript `\\k<name>`\n```javascript\nconst text = \"hello-hello\";\nconst pattern = /(?<word>\\w+)-\\k<word>/; // 引用命名捕获组\nconst match = text.match(pattern);\n\nif (match) {\n  console.log(\"Matched:\", match[0]); // 输出: Matched: hello-hello\n}\n```\n\n### Python `(?P=name)`\n```python\nimport re\n\ntext = \"hello-hello\"\npattern = r\"(?P<word>\\w+)-(?P=word)\"  # 引用命名捕获组\nmatch = re.search(pattern, text)\n\nif match:\n    print(\"Matched:\", match.group())  # 输出: Matched: hello-hello\n```\n\n## 替换中引用命名捕获组\n### Perl `$+{name}`\n```perl\nmy $text = \"2023-10-05\";\n$text =~ s/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/$+{day}\\/$+{month}\\/$+{year}/;\nprint \"$text\\n\"; # 输出: 05/10/2023\n```\n\n### Java `${name}`\n```java\nString text = \"2023-10-05\";\nString pattern = \"(?<year>\\\\d{4})-(?<month>\\\\d{2})-(?<day>\\\\d{2})\";\nString replacement = \"${day}/${month}/${year}\"; // 引用命名捕获组\n\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nString result = matcher.replaceFirst(replacement);\nSystem.out.println(result); // 输出: 05/10/2023\n```\n\n### JavaScript `$<name>`\n```javascript\nconst text = \"2023-10-05\";\nconst pattern = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\nconst result = text.replace(pattern, '$<day>/$<month>/$<year>');\nconsole.log(result); // 输出: 05/10/2023\n```\n\n### Python `\\g<name>`\n```python\nimport re\n\ntext = \"2023-10-05\"\npattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\nresult = re.sub(pattern, r'\\g<day>/\\g<month>/\\g<year>', text)\nprint(result) # 输出: 05/10/2023\n```\n\n## 代码中引用命名捕获组\n### Perl `$+{name}`\n```perl\nmy $text = \"2023-10-05\";\nif ($text =~ /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/) {\n    print \"$+{year}\\n\";  # 输出: 2023\n    print \"$+{month}\\n\"; # 输出: 10\n    print \"$+{day}\\n\";   # 输出: 05\n}\n```\n\n### Java `matcher.group(\"name\")`\n```java\nString text = \"2023-10-05\";\nString pattern = \"(?<year>\\\\d{4})-(?<month>\\\\d{2})-(?<day>\\\\d{2})\";\n\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nif (matcher.find()) {\n    System.out.println(\"Year: \" + matcher.group(\"year\"));  // 输出: Year: 2023\n    System.out.println(\"Month: \" + matcher.group(\"month\")); // 输出: Month: 10\n    System.out.println(\"Day: \" + matcher.group(\"day\"));     // 输出: Day: 05\n}\n```\n\n### JavaScript `match.groups.name`\n```javascript\nconst text = \"2023-10-05\";\nconst pattern = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\nconst match = text.match(pattern);\n\nif (match) {\n    console.log(`Year: ${match.groups.year}`);   // 输出: Year: 2023\n    console.log(`Month: ${match.groups.month}`); // 输出: Month: 10\n    console.log(`Day: ${match.groups.day}`);     // 输出: Day: 05\n}\n```\n\n### Python `match.group('name')`\n```python\nimport re\n\ntext = \"2023-10-05\"\npattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\nmatch = re.search(pattern, text)\n\nif match:\n    print(f\"Year: {match.group('year')}\")   # 输出: Year: 2023\n    print(f\"Month: {match.group('month')}\") # 输出: Month: 10\n    print(f\"Day: {match.group('day')}\")     # 输出: Day: 05\n```\n\n","source":"_posts/正则表达式在不同语言中的对比.md","raw":"---\ntitle: 正则表达式在不同语言中的对比：egrep、Java、JavaScript、Perl、Python\ndate: 2025-03-21 11:21:31\ntags:\n  - 语言对比\n  - 正则表达式\n  - egrep\n  - Java\n  - JavaScript\n  - Perl\n  - Python\ncategories:\n  - 语言对比\n---\n# 特性对比\n| 特性 |  | egrep | Java需要转义反斜杠 | JavaScriptES2018开始支持 | Perl | Python |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| <span style=\"white-space: nowrap;\">包/对象/模块</span> |  |  |  `java.util.regex` | RegExp |  | re |\n| 零宽断言 |  | × | √ | √|√ | √|\n| 非贪婪匹配 |  | × | √ | √| √|√ |\n| 命名捕获组 | 命名捕获组 | × | `(?<name>pattern)` |`(?<name>pattern)` |`(?<name>pattern)` | `(?P<name>pattern)` |\n| |  <span style=\"white-space: nowrap;\">正则中的引用</span> | | `\\k<name>` | `\\k<name>`| <span style=\"white-space: nowrap;\">`\\k<name>` 或`\\g{name}`</span> | `(?P=name)` |\n| | 替换中的引用 | ×| `${name}` | `$<name>` | `\\g<name>` | `\\g<name>` |\n| | 代码中的引用 | ×| `matcher.group(\"name\")` | `match.groups.name` | `$+{name}` | `match.group('name')` |\n| 语法 | 匹配 | <span style=\"white-space: nowrap;\">`egrep '...' file.txt`</span> | <span style=\"white-space: nowrap;\">`regex =Pattern.compile(\"...\");`</span><br/>`regex.matcher(text);` | `/.../g` | `m/.../` | `re.compile(r'...')` |\n| | 替换 | × |  | `text.replace(oldPattern,newPattern)` | `s/.../.../` | `re.sub(oldPattern,newPattern,text)` |\n\n\n# 示例对比\n## 基本语法\n| 语言 | 匹配Java或JavaScript | 匹配3到5个数字 |\n| --- | --- | --- |\n| egrep | `egrep 'Java(Script)?' file.txt` | `egrep '[0-9]{3,5}' file.txt` |\n| Perl | `$reply =~ m/Java(Script)?/` | `$reply =~ m/[0-9]{3,5}/` |\n| Java | `Pattern.compile(\"Java(Script)?\");` | `Pattern.compile(\"\\\\d{3,5}\");` |\n| JavaScript | `/Java(Script)?/g;` | `/\\d{3,5}/g;` |\n| Python | `re.compile(r'Java(Script)?')` | `re.compile(r'\\d{3,5}')` |\n\n\n## 正则表达式中引用命名捕获组\n### Perl `\\k<name>` \n```perl\nmy $text = \"hello-hello\";\nif ($text =~ /(?<word>\\w+)-\\k<word>/) {\n    print \"Matched: $&\\n\"; # 输出: Matched: hello-hello\n}\n```\n\n### Java `\\k<name>`\n```java\nString text = \"hello-hello\";\nString pattern = \"(?<word>\\\\w+)-\\\\k<word>\"; // 引用命名捕获组\n\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nif (matcher.find()) {\n    System.out.println(\"Matched: \" + matcher.group()); // 输出: Matched: hello-hello\n}\n```\n\n### JavaScript `\\k<name>`\n```javascript\nconst text = \"hello-hello\";\nconst pattern = /(?<word>\\w+)-\\k<word>/; // 引用命名捕获组\nconst match = text.match(pattern);\n\nif (match) {\n  console.log(\"Matched:\", match[0]); // 输出: Matched: hello-hello\n}\n```\n\n### Python `(?P=name)`\n```python\nimport re\n\ntext = \"hello-hello\"\npattern = r\"(?P<word>\\w+)-(?P=word)\"  # 引用命名捕获组\nmatch = re.search(pattern, text)\n\nif match:\n    print(\"Matched:\", match.group())  # 输出: Matched: hello-hello\n```\n\n## 替换中引用命名捕获组\n### Perl `$+{name}`\n```perl\nmy $text = \"2023-10-05\";\n$text =~ s/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/$+{day}\\/$+{month}\\/$+{year}/;\nprint \"$text\\n\"; # 输出: 05/10/2023\n```\n\n### Java `${name}`\n```java\nString text = \"2023-10-05\";\nString pattern = \"(?<year>\\\\d{4})-(?<month>\\\\d{2})-(?<day>\\\\d{2})\";\nString replacement = \"${day}/${month}/${year}\"; // 引用命名捕获组\n\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nString result = matcher.replaceFirst(replacement);\nSystem.out.println(result); // 输出: 05/10/2023\n```\n\n### JavaScript `$<name>`\n```javascript\nconst text = \"2023-10-05\";\nconst pattern = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\nconst result = text.replace(pattern, '$<day>/$<month>/$<year>');\nconsole.log(result); // 输出: 05/10/2023\n```\n\n### Python `\\g<name>`\n```python\nimport re\n\ntext = \"2023-10-05\"\npattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\nresult = re.sub(pattern, r'\\g<day>/\\g<month>/\\g<year>', text)\nprint(result) # 输出: 05/10/2023\n```\n\n## 代码中引用命名捕获组\n### Perl `$+{name}`\n```perl\nmy $text = \"2023-10-05\";\nif ($text =~ /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/) {\n    print \"$+{year}\\n\";  # 输出: 2023\n    print \"$+{month}\\n\"; # 输出: 10\n    print \"$+{day}\\n\";   # 输出: 05\n}\n```\n\n### Java `matcher.group(\"name\")`\n```java\nString text = \"2023-10-05\";\nString pattern = \"(?<year>\\\\d{4})-(?<month>\\\\d{2})-(?<day>\\\\d{2})\";\n\nPattern regex = Pattern.compile(pattern);\nMatcher matcher = regex.matcher(text);\n\nif (matcher.find()) {\n    System.out.println(\"Year: \" + matcher.group(\"year\"));  // 输出: Year: 2023\n    System.out.println(\"Month: \" + matcher.group(\"month\")); // 输出: Month: 10\n    System.out.println(\"Day: \" + matcher.group(\"day\"));     // 输出: Day: 05\n}\n```\n\n### JavaScript `match.groups.name`\n```javascript\nconst text = \"2023-10-05\";\nconst pattern = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\nconst match = text.match(pattern);\n\nif (match) {\n    console.log(`Year: ${match.groups.year}`);   // 输出: Year: 2023\n    console.log(`Month: ${match.groups.month}`); // 输出: Month: 10\n    console.log(`Day: ${match.groups.day}`);     // 输出: Day: 05\n}\n```\n\n### Python `match.group('name')`\n```python\nimport re\n\ntext = \"2023-10-05\"\npattern = r\"(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})\"\nmatch = re.search(pattern, text)\n\nif match:\n    print(f\"Year: {match.group('year')}\")   # 输出: Year: 2023\n    print(f\"Month: {match.group('month')}\") # 输出: Month: 10\n    print(f\"Day: {match.group('day')}\")     # 输出: Day: 05\n```\n\n","slug":"正则表达式在不同语言中的对比","published":1,"updated":"2025-03-21T04:15:59.011Z","comments":1,"layout":"post","photos":[],"_id":"cm8o1f16m000u64v4h8r1gwmd","content":"<h1 id=\"特性对比\"><a class=\"markdownIt-Anchor\" href=\"#特性对比\"></a> 特性对比</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">egrep</th>\n<th style=\"text-align:center\">Java需要转义反斜杠</th>\n<th style=\"text-align:center\">JavaScriptES2018开始支持</th>\n<th style=\"text-align:center\">Perl</th>\n<th style=\"text-align:center\">Python</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\">包/对象/模块</span></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>java.util.regex</code></td>\n<td style=\"text-align:center\">RegExp</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">re</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">零宽断言</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">非贪婪匹配</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">命名捕获组</td>\n<td style=\"text-align:center\">命名捕获组</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"><code>(?&lt;name&gt;pattern)</code></td>\n<td style=\"text-align:center\"><code>(?&lt;name&gt;pattern)</code></td>\n<td style=\"text-align:center\"><code>(?&lt;name&gt;pattern)</code></td>\n<td style=\"text-align:center\"><code>(?P&lt;name&gt;pattern)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\">正则中的引用</span></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>\\k&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><code>\\k&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\"><code>\\k&lt;name&gt;</code> 或<code>\\g&#123;name&#125;</code></span></td>\n<td style=\"text-align:center\"><code>(?P=name)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">替换中的引用</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"><code>$&#123;name&#125;</code></td>\n<td style=\"text-align:center\"><code>$&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><code>\\g&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><code>\\g&lt;name&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">代码中的引用</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"><code>matcher.group(&quot;name&quot;)</code></td>\n<td style=\"text-align:center\"><code>match.groups.name</code></td>\n<td style=\"text-align:center\"><code>$+&#123;name&#125;</code></td>\n<td style=\"text-align:center\"><code>match.group('name')</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语法</td>\n<td style=\"text-align:center\">匹配</td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\"><code>egrep '...' file.txt</code></span></td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\"><code>regex =Pattern.compile(&quot;...&quot;);</code></span><br/><code>regex.matcher(text);</code></td>\n<td style=\"text-align:center\"><code>/.../g</code></td>\n<td style=\"text-align:center\"><code>m/.../</code></td>\n<td style=\"text-align:center\"><code>re.compile(r'...')</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">替换</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>text.replace(oldPattern,newPattern)</code></td>\n<td style=\"text-align:center\"><code>s/.../.../</code></td>\n<td style=\"text-align:center\"><code>re.sub(oldPattern,newPattern,text)</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"示例对比\"><a class=\"markdownIt-Anchor\" href=\"#示例对比\"></a> 示例对比</h1>\n<h2 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\"></a> 基本语法</h2>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>匹配Java或JavaScript</th>\n<th>匹配3到5个数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>egrep</td>\n<td><code>egrep 'Java(Script)?' file.txt</code></td>\n<td><code>egrep '[0-9]&#123;3,5&#125;' file.txt</code></td>\n</tr>\n<tr>\n<td>Perl</td>\n<td><code>$reply =~ m/Java(Script)?/</code></td>\n<td><code>$reply =~ m/[0-9]&#123;3,5&#125;/</code></td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>Pattern.compile(&quot;Java(Script)?&quot;);</code></td>\n<td><code>Pattern.compile(&quot;\\\\d&#123;3,5&#125;&quot;);</code></td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td><code>/Java(Script)?/g;</code></td>\n<td><code>/\\d&#123;3,5&#125;/g;</code></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><code>re.compile(r'Java(Script)?')</code></td>\n<td><code>re.compile(r'\\d&#123;3,5&#125;')</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"正则表达式中引用命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式中引用命名捕获组\"></a> 正则表达式中引用命名捕获组</h2>\n<h3 id=\"perl-kname\"><a class=\"markdownIt-Anchor\" href=\"#perl-kname\"></a> Perl <code>\\k&lt;name&gt;</code></h3>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"variable\">$text</span> = <span class=\"string\">&quot;hello-hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$text</span> =~ <span class=\"regexp\">/(?&lt;word&gt;\\w+)-\\k&lt;word&gt;/</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;Matched: <span class=\"variable\">$&amp;</span>\\n&quot;</span>; <span class=\"comment\"># 输出: Matched: hello-hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-kname\"><a class=\"markdownIt-Anchor\" href=\"#java-kname\"></a> Java <code>\\k&lt;name&gt;</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello-hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(?&lt;word&gt;\\\\w+)-\\\\k&lt;word&gt;&quot;</span>; <span class=\"comment\">// 引用命名捕获组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> regex.matcher(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Matched: &quot;</span> + matcher.group()); <span class=\"comment\">// 输出: Matched: hello-hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript-kname\"><a class=\"markdownIt-Anchor\" href=\"#javascript-kname\"></a> JavaScript <code>\\k&lt;name&gt;</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"string\">&quot;hello-hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = <span class=\"regexp\">/(?&lt;word&gt;\\w+)-\\k&lt;word&gt;/</span>; <span class=\"comment\">// 引用命名捕获组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> match = text.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Matched:&quot;</span>, match[<span class=\"number\">0</span>]); <span class=\"comment\">// 输出: Matched: hello-hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"python-pname\"><a class=\"markdownIt-Anchor\" href=\"#python-pname\"></a> Python <code>(?P=name)</code></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">&quot;hello-hello&quot;</span></span><br><span class=\"line\">pattern = <span class=\"string\">r&quot;(?P&lt;word&gt;\\w+)-(?P=word)&quot;</span>  <span class=\"comment\"># 引用命名捕获组</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.search(pattern, text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Matched:&quot;</span>, <span class=\"keyword\">match</span>.group())  <span class=\"comment\"># 输出: Matched: hello-hello</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"替换中引用命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#替换中引用命名捕获组\"></a> 替换中引用命名捕获组</h2>\n<h3 id=\"perl-name\"><a class=\"markdownIt-Anchor\" href=\"#perl-name\"></a> Perl <code>$+&#123;name&#125;</code></h3>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"variable\">$text</span> = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$text</span> =~ <span class=\"regexp\">s/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/$+&#123;day&#125;\\/$+&#123;month&#125;\\/$+&#123;year&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$text</span>\\n&quot;</span>; <span class=\"comment\"># 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"java-name\"><a class=\"markdownIt-Anchor\" href=\"#java-name\"></a> Java <code>$&#123;name&#125;</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(?&lt;year&gt;\\\\d&#123;4&#125;)-(?&lt;month&gt;\\\\d&#123;2&#125;)-(?&lt;day&gt;\\\\d&#123;2&#125;)&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">replacement</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;$&#123;day&#125;/$&#123;month&#125;/$&#123;year&#125;&quot;</span>; <span class=\"comment\">// 引用命名捕获组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> regex.matcher(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> matcher.replaceFirst(replacement);</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript-name\"><a class=\"markdownIt-Anchor\" href=\"#javascript-name\"></a> JavaScript <code>$&lt;name&gt;</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = text.<span class=\"title function_\">replace</span>(pattern, <span class=\"string\">&#x27;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"python-gname\"><a class=\"markdownIt-Anchor\" href=\"#python-gname\"></a> Python <code>\\g&lt;name&gt;</code></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">&quot;2023-10-05&quot;</span></span><br><span class=\"line\">pattern = <span class=\"string\">r&quot;(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;2&#125;)-(?P&lt;day&gt;\\d&#123;2&#125;)&quot;</span></span><br><span class=\"line\">result = re.sub(pattern, <span class=\"string\">r&#x27;\\g&lt;day&gt;/\\g&lt;month&gt;/\\g&lt;year&gt;&#x27;</span>, text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result) <span class=\"comment\"># 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码中引用命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#代码中引用命名捕获组\"></a> 代码中引用命名捕获组</h2>\n<h3 id=\"perl-name-2\"><a class=\"markdownIt-Anchor\" href=\"#perl-name-2\"></a> Perl <code>$+&#123;name&#125;</code></h3>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"variable\">$text</span> = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$text</span> =~ <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$+</span>&#123;year&#125;\\n&quot;</span>;  <span class=\"comment\"># 输出: 2023</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$+</span>&#123;month&#125;\\n&quot;</span>; <span class=\"comment\"># 输出: 10</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$+</span>&#123;day&#125;\\n&quot;</span>;   <span class=\"comment\"># 输出: 05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-matchergroupname\"><a class=\"markdownIt-Anchor\" href=\"#java-matchergroupname\"></a> Java <code>matcher.group(&quot;name&quot;)</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(?&lt;year&gt;\\\\d&#123;4&#125;)-(?&lt;month&gt;\\\\d&#123;2&#125;)-(?&lt;day&gt;\\\\d&#123;2&#125;)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> regex.matcher(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Year: &quot;</span> + matcher.group(<span class=\"string\">&quot;year&quot;</span>));  <span class=\"comment\">// 输出: Year: 2023</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Month: &quot;</span> + matcher.group(<span class=\"string\">&quot;month&quot;</span>)); <span class=\"comment\">// 输出: Month: 10</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Day: &quot;</span> + matcher.group(<span class=\"string\">&quot;day&quot;</span>));     <span class=\"comment\">// 输出: Day: 05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript-matchgroupsname\"><a class=\"markdownIt-Anchor\" href=\"#javascript-matchgroupsname\"></a> JavaScript <code>match.groups.name</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> match = text.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Year: <span class=\"subst\">$&#123;match.groups.year&#125;</span>`</span>);   <span class=\"comment\">// 输出: Year: 2023</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Month: <span class=\"subst\">$&#123;match.groups.month&#125;</span>`</span>); <span class=\"comment\">// 输出: Month: 10</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Day: <span class=\"subst\">$&#123;match.groups.day&#125;</span>`</span>);     <span class=\"comment\">// 输出: Day: 05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"python-matchgroupname\"><a class=\"markdownIt-Anchor\" href=\"#python-matchgroupname\"></a> Python <code>match.group('name')</code></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">&quot;2023-10-05&quot;</span></span><br><span class=\"line\">pattern = <span class=\"string\">r&quot;(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;2&#125;)-(?P&lt;day&gt;\\d&#123;2&#125;)&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.search(pattern, text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Year: <span class=\"subst\">&#123;<span class=\"keyword\">match</span>.group(<span class=\"string\">&#x27;year&#x27;</span>)&#125;</span>&quot;</span>)   <span class=\"comment\"># 输出: Year: 2023</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Month: <span class=\"subst\">&#123;<span class=\"keyword\">match</span>.group(<span class=\"string\">&#x27;month&#x27;</span>)&#125;</span>&quot;</span>) <span class=\"comment\"># 输出: Month: 10</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Day: <span class=\"subst\">&#123;<span class=\"keyword\">match</span>.group(<span class=\"string\">&#x27;day&#x27;</span>)&#125;</span>&quot;</span>)     <span class=\"comment\"># 输出: Day: 05</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"特性对比\"><a class=\"markdownIt-Anchor\" href=\"#特性对比\"></a> 特性对比</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">egrep</th>\n<th style=\"text-align:center\">Java需要转义反斜杠</th>\n<th style=\"text-align:center\">JavaScriptES2018开始支持</th>\n<th style=\"text-align:center\">Perl</th>\n<th style=\"text-align:center\">Python</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\">包/对象/模块</span></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>java.util.regex</code></td>\n<td style=\"text-align:center\">RegExp</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">re</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">零宽断言</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">非贪婪匹配</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">命名捕获组</td>\n<td style=\"text-align:center\">命名捕获组</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"><code>(?&lt;name&gt;pattern)</code></td>\n<td style=\"text-align:center\"><code>(?&lt;name&gt;pattern)</code></td>\n<td style=\"text-align:center\"><code>(?&lt;name&gt;pattern)</code></td>\n<td style=\"text-align:center\"><code>(?P&lt;name&gt;pattern)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\">正则中的引用</span></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>\\k&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><code>\\k&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\"><code>\\k&lt;name&gt;</code> 或<code>\\g&#123;name&#125;</code></span></td>\n<td style=\"text-align:center\"><code>(?P=name)</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">替换中的引用</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"><code>$&#123;name&#125;</code></td>\n<td style=\"text-align:center\"><code>$&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><code>\\g&lt;name&gt;</code></td>\n<td style=\"text-align:center\"><code>\\g&lt;name&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">代码中的引用</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"><code>matcher.group(&quot;name&quot;)</code></td>\n<td style=\"text-align:center\"><code>match.groups.name</code></td>\n<td style=\"text-align:center\"><code>$+&#123;name&#125;</code></td>\n<td style=\"text-align:center\"><code>match.group('name')</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语法</td>\n<td style=\"text-align:center\">匹配</td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\"><code>egrep '...' file.txt</code></span></td>\n<td style=\"text-align:center\"><span style=\"white-space: nowrap;\"><code>regex =Pattern.compile(&quot;...&quot;);</code></span><br/><code>regex.matcher(text);</code></td>\n<td style=\"text-align:center\"><code>/.../g</code></td>\n<td style=\"text-align:center\"><code>m/.../</code></td>\n<td style=\"text-align:center\"><code>re.compile(r'...')</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">替换</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>text.replace(oldPattern,newPattern)</code></td>\n<td style=\"text-align:center\"><code>s/.../.../</code></td>\n<td style=\"text-align:center\"><code>re.sub(oldPattern,newPattern,text)</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"示例对比\"><a class=\"markdownIt-Anchor\" href=\"#示例对比\"></a> 示例对比</h1>\n<h2 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\"></a> 基本语法</h2>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>匹配Java或JavaScript</th>\n<th>匹配3到5个数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>egrep</td>\n<td><code>egrep 'Java(Script)?' file.txt</code></td>\n<td><code>egrep '[0-9]&#123;3,5&#125;' file.txt</code></td>\n</tr>\n<tr>\n<td>Perl</td>\n<td><code>$reply =~ m/Java(Script)?/</code></td>\n<td><code>$reply =~ m/[0-9]&#123;3,5&#125;/</code></td>\n</tr>\n<tr>\n<td>Java</td>\n<td><code>Pattern.compile(&quot;Java(Script)?&quot;);</code></td>\n<td><code>Pattern.compile(&quot;\\\\d&#123;3,5&#125;&quot;);</code></td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td><code>/Java(Script)?/g;</code></td>\n<td><code>/\\d&#123;3,5&#125;/g;</code></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><code>re.compile(r'Java(Script)?')</code></td>\n<td><code>re.compile(r'\\d&#123;3,5&#125;')</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"正则表达式中引用命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式中引用命名捕获组\"></a> 正则表达式中引用命名捕获组</h2>\n<h3 id=\"perl-kname\"><a class=\"markdownIt-Anchor\" href=\"#perl-kname\"></a> Perl <code>\\k&lt;name&gt;</code></h3>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"variable\">$text</span> = <span class=\"string\">&quot;hello-hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$text</span> =~ <span class=\"regexp\">/(?&lt;word&gt;\\w+)-\\k&lt;word&gt;/</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;Matched: <span class=\"variable\">$&amp;</span>\\n&quot;</span>; <span class=\"comment\"># 输出: Matched: hello-hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-kname\"><a class=\"markdownIt-Anchor\" href=\"#java-kname\"></a> Java <code>\\k&lt;name&gt;</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello-hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(?&lt;word&gt;\\\\w+)-\\\\k&lt;word&gt;&quot;</span>; <span class=\"comment\">// 引用命名捕获组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> regex.matcher(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Matched: &quot;</span> + matcher.group()); <span class=\"comment\">// 输出: Matched: hello-hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript-kname\"><a class=\"markdownIt-Anchor\" href=\"#javascript-kname\"></a> JavaScript <code>\\k&lt;name&gt;</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"string\">&quot;hello-hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = <span class=\"regexp\">/(?&lt;word&gt;\\w+)-\\k&lt;word&gt;/</span>; <span class=\"comment\">// 引用命名捕获组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> match = text.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Matched:&quot;</span>, match[<span class=\"number\">0</span>]); <span class=\"comment\">// 输出: Matched: hello-hello</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"python-pname\"><a class=\"markdownIt-Anchor\" href=\"#python-pname\"></a> Python <code>(?P=name)</code></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">&quot;hello-hello&quot;</span></span><br><span class=\"line\">pattern = <span class=\"string\">r&quot;(?P&lt;word&gt;\\w+)-(?P=word)&quot;</span>  <span class=\"comment\"># 引用命名捕获组</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.search(pattern, text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Matched:&quot;</span>, <span class=\"keyword\">match</span>.group())  <span class=\"comment\"># 输出: Matched: hello-hello</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"替换中引用命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#替换中引用命名捕获组\"></a> 替换中引用命名捕获组</h2>\n<h3 id=\"perl-name\"><a class=\"markdownIt-Anchor\" href=\"#perl-name\"></a> Perl <code>$+&#123;name&#125;</code></h3>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"variable\">$text</span> = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$text</span> =~ <span class=\"regexp\">s/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/$+&#123;day&#125;\\/$+&#123;month&#125;\\/$+&#123;year&#125;/</span>;</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$text</span>\\n&quot;</span>; <span class=\"comment\"># 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"java-name\"><a class=\"markdownIt-Anchor\" href=\"#java-name\"></a> Java <code>$&#123;name&#125;</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(?&lt;year&gt;\\\\d&#123;4&#125;)-(?&lt;month&gt;\\\\d&#123;2&#125;)-(?&lt;day&gt;\\\\d&#123;2&#125;)&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">replacement</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;$&#123;day&#125;/$&#123;month&#125;/$&#123;year&#125;&quot;</span>; <span class=\"comment\">// 引用命名捕获组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> regex.matcher(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> matcher.replaceFirst(replacement);</span><br><span class=\"line\">System.out.println(result); <span class=\"comment\">// 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript-name\"><a class=\"markdownIt-Anchor\" href=\"#javascript-name\"></a> JavaScript <code>$&lt;name&gt;</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = text.<span class=\"title function_\">replace</span>(pattern, <span class=\"string\">&#x27;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"python-gname\"><a class=\"markdownIt-Anchor\" href=\"#python-gname\"></a> Python <code>\\g&lt;name&gt;</code></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">&quot;2023-10-05&quot;</span></span><br><span class=\"line\">pattern = <span class=\"string\">r&quot;(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;2&#125;)-(?P&lt;day&gt;\\d&#123;2&#125;)&quot;</span></span><br><span class=\"line\">result = re.sub(pattern, <span class=\"string\">r&#x27;\\g&lt;day&gt;/\\g&lt;month&gt;/\\g&lt;year&gt;&#x27;</span>, text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result) <span class=\"comment\"># 输出: 05/10/2023</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"代码中引用命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#代码中引用命名捕获组\"></a> 代码中引用命名捕获组</h2>\n<h3 id=\"perl-name-2\"><a class=\"markdownIt-Anchor\" href=\"#perl-name-2\"></a> Perl <code>$+&#123;name&#125;</code></h3>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">my</span> <span class=\"variable\">$text</span> = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$text</span> =~ <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$+</span>&#123;year&#125;\\n&quot;</span>;  <span class=\"comment\"># 输出: 2023</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$+</span>&#123;month&#125;\\n&quot;</span>; <span class=\"comment\"># 输出: 10</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">&quot;<span class=\"variable\">$+</span>&#123;day&#125;\\n&quot;</span>;   <span class=\"comment\"># 输出: 05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"java-matchergroupname\"><a class=\"markdownIt-Anchor\" href=\"#java-matchergroupname\"></a> Java <code>matcher.group(&quot;name&quot;)</code></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(?&lt;year&gt;\\\\d&#123;4&#125;)-(?&lt;month&gt;\\\\d&#123;2&#125;)-(?&lt;day&gt;\\\\d&#123;2&#125;)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Pattern</span> <span class=\"variable\">regex</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"><span class=\"type\">Matcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> regex.matcher(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Year: &quot;</span> + matcher.group(<span class=\"string\">&quot;year&quot;</span>));  <span class=\"comment\">// 输出: Year: 2023</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Month: &quot;</span> + matcher.group(<span class=\"string\">&quot;month&quot;</span>)); <span class=\"comment\">// 输出: Month: 10</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Day: &quot;</span> + matcher.group(<span class=\"string\">&quot;day&quot;</span>));     <span class=\"comment\">// 输出: Day: 05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript-matchgroupsname\"><a class=\"markdownIt-Anchor\" href=\"#javascript-matchgroupsname\"></a> JavaScript <code>match.groups.name</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> text = <span class=\"string\">&quot;2023-10-05&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = <span class=\"regexp\">/(?&lt;year&gt;\\d&#123;4&#125;)-(?&lt;month&gt;\\d&#123;2&#125;)-(?&lt;day&gt;\\d&#123;2&#125;)/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> match = text.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Year: <span class=\"subst\">$&#123;match.groups.year&#125;</span>`</span>);   <span class=\"comment\">// 输出: Year: 2023</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Month: <span class=\"subst\">$&#123;match.groups.month&#125;</span>`</span>); <span class=\"comment\">// 输出: Month: 10</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Day: <span class=\"subst\">$&#123;match.groups.day&#125;</span>`</span>);     <span class=\"comment\">// 输出: Day: 05</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"python-matchgroupname\"><a class=\"markdownIt-Anchor\" href=\"#python-matchgroupname\"></a> Python <code>match.group('name')</code></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">text = <span class=\"string\">&quot;2023-10-05&quot;</span></span><br><span class=\"line\">pattern = <span class=\"string\">r&quot;(?P&lt;year&gt;\\d&#123;4&#125;)-(?P&lt;month&gt;\\d&#123;2&#125;)-(?P&lt;day&gt;\\d&#123;2&#125;)&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> = re.search(pattern, text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Year: <span class=\"subst\">&#123;<span class=\"keyword\">match</span>.group(<span class=\"string\">&#x27;year&#x27;</span>)&#125;</span>&quot;</span>)   <span class=\"comment\"># 输出: Year: 2023</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Month: <span class=\"subst\">&#123;<span class=\"keyword\">match</span>.group(<span class=\"string\">&#x27;month&#x27;</span>)&#125;</span>&quot;</span>) <span class=\"comment\"># 输出: Month: 10</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Day: <span class=\"subst\">&#123;<span class=\"keyword\">match</span>.group(<span class=\"string\">&#x27;day&#x27;</span>)&#125;</span>&quot;</span>)     <span class=\"comment\"># 输出: Day: 05</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Oracle 数据库物化视图未更新问题分析与解决","date":"2025-03-28T06:50:29.000Z","_content":"# 问题定位\nthis_date 非空但长时间不变化：可能作业卡死。\nthis_date 为空但 next_date 为过去时间: 可能作业队列进程不足。\nnext_date 为过去时间：说明作业调度已经停止运行。\n\n# 原因分析\nthis_date 字段表示：\n1. 当前执行开始时间：记录作业最近一次开始执行的时间戳\n2. 运行中标识：当作业正在执行时，此字段会显示开始时间\n3. 完成状态：作业执行完成后，此字段会被清空（设为NULL）\n所以this_date 非空但长时间不变化可能是作业卡死导致的。\n   \n可能导致next_date为过去时间的原因：\n1. next_date设置错误，导致next_date为过去时间\n2. 物化视图创建时间较长，创建结束时间>创建语句中指定的开始时间（仅为猜测，待验证，想要验证物化视图是否会更新一般会设置一个靠近当前时间的开始时间，当物化视图创建时间较长时，容易出现这种情况）\n3. 作业调度程序出现故障，导致作业未能正常运行，next_date就会停留在过去（DBMS_JOB无法查看日志，推荐使用 DBMS_SCHEDULER）\n\n# 尝试解决方法\n1. 修改next_date为未来的时间\n```sql\n    BEGIN\n        DBMS_JOB.NEXT_DATE(jobid, SYSDATE + 1/720); -- 设置为2分钟以后\n        COMMIT;\n    END;\n    /\n```\n注意：修改next_date必须COMMIT，否则修改不会生效。\n2. 修改成功后仍然没有更新物化视图，再次排查发现this_date为过去时间，且长时间不变，查找原因可能是作业卡死导致的，尝试修改this_date（无效）\n   2.1. 标记作业为 BROKEN 再恢复(无效)\n   ```sql\n   BEGIN\n       DBMS_JOB.BROKEN(job_id => 您的作业ID, broken => TRUE);\n       DBMS_JOB.BROKEN(job_id => 您的作业ID, broken => FALSE);\n       COMMIT;\n   END;\n   /\n   ```\n   2.2. 修改作业的 INTERVAL（无效）\n   ```sql\n   BEGIN\n       DBMS_JOB.INTERVAL(job_id => 您的作业ID, interval => 'SYSDATE+1');\n       COMMIT;\n   END;\n   /\n   ```\n\n3. 重启作业调度程序（无效）\n```sql\nBEGIN\n    DBMS_JOB.RUN(jobid);\nEND;\n/\n```\n4. 重新创建物化视图（有效）\n虽然重建物化视图有效，但数据量大时，DROP操作耗时较长，生产环境中4G数据量，执行DROP操作需要19个小时，对比CREATE操作需要半个小时，DROP操作耗时还是比较久的。\n```sql\nDROP MATERIALIZED VIEW mview_name;\nCREATE MATERIALIZED VIEW mview_name AS ...;\n/\n```\n5. 排查日志发现物化视图定时任务有DELETE操作，手动执行刷新组操作`DBMS_REFRESH.REFRESH`阻塞住了，无论是通过定时任务方式，还是手动执行，都不能同时刷新。\n   kill对应进程后，优化刷新方式。\n   5.1. 手动刷新物化视图，设置`ATOMIC_REFRESH`为`FALSE`（有效）\n      定时任务自带的刷新是通过刷新组方式刷新，默认开启原子操作，改为使用单个物化视图刷新方式刷新，设置`ATOMIC_REFRESH`为`FALSE`，关闭原子操作，删除数据时无需记录日志，可提高刷新效率（刷新时长大约半小时，与创建物化视图时间相当）。\n   ```sql\n   BEGIN\n   DBMS_MVIEW.REFRESH('MVIEW_NAME', 'C',ATOMIC_REFRESH => FALSE);\n   END;\n   /\n   ```\n   \n   5.2. 删除重建作业，使用单个物化视图刷新方式刷新（推荐）\n   在物化视图定时刷新任务中，删除重建作业并非删除重建物化视图，无需考虑重建物化视图执行时间长的问题。\n   ```sql\n   --\n   BEGIN\n   DBMS_JOB.REMOVE(您的作业ID);\n   -- 然后重新提交作业\n   DBMS_JOB.SUBMIT();\n   COMMIT;\n   END;\n   ```\n   5.3. 也可以通过修改作业内容方式修改物化视图刷新方式\n   ```sql\n   BEGIN\n     DBMS_JOB.WHAT(\n             job  => job_id,\n             what => 'BEGIN DBMS_MVIEW.REFRESH(''MVIEW_NAME'', ''C'',ATOMIC_REFRESH => FALSE); END;'\n       );\n     COMMIT;\n   END;\n   /\n   ```\n# 运维\n\n```sql\n-- 检查运行时间过长的作业\nSELECT job, (SYSDATE-this_date)*24*60 minutes_running\nFROM dba_jobs \nWHERE this_date IS NOT NULL;\n\n-- 运行作业\nBEGIN\n    DBMS_JOB.RUN(jobid);\nEND;\n/\n\n-- 更新作业的 next_date\nBEGIN\n    DBMS_JOB.NEXT_DATE(jobid, SYSDATE + 1/720); -- 设置为2分钟后\n    COMMIT;\nEND;\n/\n\nBEGIN\n    DBMS_JOB.NEXT_DATE(jobid, TRUNC(SYSDATE) + 22/24); -- 设置当天 22:00 执行\n    COMMIT;\nEND;\n/\n\n-- 修改作业的 INTERVAL\nBEGIN\n    DBMS_JOB.INTERVAL(jobid, 'TRUNC(SYSDATE+1) + 22/24' );\n    COMMIT;\nEND;\n\n-- 删除作业\nBEGIN\n    DBMS_JOB.REMOVE(job_id); -- 替换为实际的job编号\n    COMMIT;\nEND;\n/\n/\n```\n\n# 总结\n通过查看日志发现是有物化视图的delete操作阻塞，无论是定时任务还是手动刷新，都不能同时执行。\n如果想要重置一个卡住的作业(this_date 非空但长时间不变化)，更安全的方法是：\n1. 先用 DBMS_JOB.BROKEN 停止作业，必要时kill进程\n2. 分析作业卡住的原因（刷新组方式默认开启原子操作，数据量大的情况下执行实际较慢）\n3. 修复问题后重新启用作业（改为单个物化视图刷新方式，关闭原子操作）\n4. 考虑迁移到更现代的 DBMS_SCHEDULER 系统","source":"_posts/数据库物化视图未更新问题分析与解决.md","raw":"---\ntitle: Oracle 数据库物化视图未更新问题分析与解决\ndate: 2025-03-28 14:50:29\ntags:\n  - 数据库\n  - Oracle\n  - 物化视图\ncategories:\n  - 数据库\n  - Oracle\n  - 物化视图\n---\n# 问题定位\nthis_date 非空但长时间不变化：可能作业卡死。\nthis_date 为空但 next_date 为过去时间: 可能作业队列进程不足。\nnext_date 为过去时间：说明作业调度已经停止运行。\n\n# 原因分析\nthis_date 字段表示：\n1. 当前执行开始时间：记录作业最近一次开始执行的时间戳\n2. 运行中标识：当作业正在执行时，此字段会显示开始时间\n3. 完成状态：作业执行完成后，此字段会被清空（设为NULL）\n所以this_date 非空但长时间不变化可能是作业卡死导致的。\n   \n可能导致next_date为过去时间的原因：\n1. next_date设置错误，导致next_date为过去时间\n2. 物化视图创建时间较长，创建结束时间>创建语句中指定的开始时间（仅为猜测，待验证，想要验证物化视图是否会更新一般会设置一个靠近当前时间的开始时间，当物化视图创建时间较长时，容易出现这种情况）\n3. 作业调度程序出现故障，导致作业未能正常运行，next_date就会停留在过去（DBMS_JOB无法查看日志，推荐使用 DBMS_SCHEDULER）\n\n# 尝试解决方法\n1. 修改next_date为未来的时间\n```sql\n    BEGIN\n        DBMS_JOB.NEXT_DATE(jobid, SYSDATE + 1/720); -- 设置为2分钟以后\n        COMMIT;\n    END;\n    /\n```\n注意：修改next_date必须COMMIT，否则修改不会生效。\n2. 修改成功后仍然没有更新物化视图，再次排查发现this_date为过去时间，且长时间不变，查找原因可能是作业卡死导致的，尝试修改this_date（无效）\n   2.1. 标记作业为 BROKEN 再恢复(无效)\n   ```sql\n   BEGIN\n       DBMS_JOB.BROKEN(job_id => 您的作业ID, broken => TRUE);\n       DBMS_JOB.BROKEN(job_id => 您的作业ID, broken => FALSE);\n       COMMIT;\n   END;\n   /\n   ```\n   2.2. 修改作业的 INTERVAL（无效）\n   ```sql\n   BEGIN\n       DBMS_JOB.INTERVAL(job_id => 您的作业ID, interval => 'SYSDATE+1');\n       COMMIT;\n   END;\n   /\n   ```\n\n3. 重启作业调度程序（无效）\n```sql\nBEGIN\n    DBMS_JOB.RUN(jobid);\nEND;\n/\n```\n4. 重新创建物化视图（有效）\n虽然重建物化视图有效，但数据量大时，DROP操作耗时较长，生产环境中4G数据量，执行DROP操作需要19个小时，对比CREATE操作需要半个小时，DROP操作耗时还是比较久的。\n```sql\nDROP MATERIALIZED VIEW mview_name;\nCREATE MATERIALIZED VIEW mview_name AS ...;\n/\n```\n5. 排查日志发现物化视图定时任务有DELETE操作，手动执行刷新组操作`DBMS_REFRESH.REFRESH`阻塞住了，无论是通过定时任务方式，还是手动执行，都不能同时刷新。\n   kill对应进程后，优化刷新方式。\n   5.1. 手动刷新物化视图，设置`ATOMIC_REFRESH`为`FALSE`（有效）\n      定时任务自带的刷新是通过刷新组方式刷新，默认开启原子操作，改为使用单个物化视图刷新方式刷新，设置`ATOMIC_REFRESH`为`FALSE`，关闭原子操作，删除数据时无需记录日志，可提高刷新效率（刷新时长大约半小时，与创建物化视图时间相当）。\n   ```sql\n   BEGIN\n   DBMS_MVIEW.REFRESH('MVIEW_NAME', 'C',ATOMIC_REFRESH => FALSE);\n   END;\n   /\n   ```\n   \n   5.2. 删除重建作业，使用单个物化视图刷新方式刷新（推荐）\n   在物化视图定时刷新任务中，删除重建作业并非删除重建物化视图，无需考虑重建物化视图执行时间长的问题。\n   ```sql\n   --\n   BEGIN\n   DBMS_JOB.REMOVE(您的作业ID);\n   -- 然后重新提交作业\n   DBMS_JOB.SUBMIT();\n   COMMIT;\n   END;\n   ```\n   5.3. 也可以通过修改作业内容方式修改物化视图刷新方式\n   ```sql\n   BEGIN\n     DBMS_JOB.WHAT(\n             job  => job_id,\n             what => 'BEGIN DBMS_MVIEW.REFRESH(''MVIEW_NAME'', ''C'',ATOMIC_REFRESH => FALSE); END;'\n       );\n     COMMIT;\n   END;\n   /\n   ```\n# 运维\n\n```sql\n-- 检查运行时间过长的作业\nSELECT job, (SYSDATE-this_date)*24*60 minutes_running\nFROM dba_jobs \nWHERE this_date IS NOT NULL;\n\n-- 运行作业\nBEGIN\n    DBMS_JOB.RUN(jobid);\nEND;\n/\n\n-- 更新作业的 next_date\nBEGIN\n    DBMS_JOB.NEXT_DATE(jobid, SYSDATE + 1/720); -- 设置为2分钟后\n    COMMIT;\nEND;\n/\n\nBEGIN\n    DBMS_JOB.NEXT_DATE(jobid, TRUNC(SYSDATE) + 22/24); -- 设置当天 22:00 执行\n    COMMIT;\nEND;\n/\n\n-- 修改作业的 INTERVAL\nBEGIN\n    DBMS_JOB.INTERVAL(jobid, 'TRUNC(SYSDATE+1) + 22/24' );\n    COMMIT;\nEND;\n\n-- 删除作业\nBEGIN\n    DBMS_JOB.REMOVE(job_id); -- 替换为实际的job编号\n    COMMIT;\nEND;\n/\n/\n```\n\n# 总结\n通过查看日志发现是有物化视图的delete操作阻塞，无论是定时任务还是手动刷新，都不能同时执行。\n如果想要重置一个卡住的作业(this_date 非空但长时间不变化)，更安全的方法是：\n1. 先用 DBMS_JOB.BROKEN 停止作业，必要时kill进程\n2. 分析作业卡住的原因（刷新组方式默认开启原子操作，数据量大的情况下执行实际较慢）\n3. 修复问题后重新启用作业（改为单个物化视图刷新方式，关闭原子操作）\n4. 考虑迁移到更现代的 DBMS_SCHEDULER 系统","slug":"数据库物化视图未更新问题分析与解决","published":1,"updated":"2025-04-09T07:33:25.508Z","_id":"cm8wgjx9s0001u0v44084bmun","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"问题定位\"><a class=\"markdownIt-Anchor\" href=\"#问题定位\"></a> 问题定位</h1>\n<p>this_date 非空但长时间不变化：可能作业卡死。<br />\nthis_date 为空但 next_date 为过去时间: 可能作业队列进程不足。<br />\nnext_date 为过去时间：说明作业调度已经停止运行。</p>\n<h1 id=\"原因分析\"><a class=\"markdownIt-Anchor\" href=\"#原因分析\"></a> 原因分析</h1>\n<p>this_date 字段表示：</p>\n<ol>\n<li>当前执行开始时间：记录作业最近一次开始执行的时间戳</li>\n<li>运行中标识：当作业正在执行时，此字段会显示开始时间</li>\n<li>完成状态：作业执行完成后，此字段会被清空（设为NULL）<br />\n所以this_date 非空但长时间不变化可能是作业卡死导致的。</li>\n</ol>\n<p>可能导致next_date为过去时间的原因：</p>\n<ol>\n<li>next_date设置错误，导致next_date为过去时间</li>\n<li>物化视图创建时间较长，创建结束时间&gt;创建语句中指定的开始时间（仅为猜测，待验证，想要验证物化视图是否会更新一般会设置一个靠近当前时间的开始时间，当物化视图创建时间较长时，容易出现这种情况）</li>\n<li>作业调度程序出现故障，导致作业未能正常运行，next_date就会停留在过去（DBMS_JOB无法查看日志，推荐使用 DBMS_SCHEDULER）</li>\n</ol>\n<h1 id=\"尝试解决方法\"><a class=\"markdownIt-Anchor\" href=\"#尝试解决方法\"></a> 尝试解决方法</h1>\n<ol>\n<li>修改next_date为未来的时间</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.NEXT_DATE(jobid, SYSDATE <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"operator\">/</span><span class=\"number\">720</span>); <span class=\"comment\">-- 设置为2分钟以后</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>注意：修改next_date必须COMMIT，否则修改不会生效。<br />\n2. 修改成功后仍然没有更新物化视图，再次排查发现this_date为过去时间，且长时间不变，查找原因可能是作业卡死导致的，尝试修改this_date（无效）<br />\n2.1. 标记作业为 BROKEN 再恢复(无效)</p>\n   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.BROKEN(job_id <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> 您的作业ID, broken <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">TRUE</span>);</span><br><span class=\"line\">    DBMS_JOB.BROKEN(job_id <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> 您的作业ID, broken <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">FALSE</span>);</span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>2.2. 修改作业的 INTERVAL（无效）</p>\n   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.INTERVAL(job_id <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> 您的作业ID, <span class=\"type\">interval</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SYSDATE+1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启作业调度程序（无效）</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.RUN(jobid);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>重新创建物化视图（有效）<br />\n虽然重建物化视图有效，但数据量大时，DROP操作耗时较长，生产环境中4G数据量，执行DROP操作需要19个小时，对比CREATE操作需要半个小时，DROP操作耗时还是比较久的。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mview_name;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mview_name <span class=\"keyword\">AS</span> ...;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>\n<p>排查日志发现物化视图定时任务有DELETE操作，手动执行刷新组操作<code>DBMS_REFRESH.REFRESH</code>阻塞住了，无论是通过定时任务方式，还是手动执行，都不能同时刷新。<br />\nkill对应进程后，优化刷新方式。<br />\n5.1. 手动刷新物化视图，设置<code>ATOMIC_REFRESH</code>为<code>FALSE</code>（有效）<br />\n定时任务自带的刷新是通过刷新组方式刷新，默认开启原子操作，改为使用单个物化视图刷新方式刷新，设置<code>ATOMIC_REFRESH</code>为<code>FALSE</code>，关闭原子操作，删除数据时无需记录日志，可提高刷新效率（刷新时长大约半小时，与创建物化视图时间相当）。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">DBMS_MVIEW.REFRESH(<span class=\"string\">&#x27;MVIEW_NAME&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>,ATOMIC_REFRESH <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">FALSE</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>5.2. 删除重建作业，使用单个物化视图刷新方式刷新（推荐）<br />\n在物化视图定时刷新任务中，删除重建作业并非删除重建物化视图，无需考虑重建物化视图执行时间长的问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">DBMS_JOB.REMOVE(您的作业ID);</span><br><span class=\"line\"><span class=\"comment\">-- 然后重新提交作业</span></span><br><span class=\"line\">DBMS_JOB.SUBMIT();</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>5.3. 也可以通过修改作业内容方式修改物化视图刷新方式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.WHAT(</span><br><span class=\"line\">          job  <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> job_id,</span><br><span class=\"line\">          what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN DBMS_MVIEW.REFRESH(&#x27;&#x27;MVIEW_NAME&#x27;&#x27;, &#x27;&#x27;C&#x27;&#x27;,ATOMIC_REFRESH =&gt; FALSE); END;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"运维\"><a class=\"markdownIt-Anchor\" href=\"#运维\"></a> 运维</h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 检查运行时间过长的作业</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> job, (SYSDATE<span class=\"operator\">-</span>this_date)<span class=\"operator\">*</span><span class=\"number\">24</span><span class=\"operator\">*</span><span class=\"number\">60</span> minutes_running</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dba_jobs </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> this_date <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 运行作业</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.RUN(jobid);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 更新作业的 next_date</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.NEXT_DATE(jobid, SYSDATE <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"operator\">/</span><span class=\"number\">720</span>); <span class=\"comment\">-- 设置为2分钟后</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.NEXT_DATE(jobid, TRUNC(SYSDATE) <span class=\"operator\">+</span> <span class=\"number\">22</span><span class=\"operator\">/</span><span class=\"number\">24</span>); <span class=\"comment\">-- 设置当天 22:00 执行</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改作业的 INTERVAL</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.INTERVAL(jobid, <span class=\"string\">&#x27;TRUNC(SYSDATE+1) + 22/24&#x27;</span> );</span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除作业</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.REMOVE(job_id); <span class=\"comment\">-- 替换为实际的job编号</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>通过查看日志发现是有物化视图的delete操作阻塞，无论是定时任务还是手动刷新，都不能同时执行。<br />\n如果想要重置一个卡住的作业(this_date 非空但长时间不变化)，更安全的方法是：</p>\n<ol>\n<li>先用 DBMS_JOB.BROKEN 停止作业，必要时kill进程</li>\n<li>分析作业卡住的原因（刷新组方式默认开启原子操作，数据量大的情况下执行实际较慢）</li>\n<li>修复问题后重新启用作业（改为单个物化视图刷新方式，关闭原子操作）</li>\n<li>考虑迁移到更现代的 DBMS_SCHEDULER 系统</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"问题定位\"><a class=\"markdownIt-Anchor\" href=\"#问题定位\"></a> 问题定位</h1>\n<p>this_date 非空但长时间不变化：可能作业卡死。<br />\nthis_date 为空但 next_date 为过去时间: 可能作业队列进程不足。<br />\nnext_date 为过去时间：说明作业调度已经停止运行。</p>\n<h1 id=\"原因分析\"><a class=\"markdownIt-Anchor\" href=\"#原因分析\"></a> 原因分析</h1>\n<p>this_date 字段表示：</p>\n<ol>\n<li>当前执行开始时间：记录作业最近一次开始执行的时间戳</li>\n<li>运行中标识：当作业正在执行时，此字段会显示开始时间</li>\n<li>完成状态：作业执行完成后，此字段会被清空（设为NULL）<br />\n所以this_date 非空但长时间不变化可能是作业卡死导致的。</li>\n</ol>\n<p>可能导致next_date为过去时间的原因：</p>\n<ol>\n<li>next_date设置错误，导致next_date为过去时间</li>\n<li>物化视图创建时间较长，创建结束时间&gt;创建语句中指定的开始时间（仅为猜测，待验证，想要验证物化视图是否会更新一般会设置一个靠近当前时间的开始时间，当物化视图创建时间较长时，容易出现这种情况）</li>\n<li>作业调度程序出现故障，导致作业未能正常运行，next_date就会停留在过去（DBMS_JOB无法查看日志，推荐使用 DBMS_SCHEDULER）</li>\n</ol>\n<h1 id=\"尝试解决方法\"><a class=\"markdownIt-Anchor\" href=\"#尝试解决方法\"></a> 尝试解决方法</h1>\n<ol>\n<li>修改next_date为未来的时间</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.NEXT_DATE(jobid, SYSDATE <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"operator\">/</span><span class=\"number\">720</span>); <span class=\"comment\">-- 设置为2分钟以后</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>注意：修改next_date必须COMMIT，否则修改不会生效。<br />\n2. 修改成功后仍然没有更新物化视图，再次排查发现this_date为过去时间，且长时间不变，查找原因可能是作业卡死导致的，尝试修改this_date（无效）<br />\n2.1. 标记作业为 BROKEN 再恢复(无效)</p>\n   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.BROKEN(job_id <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> 您的作业ID, broken <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">TRUE</span>);</span><br><span class=\"line\">    DBMS_JOB.BROKEN(job_id <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> 您的作业ID, broken <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">FALSE</span>);</span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>2.2. 修改作业的 INTERVAL（无效）</p>\n   <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.INTERVAL(job_id <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> 您的作业ID, <span class=\"type\">interval</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SYSDATE+1&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启作业调度程序（无效）</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.RUN(jobid);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>重新创建物化视图（有效）<br />\n虽然重建物化视图有效，但数据量大时，DROP操作耗时较长，生产环境中4G数据量，执行DROP操作需要19个小时，对比CREATE操作需要半个小时，DROP操作耗时还是比较久的。</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mview_name;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mview_name <span class=\"keyword\">AS</span> ...;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>\n<p>排查日志发现物化视图定时任务有DELETE操作，手动执行刷新组操作<code>DBMS_REFRESH.REFRESH</code>阻塞住了，无论是通过定时任务方式，还是手动执行，都不能同时刷新。<br />\nkill对应进程后，优化刷新方式。<br />\n5.1. 手动刷新物化视图，设置<code>ATOMIC_REFRESH</code>为<code>FALSE</code>（有效）<br />\n定时任务自带的刷新是通过刷新组方式刷新，默认开启原子操作，改为使用单个物化视图刷新方式刷新，设置<code>ATOMIC_REFRESH</code>为<code>FALSE</code>，关闭原子操作，删除数据时无需记录日志，可提高刷新效率（刷新时长大约半小时，与创建物化视图时间相当）。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">DBMS_MVIEW.REFRESH(<span class=\"string\">&#x27;MVIEW_NAME&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>,ATOMIC_REFRESH <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">FALSE</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<p>5.2. 删除重建作业，使用单个物化视图刷新方式刷新（推荐）<br />\n在物化视图定时刷新任务中，删除重建作业并非删除重建物化视图，无需考虑重建物化视图执行时间长的问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">DBMS_JOB.REMOVE(您的作业ID);</span><br><span class=\"line\"><span class=\"comment\">-- 然后重新提交作业</span></span><br><span class=\"line\">DBMS_JOB.SUBMIT();</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n<p>5.3. 也可以通过修改作业内容方式修改物化视图刷新方式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.WHAT(</span><br><span class=\"line\">          job  <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> job_id,</span><br><span class=\"line\">          what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN DBMS_MVIEW.REFRESH(&#x27;&#x27;MVIEW_NAME&#x27;&#x27;, &#x27;&#x27;C&#x27;&#x27;,ATOMIC_REFRESH =&gt; FALSE); END;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"运维\"><a class=\"markdownIt-Anchor\" href=\"#运维\"></a> 运维</h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 检查运行时间过长的作业</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> job, (SYSDATE<span class=\"operator\">-</span>this_date)<span class=\"operator\">*</span><span class=\"number\">24</span><span class=\"operator\">*</span><span class=\"number\">60</span> minutes_running</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> dba_jobs </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> this_date <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 运行作业</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.RUN(jobid);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 更新作业的 next_date</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.NEXT_DATE(jobid, SYSDATE <span class=\"operator\">+</span> <span class=\"number\">1</span><span class=\"operator\">/</span><span class=\"number\">720</span>); <span class=\"comment\">-- 设置为2分钟后</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.NEXT_DATE(jobid, TRUNC(SYSDATE) <span class=\"operator\">+</span> <span class=\"number\">22</span><span class=\"operator\">/</span><span class=\"number\">24</span>); <span class=\"comment\">-- 设置当天 22:00 执行</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改作业的 INTERVAL</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.INTERVAL(jobid, <span class=\"string\">&#x27;TRUNC(SYSDATE+1) + 22/24&#x27;</span> );</span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除作业</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    DBMS_JOB.REMOVE(job_id); <span class=\"comment\">-- 替换为实际的job编号</span></span><br><span class=\"line\">    <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>通过查看日志发现是有物化视图的delete操作阻塞，无论是定时任务还是手动刷新，都不能同时执行。<br />\n如果想要重置一个卡住的作业(this_date 非空但长时间不变化)，更安全的方法是：</p>\n<ol>\n<li>先用 DBMS_JOB.BROKEN 停止作业，必要时kill进程</li>\n<li>分析作业卡住的原因（刷新组方式默认开启原子操作，数据量大的情况下执行实际较慢）</li>\n<li>修复问题后重新启用作业（改为单个物化视图刷新方式，关闭原子操作）</li>\n<li>考虑迁移到更现代的 DBMS_SCHEDULER 系统</li>\n</ol>\n"},{"title":"Java对象格式化","date":"2025-04-08T05:23:07.000Z","_content":"1. 使用log4j2直接输出Java对象，只会输出当前类的属性值，不会输出父类的属性值。\n2. 使用Jackson的ObjectMapper::writeValueAsString进行Java对象格式化，不仅输出当前类的属性值，还会输出父类的属性值，如果子类属性覆盖父类属性，展示子类属性值。\n3. 子类属性覆盖父类属性时，返回给前台的值是空值（即父类字段的值），排查Spring配置，MappingJackson2HttpMessageConverter也设置了ObjectMapper。\n```java\njackson2HttpMessageConverter.setObjectMapper(objectMapper)\n```\n搞不懂为什么都是通过ObjectMapper进行格式化，后台打印的值与前台展示的值不一致，实际使用中避免子类属性覆盖父类属性。\n","source":"_posts/Java对象格式化.md","raw":"---\ntitle: Java对象格式化\ndate: 2025-04-08 13:23:07\ntags:\n  - Java\n  - bug\ncategories:\n  - Java\n  - Java杂项\n---\n1. 使用log4j2直接输出Java对象，只会输出当前类的属性值，不会输出父类的属性值。\n2. 使用Jackson的ObjectMapper::writeValueAsString进行Java对象格式化，不仅输出当前类的属性值，还会输出父类的属性值，如果子类属性覆盖父类属性，展示子类属性值。\n3. 子类属性覆盖父类属性时，返回给前台的值是空值（即父类字段的值），排查Spring配置，MappingJackson2HttpMessageConverter也设置了ObjectMapper。\n```java\njackson2HttpMessageConverter.setObjectMapper(objectMapper)\n```\n搞不懂为什么都是通过ObjectMapper进行格式化，后台打印的值与前台展示的值不一致，实际使用中避免子类属性覆盖父类属性。\n","slug":"Java对象格式化","published":1,"updated":"2025-04-22T01:18:52.482Z","_id":"cm99lvlfe0000bov4c2fh1d1q","comments":1,"layout":"post","photos":[],"content":"<ol>\n<li>使用log4j2直接输出Java对象，只会输出当前类的属性值，不会输出父类的属性值。</li>\n<li>使用Jackson的ObjectMapper::writeValueAsString进行Java对象格式化，不仅输出当前类的属性值，还会输出父类的属性值，如果子类属性覆盖父类属性，展示子类属性值。</li>\n<li>子类属性覆盖父类属性时，返回给前台的值是空值（即父类字段的值），排查Spring配置，MappingJackson2HttpMessageConverter也设置了ObjectMapper。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jackson2HttpMessageConverter.setObjectMapper(objectMapper)</span><br></pre></td></tr></table></figure>\n<p>搞不懂为什么都是通过ObjectMapper进行格式化，后台打印的值与前台展示的值不一致，实际使用中避免子类属性覆盖父类属性。</p>\n","excerpt":"","more":"<ol>\n<li>使用log4j2直接输出Java对象，只会输出当前类的属性值，不会输出父类的属性值。</li>\n<li>使用Jackson的ObjectMapper::writeValueAsString进行Java对象格式化，不仅输出当前类的属性值，还会输出父类的属性值，如果子类属性覆盖父类属性，展示子类属性值。</li>\n<li>子类属性覆盖父类属性时，返回给前台的值是空值（即父类字段的值），排查Spring配置，MappingJackson2HttpMessageConverter也设置了ObjectMapper。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jackson2HttpMessageConverter.setObjectMapper(objectMapper)</span><br></pre></td></tr></table></figure>\n<p>搞不懂为什么都是通过ObjectMapper进行格式化，后台打印的值与前台展示的值不一致，实际使用中避免子类属性覆盖父类属性。</p>\n"},{"title":"Oracle 数据库定时任务与物化视图常用命令大全","date":"2025-03-31T05:47:28.000Z","_content":"\n# 一、定时任务管理命令\n\n## 1. DBMS_JOB 相关命令 (传统方式)\n注意：所有 DBMS_JOB 操作必须显式提交才会生效\n```sql\n-- 创建定时任务\nDECLARE\n  job_id NUMBER;\nBEGIN\n  DBMS_JOB.SUBMIT(\n    job => job_id,\n    what => 'BEGIN 您的PL/SQL代码; END;',\n    next_date => SYSDATE,\n    interval => 'SYSDATE+1/24'  -- 每小时执行\n  );\n  COMMIT;\nEND;\n/\n\n-- 修改作业内容\nBEGIN\n  DBMS_JOB.WHAT(\n          job  => job_id,\n          what => 'BEGIN 新的PL/SQL代码; END;'\n    );\n  COMMIT;\nEND;\n/\n\n-- 修改下次执行时间\nBEGIN\n  DBMS_JOB.NEXT_DATE(job_id, SYSDATE + 1);  -- 明天执行\n  COMMIT;\nEND;\n/\n\n-- 修改执行间隔\nBEGIN\n  DBMS_JOB.INTERVAL(job_id, 'SYSDATE+1/1440');  -- 每分钟执行\n  COMMIT;\nEND;\n/\n\n-- 立即执行任务\nBEGIN\n  DBMS_JOB.RUN(job_id);\n  COMMIT;\nEND;\n/\n\n-- 删除任务\nBEGIN\n  DBMS_JOB.REMOVE(job_id);\n  COMMIT;\nEND;\n/\n\n-- 查看所有任务\nSELECT job, what, next_date, interval, broken FROM user_jobs;\n```\n\n## 进阶\n- 异常处理\n```sql\nBEGIN\n  DBMS_JOB.WHAT(\n    job  => 123,\n    what => 'BEGIN \n               DBMS_MVIEW.REFRESH(''MV_NEW_TABLE'', ''F'');\n               -- 添加日志记录\n               INSERT INTO job_log(job_id, run_date, mview_name) \n               VALUES(123, SYSDATE, ''MV_NEW_TABLE'');\n            EXCEPTION\n               WHEN OTHERS THEN\n                 INSERT INTO job_errors(job_id, error_date, error_msg)\n                 VALUES(123, SYSDATE, SQLERRM);\n            END;'\n  );\n  COMMIT;\n  \n  DBMS_OUTPUT.PUT_LINE('作业内容修改成功');\nEXCEPTION\n  WHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE('修改失败: ' || SQLERRM);\n    ROLLBACK;\nEND;\n/\n```\n\n## 2. DBMS_SCHEDULER 相关命令 (推荐方式)\n\n```sql\n-- 创建定时任务\nBEGIN\n  DBMS_SCHEDULER.CREATE_JOB(\n    job_name => 'MY_JOB',\n    job_type => 'PLSQL_BLOCK',\n    job_action => 'BEGIN 您的PL/SQL代码; END;',\n    start_date => SYSTIMESTAMP,\n    repeat_interval => 'FREQ=DAILY; BYHOUR=3',  -- 每天3点执行\n    enabled => TRUE,\n    comments => '每日3点执行的任务'\n  );\nEND;\n/\n\n-- 修改执行计划\nBEGIN\n  DBMS_SCHEDULER.SET_ATTRIBUTE(\n    name => 'MY_JOB',\n    attribute => 'repeat_interval',\n    value => 'FREQ=HOURLY; INTERVAL=2'  -- 每2小时执行\n  );\nEND;\n/\n\n-- 立即执行任务\nBEGIN\n  DBMS_SCHEDULER.RUN_JOB('MY_JOB');\nEND;\n/\n\n-- 禁用/启用任务\nBEGIN\n  DBMS_SCHEDULER.DISABLE('MY_JOB');\n  DBMS_SCHEDULER.ENABLE('MY_JOB');\nEND;\n/\n\n-- 删除任务\nBEGIN\n  DBMS_SCHEDULER.DROP_JOB('MY_JOB');\nEND;\n/\n\n-- 查看所有任务\nSELECT job_name, enabled, state, next_run_date FROM user_scheduler_jobs;\n```\nrepeat_interval参数说明：\n- FREQ：频率，DAILY表示每天，HOURLY表示每小时，MONTHLY表示每月，WEEKLY表示每周。\n- INTERVAL：间隔，表示频率的间隔时间，比如FREQ=DAILY，INTERVAL=2表示每2天执行一次。\n- BYHOUR：指定执行任务的时间，比如FREQ=HOURLY，BYHOUR=3表示每天3点执行。\n- BYDAY: 指定执行任务的日期，比如FREQ=WEEKLY，BYDAY=MON表示每周一执行。\n# 二、物化视图管理命令\n\n## 1. 创建物化视图\n\n```sql\n-- 基本创建语法\nCREATE MATERIALIZED VIEW mv_sales_data\nREFRESH FAST ON DEMAND  -- 快速刷新/按需刷新\nAS SELECT * FROM sales WHERE sale_date > SYSDATE-30;\n\n-- 带自动刷新的物化视图\nCREATE MATERIALIZED VIEW mv_daily_inventory\nREFRESH COMPLETE  -- 完全刷新\nSTART WITH SYSDATE NEXT SYSDATE+1  -- 每天刷新\nAS SELECT product_id, SUM(quantity) FROM inventory GROUP BY product_id;\n```\n## 2. 物化视图刷新命令\n- 使用`DBMS_MVIEW`对象的`REFRESH/REFRESH_LIST`方法，手动刷新单个或多个物化视图；\n- 使用`DBMS_REFRESH`对象刷新需创建刷新组，通过组名刷新。\n    - 未创建刷新组的物化视图不能使用此方法刷新。\n    - 带自动刷新的物化视图创建时会自动创建刷新组，可在`user_refresh`查看，定时任务表`USER_JOBS`中使用`DBMS_REFRESH`刷新。\n```sql\n-- 手动刷新单个物化视图\nBEGIN\n  DBMS_MVIEW.REFRESH('MV_SALES_DATA');\nEND;\n/\n\n-- 刷新多个物化视图\nBEGIN\n  DBMS_MVIEW.REFRESH_LIST('MV_SALES_DATA,MV_INVENTORY');\nEND;\n/\n\n-- 带参数刷新\nBEGIN\n  DBMS_MVIEW.REFRESH(\n    list => 'MV_SALES_DATA',\n    method => 'F',  -- F=完全刷新, C=快速刷新\n    parallelism => 4  -- 并行度\n  );\nEND;\n/\n\n-- 使用刷新组\nBEGIN\n  DBMS_REFRESH.MAKE(\n    name => 'SALES_GROUP',\n    list => 'MV_SALES,MV_ORDERS',\n    next_date => SYSDATE,\n    interval => 'SYSDATE+1/24'  -- 每小时刷新\n  );\nEND;\n/\n\n-- 刷新整个组\nBEGIN\n  DBMS_REFRESH.REFRESH('SALES_GROUP');\nEND;\n/\n```\n\n## 3. 物化视图维护命令\n\n```sql\n-- 修改刷新方式\nALTER MATERIALIZED VIEW mv_sales_data \nREFRESH COMPLETE ON DEMAND;\n\n-- 重建物化视图\nALTER MATERIALIZED VIEW mv_sales_data REBUILD;\n\n-- 删除物化视图\nDROP MATERIALIZED VIEW mv_sales_data;\n\n-- 查看物化视图信息\nSELECT mview_name, refresh_mode, refresh_method, last_refresh_date \nFROM user_mviews;\n\n-- 查看物化视图依赖关系\nSELECT * FROM user_mview_dependencies;\n```\n\n# 三、常用组合场景\n\n## 1. 定时刷新物化视图\n\n```sql\n-- 创建每天凌晨2点刷新物化视图的任务\nBEGIN\n  DBMS_SCHEDULER.CREATE_JOB(\n    job_name => 'REFRESH_MV_JOB',\n    job_type => 'PLSQL_BLOCK',\n    job_action => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SALES_DATA''); END;',\n    start_date => SYSTIMESTAMP,\n    repeat_interval => 'FREQ=DAILY; BYHOUR=2',\n    enabled => TRUE\n  );\nEND;\n/\n```\n\n## 2. 创建带日志的快速刷新物化视图\n\n```sql\n-- 在基表上创建物化视图日志\nCREATE MATERIALIZED VIEW LOG ON sales \nWITH ROWID, SEQUENCE (product_id, sale_date, amount)\nINCLUDING NEW VALUES;\n\n-- 创建快速刷新的物化视图\nCREATE MATERIALIZED VIEW mv_sales_fast\nREFRESH FAST WITH ROWID\nAS SELECT product_id, sale_date, amount FROM sales;\n```\n\n以上命令涵盖了Oracle数据库定时任务和物化视图的主要操作，根据实际需求选择合适的命令组合使用。","source":"_posts/数据库定时任务与物化视图常用命令大全.md","raw":"---\ntitle: Oracle 数据库定时任务与物化视图常用命令大全\ndate: 2025-03-31 13:47:28\ntags:\n  - 数据库\n  - Oracle\n  - 定时任务\n  - 物化视图\ncategories:\n  - 数据库\n  - Oracle\n  - 定时任务\n---\n\n# 一、定时任务管理命令\n\n## 1. DBMS_JOB 相关命令 (传统方式)\n注意：所有 DBMS_JOB 操作必须显式提交才会生效\n```sql\n-- 创建定时任务\nDECLARE\n  job_id NUMBER;\nBEGIN\n  DBMS_JOB.SUBMIT(\n    job => job_id,\n    what => 'BEGIN 您的PL/SQL代码; END;',\n    next_date => SYSDATE,\n    interval => 'SYSDATE+1/24'  -- 每小时执行\n  );\n  COMMIT;\nEND;\n/\n\n-- 修改作业内容\nBEGIN\n  DBMS_JOB.WHAT(\n          job  => job_id,\n          what => 'BEGIN 新的PL/SQL代码; END;'\n    );\n  COMMIT;\nEND;\n/\n\n-- 修改下次执行时间\nBEGIN\n  DBMS_JOB.NEXT_DATE(job_id, SYSDATE + 1);  -- 明天执行\n  COMMIT;\nEND;\n/\n\n-- 修改执行间隔\nBEGIN\n  DBMS_JOB.INTERVAL(job_id, 'SYSDATE+1/1440');  -- 每分钟执行\n  COMMIT;\nEND;\n/\n\n-- 立即执行任务\nBEGIN\n  DBMS_JOB.RUN(job_id);\n  COMMIT;\nEND;\n/\n\n-- 删除任务\nBEGIN\n  DBMS_JOB.REMOVE(job_id);\n  COMMIT;\nEND;\n/\n\n-- 查看所有任务\nSELECT job, what, next_date, interval, broken FROM user_jobs;\n```\n\n## 进阶\n- 异常处理\n```sql\nBEGIN\n  DBMS_JOB.WHAT(\n    job  => 123,\n    what => 'BEGIN \n               DBMS_MVIEW.REFRESH(''MV_NEW_TABLE'', ''F'');\n               -- 添加日志记录\n               INSERT INTO job_log(job_id, run_date, mview_name) \n               VALUES(123, SYSDATE, ''MV_NEW_TABLE'');\n            EXCEPTION\n               WHEN OTHERS THEN\n                 INSERT INTO job_errors(job_id, error_date, error_msg)\n                 VALUES(123, SYSDATE, SQLERRM);\n            END;'\n  );\n  COMMIT;\n  \n  DBMS_OUTPUT.PUT_LINE('作业内容修改成功');\nEXCEPTION\n  WHEN OTHERS THEN\n    DBMS_OUTPUT.PUT_LINE('修改失败: ' || SQLERRM);\n    ROLLBACK;\nEND;\n/\n```\n\n## 2. DBMS_SCHEDULER 相关命令 (推荐方式)\n\n```sql\n-- 创建定时任务\nBEGIN\n  DBMS_SCHEDULER.CREATE_JOB(\n    job_name => 'MY_JOB',\n    job_type => 'PLSQL_BLOCK',\n    job_action => 'BEGIN 您的PL/SQL代码; END;',\n    start_date => SYSTIMESTAMP,\n    repeat_interval => 'FREQ=DAILY; BYHOUR=3',  -- 每天3点执行\n    enabled => TRUE,\n    comments => '每日3点执行的任务'\n  );\nEND;\n/\n\n-- 修改执行计划\nBEGIN\n  DBMS_SCHEDULER.SET_ATTRIBUTE(\n    name => 'MY_JOB',\n    attribute => 'repeat_interval',\n    value => 'FREQ=HOURLY; INTERVAL=2'  -- 每2小时执行\n  );\nEND;\n/\n\n-- 立即执行任务\nBEGIN\n  DBMS_SCHEDULER.RUN_JOB('MY_JOB');\nEND;\n/\n\n-- 禁用/启用任务\nBEGIN\n  DBMS_SCHEDULER.DISABLE('MY_JOB');\n  DBMS_SCHEDULER.ENABLE('MY_JOB');\nEND;\n/\n\n-- 删除任务\nBEGIN\n  DBMS_SCHEDULER.DROP_JOB('MY_JOB');\nEND;\n/\n\n-- 查看所有任务\nSELECT job_name, enabled, state, next_run_date FROM user_scheduler_jobs;\n```\nrepeat_interval参数说明：\n- FREQ：频率，DAILY表示每天，HOURLY表示每小时，MONTHLY表示每月，WEEKLY表示每周。\n- INTERVAL：间隔，表示频率的间隔时间，比如FREQ=DAILY，INTERVAL=2表示每2天执行一次。\n- BYHOUR：指定执行任务的时间，比如FREQ=HOURLY，BYHOUR=3表示每天3点执行。\n- BYDAY: 指定执行任务的日期，比如FREQ=WEEKLY，BYDAY=MON表示每周一执行。\n# 二、物化视图管理命令\n\n## 1. 创建物化视图\n\n```sql\n-- 基本创建语法\nCREATE MATERIALIZED VIEW mv_sales_data\nREFRESH FAST ON DEMAND  -- 快速刷新/按需刷新\nAS SELECT * FROM sales WHERE sale_date > SYSDATE-30;\n\n-- 带自动刷新的物化视图\nCREATE MATERIALIZED VIEW mv_daily_inventory\nREFRESH COMPLETE  -- 完全刷新\nSTART WITH SYSDATE NEXT SYSDATE+1  -- 每天刷新\nAS SELECT product_id, SUM(quantity) FROM inventory GROUP BY product_id;\n```\n## 2. 物化视图刷新命令\n- 使用`DBMS_MVIEW`对象的`REFRESH/REFRESH_LIST`方法，手动刷新单个或多个物化视图；\n- 使用`DBMS_REFRESH`对象刷新需创建刷新组，通过组名刷新。\n    - 未创建刷新组的物化视图不能使用此方法刷新。\n    - 带自动刷新的物化视图创建时会自动创建刷新组，可在`user_refresh`查看，定时任务表`USER_JOBS`中使用`DBMS_REFRESH`刷新。\n```sql\n-- 手动刷新单个物化视图\nBEGIN\n  DBMS_MVIEW.REFRESH('MV_SALES_DATA');\nEND;\n/\n\n-- 刷新多个物化视图\nBEGIN\n  DBMS_MVIEW.REFRESH_LIST('MV_SALES_DATA,MV_INVENTORY');\nEND;\n/\n\n-- 带参数刷新\nBEGIN\n  DBMS_MVIEW.REFRESH(\n    list => 'MV_SALES_DATA',\n    method => 'F',  -- F=完全刷新, C=快速刷新\n    parallelism => 4  -- 并行度\n  );\nEND;\n/\n\n-- 使用刷新组\nBEGIN\n  DBMS_REFRESH.MAKE(\n    name => 'SALES_GROUP',\n    list => 'MV_SALES,MV_ORDERS',\n    next_date => SYSDATE,\n    interval => 'SYSDATE+1/24'  -- 每小时刷新\n  );\nEND;\n/\n\n-- 刷新整个组\nBEGIN\n  DBMS_REFRESH.REFRESH('SALES_GROUP');\nEND;\n/\n```\n\n## 3. 物化视图维护命令\n\n```sql\n-- 修改刷新方式\nALTER MATERIALIZED VIEW mv_sales_data \nREFRESH COMPLETE ON DEMAND;\n\n-- 重建物化视图\nALTER MATERIALIZED VIEW mv_sales_data REBUILD;\n\n-- 删除物化视图\nDROP MATERIALIZED VIEW mv_sales_data;\n\n-- 查看物化视图信息\nSELECT mview_name, refresh_mode, refresh_method, last_refresh_date \nFROM user_mviews;\n\n-- 查看物化视图依赖关系\nSELECT * FROM user_mview_dependencies;\n```\n\n# 三、常用组合场景\n\n## 1. 定时刷新物化视图\n\n```sql\n-- 创建每天凌晨2点刷新物化视图的任务\nBEGIN\n  DBMS_SCHEDULER.CREATE_JOB(\n    job_name => 'REFRESH_MV_JOB',\n    job_type => 'PLSQL_BLOCK',\n    job_action => 'BEGIN DBMS_MVIEW.REFRESH(''MV_SALES_DATA''); END;',\n    start_date => SYSTIMESTAMP,\n    repeat_interval => 'FREQ=DAILY; BYHOUR=2',\n    enabled => TRUE\n  );\nEND;\n/\n```\n\n## 2. 创建带日志的快速刷新物化视图\n\n```sql\n-- 在基表上创建物化视图日志\nCREATE MATERIALIZED VIEW LOG ON sales \nWITH ROWID, SEQUENCE (product_id, sale_date, amount)\nINCLUDING NEW VALUES;\n\n-- 创建快速刷新的物化视图\nCREATE MATERIALIZED VIEW mv_sales_fast\nREFRESH FAST WITH ROWID\nAS SELECT product_id, sale_date, amount FROM sales;\n```\n\n以上命令涵盖了Oracle数据库定时任务和物化视图的主要操作，根据实际需求选择合适的命令组合使用。","slug":"数据库定时任务与物化视图常用命令大全","published":1,"updated":"2025-04-03T06:43:29.277Z","comments":1,"layout":"post","photos":[],"_id":"cm99lvlfi0001bov4bhykd69v","content":"<h1 id=\"一-定时任务管理命令\"><a class=\"markdownIt-Anchor\" href=\"#一-定时任务管理命令\"></a> 一、定时任务管理命令</h1>\n<h2 id=\"1-dbms_job-相关命令-传统方式\"><a class=\"markdownIt-Anchor\" href=\"#1-dbms_job-相关命令-传统方式\"></a> 1. DBMS_JOB 相关命令 (传统方式)</h2>\n<p>注意：所有 DBMS_JOB 操作必须显式提交才会生效</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建定时任务</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  job_id NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.SUBMIT(</span><br><span class=\"line\">    job <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> job_id,</span><br><span class=\"line\">    what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN 您的PL/SQL代码; END;&#x27;</span>,</span><br><span class=\"line\">    next_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSDATE,</span><br><span class=\"line\">    <span class=\"type\">interval</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SYSDATE+1/24&#x27;</span>  <span class=\"comment\">-- 每小时执行</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改作业内容</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.WHAT(</span><br><span class=\"line\">          job  <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> job_id,</span><br><span class=\"line\">          what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN 新的PL/SQL代码; END;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改下次执行时间</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.NEXT_DATE(job_id, SYSDATE <span class=\"operator\">+</span> <span class=\"number\">1</span>);  <span class=\"comment\">-- 明天执行</span></span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改执行间隔</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.INTERVAL(job_id, <span class=\"string\">&#x27;SYSDATE+1/1440&#x27;</span>);  <span class=\"comment\">-- 每分钟执行</span></span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 立即执行任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.RUN(job_id);</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.REMOVE(job_id);</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看所有任务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> job, what, next_date, <span class=\"type\">interval</span>, broken <span class=\"keyword\">FROM</span> user_jobs;</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶\"><a class=\"markdownIt-Anchor\" href=\"#进阶\"></a> 进阶</h2>\n<ul>\n<li>异常处理</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.WHAT(</span><br><span class=\"line\">    job  <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"number\">123</span>,</span><br><span class=\"line\">    what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN </span></span><br><span class=\"line\"><span class=\"string\">               DBMS_MVIEW.REFRESH(&#x27;&#x27;MV_NEW_TABLE&#x27;&#x27;, &#x27;&#x27;F&#x27;&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">               -- 添加日志记录</span></span><br><span class=\"line\"><span class=\"string\">               INSERT INTO job_log(job_id, run_date, mview_name) </span></span><br><span class=\"line\"><span class=\"string\">               VALUES(123, SYSDATE, &#x27;&#x27;MV_NEW_TABLE&#x27;&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            EXCEPTION</span></span><br><span class=\"line\"><span class=\"string\">               WHEN OTHERS THEN</span></span><br><span class=\"line\"><span class=\"string\">                 INSERT INTO job_errors(job_id, error_date, error_msg)</span></span><br><span class=\"line\"><span class=\"string\">                 VALUES(123, SYSDATE, SQLERRM);</span></span><br><span class=\"line\"><span class=\"string\">            END;&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;作业内容修改成功&#x27;</span>);</span><br><span class=\"line\">EXCEPTION</span><br><span class=\"line\">  <span class=\"keyword\">WHEN</span> OTHERS <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;修改失败: &#x27;</span> <span class=\"operator\">||</span> SQLERRM);</span><br><span class=\"line\">    <span class=\"keyword\">ROLLBACK</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-dbms_scheduler-相关命令-推荐方式\"><a class=\"markdownIt-Anchor\" href=\"#2-dbms_scheduler-相关命令-推荐方式\"></a> 2. DBMS_SCHEDULER 相关命令 (推荐方式)</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建定时任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.CREATE_JOB(</span><br><span class=\"line\">    job_name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MY_JOB&#x27;</span>,</span><br><span class=\"line\">    job_type <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;PLSQL_BLOCK&#x27;</span>,</span><br><span class=\"line\">    job_action <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN 您的PL/SQL代码; END;&#x27;</span>,</span><br><span class=\"line\">    start_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSTIMESTAMP,</span><br><span class=\"line\">    repeat_interval <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;FREQ=DAILY; BYHOUR=3&#x27;</span>,  <span class=\"comment\">-- 每天3点执行</span></span><br><span class=\"line\">    enabled <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">TRUE</span>,</span><br><span class=\"line\">    comments <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;每日3点执行的任务&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改执行计划</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.SET_ATTRIBUTE(</span><br><span class=\"line\">    name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MY_JOB&#x27;</span>,</span><br><span class=\"line\">    attribute <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;repeat_interval&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">value</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;FREQ=HOURLY; INTERVAL=2&#x27;</span>  <span class=\"comment\">-- 每2小时执行</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 立即执行任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.RUN_JOB(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 禁用/启用任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.DISABLE(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\">  DBMS_SCHEDULER.ENABLE(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.DROP_JOB(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看所有任务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> job_name, enabled, state, next_run_date <span class=\"keyword\">FROM</span> user_scheduler_jobs;</span><br></pre></td></tr></table></figure>\n<p>repeat_interval参数说明：</p>\n<ul>\n<li>FREQ：频率，DAILY表示每天，HOURLY表示每小时，MONTHLY表示每月，WEEKLY表示每周。</li>\n<li>INTERVAL：间隔，表示频率的间隔时间，比如FREQ=DAILY，INTERVAL=2表示每2天执行一次。</li>\n<li>BYHOUR：指定执行任务的时间，比如FREQ=HOURLY，BYHOUR=3表示每天3点执行。</li>\n<li>BYDAY: 指定执行任务的日期，比如FREQ=WEEKLY，BYDAY=MON表示每周一执行。</li>\n</ul>\n<h1 id=\"二-物化视图管理命令\"><a class=\"markdownIt-Anchor\" href=\"#二-物化视图管理命令\"></a> 二、物化视图管理命令</h1>\n<h2 id=\"1-创建物化视图\"><a class=\"markdownIt-Anchor\" href=\"#1-创建物化视图\"></a> 1. 创建物化视图</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 基本创建语法</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data</span><br><span class=\"line\">REFRESH FAST <span class=\"keyword\">ON</span> DEMAND  <span class=\"comment\">-- 快速刷新/按需刷新</span></span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> sales <span class=\"keyword\">WHERE</span> sale_date <span class=\"operator\">&gt;</span> SYSDATE<span class=\"number\">-30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 带自动刷新的物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_daily_inventory</span><br><span class=\"line\">REFRESH COMPLETE  <span class=\"comment\">-- 完全刷新</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> SYSDATE NEXT SYSDATE<span class=\"operator\">+</span><span class=\"number\">1</span>  <span class=\"comment\">-- 每天刷新</span></span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> product_id, <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">FROM</span> inventory <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> product_id;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-物化视图刷新命令\"><a class=\"markdownIt-Anchor\" href=\"#2-物化视图刷新命令\"></a> 2. 物化视图刷新命令</h2>\n<ul>\n<li>使用<code>DBMS_MVIEW</code>对象的<code>REFRESH/REFRESH_LIST</code>方法，手动刷新单个或多个物化视图；</li>\n<li>使用<code>DBMS_REFRESH</code>对象刷新需创建刷新组，通过组名刷新。\n<ul>\n<li>未创建刷新组的物化视图不能使用此方法刷新。</li>\n<li>带自动刷新的物化视图创建时会自动创建刷新组，可在<code>user_refresh</code>查看，定时任务表<code>USER_JOBS</code>中使用<code>DBMS_REFRESH</code>刷新。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 手动刷新单个物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_MVIEW.REFRESH(<span class=\"string\">&#x27;MV_SALES_DATA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 刷新多个物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_MVIEW.REFRESH_LIST(<span class=\"string\">&#x27;MV_SALES_DATA,MV_INVENTORY&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 带参数刷新</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_MVIEW.REFRESH(</span><br><span class=\"line\">    list <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MV_SALES_DATA&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">method</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;F&#x27;</span>,  <span class=\"comment\">-- F=完全刷新, C=快速刷新</span></span><br><span class=\"line\">    parallelism <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"number\">4</span>  <span class=\"comment\">-- 并行度</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用刷新组</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_REFRESH.MAKE(</span><br><span class=\"line\">    name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SALES_GROUP&#x27;</span>,</span><br><span class=\"line\">    list <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MV_SALES,MV_ORDERS&#x27;</span>,</span><br><span class=\"line\">    next_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSDATE,</span><br><span class=\"line\">    <span class=\"type\">interval</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SYSDATE+1/24&#x27;</span>  <span class=\"comment\">-- 每小时刷新</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 刷新整个组</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_REFRESH.REFRESH(<span class=\"string\">&#x27;SALES_GROUP&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-物化视图维护命令\"><a class=\"markdownIt-Anchor\" href=\"#3-物化视图维护命令\"></a> 3. 物化视图维护命令</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 修改刷新方式</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data </span><br><span class=\"line\">REFRESH COMPLETE <span class=\"keyword\">ON</span> DEMAND;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重建物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data REBUILD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看物化视图信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> mview_name, refresh_mode, refresh_method, last_refresh_date </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> user_mviews;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看物化视图依赖关系</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_mview_dependencies;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-常用组合场景\"><a class=\"markdownIt-Anchor\" href=\"#三-常用组合场景\"></a> 三、常用组合场景</h1>\n<h2 id=\"1-定时刷新物化视图\"><a class=\"markdownIt-Anchor\" href=\"#1-定时刷新物化视图\"></a> 1. 定时刷新物化视图</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建每天凌晨2点刷新物化视图的任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.CREATE_JOB(</span><br><span class=\"line\">    job_name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;REFRESH_MV_JOB&#x27;</span>,</span><br><span class=\"line\">    job_type <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;PLSQL_BLOCK&#x27;</span>,</span><br><span class=\"line\">    job_action <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN DBMS_MVIEW.REFRESH(&#x27;&#x27;MV_SALES_DATA&#x27;&#x27;); END;&#x27;</span>,</span><br><span class=\"line\">    start_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSTIMESTAMP,</span><br><span class=\"line\">    repeat_interval <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;FREQ=DAILY; BYHOUR=2&#x27;</span>,</span><br><span class=\"line\">    enabled <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建带日志的快速刷新物化视图\"><a class=\"markdownIt-Anchor\" href=\"#2-创建带日志的快速刷新物化视图\"></a> 2. 创建带日志的快速刷新物化视图</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在基表上创建物化视图日志</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> LOG <span class=\"keyword\">ON</span> sales </span><br><span class=\"line\"><span class=\"keyword\">WITH</span> ROWID, SEQUENCE (product_id, sale_date, amount)</span><br><span class=\"line\">INCLUDING <span class=\"keyword\">NEW</span> <span class=\"keyword\">VALUES</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建快速刷新的物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_fast</span><br><span class=\"line\">REFRESH FAST <span class=\"keyword\">WITH</span> ROWID</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> product_id, sale_date, amount <span class=\"keyword\">FROM</span> sales;</span><br></pre></td></tr></table></figure>\n<p>以上命令涵盖了Oracle数据库定时任务和物化视图的主要操作，根据实际需求选择合适的命令组合使用。</p>\n","excerpt":"","more":"<h1 id=\"一-定时任务管理命令\"><a class=\"markdownIt-Anchor\" href=\"#一-定时任务管理命令\"></a> 一、定时任务管理命令</h1>\n<h2 id=\"1-dbms_job-相关命令-传统方式\"><a class=\"markdownIt-Anchor\" href=\"#1-dbms_job-相关命令-传统方式\"></a> 1. DBMS_JOB 相关命令 (传统方式)</h2>\n<p>注意：所有 DBMS_JOB 操作必须显式提交才会生效</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建定时任务</span></span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span></span><br><span class=\"line\">  job_id NUMBER;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.SUBMIT(</span><br><span class=\"line\">    job <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> job_id,</span><br><span class=\"line\">    what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN 您的PL/SQL代码; END;&#x27;</span>,</span><br><span class=\"line\">    next_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSDATE,</span><br><span class=\"line\">    <span class=\"type\">interval</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SYSDATE+1/24&#x27;</span>  <span class=\"comment\">-- 每小时执行</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改作业内容</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.WHAT(</span><br><span class=\"line\">          job  <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> job_id,</span><br><span class=\"line\">          what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN 新的PL/SQL代码; END;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改下次执行时间</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.NEXT_DATE(job_id, SYSDATE <span class=\"operator\">+</span> <span class=\"number\">1</span>);  <span class=\"comment\">-- 明天执行</span></span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改执行间隔</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.INTERVAL(job_id, <span class=\"string\">&#x27;SYSDATE+1/1440&#x27;</span>);  <span class=\"comment\">-- 每分钟执行</span></span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 立即执行任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.RUN(job_id);</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.REMOVE(job_id);</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看所有任务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> job, what, next_date, <span class=\"type\">interval</span>, broken <span class=\"keyword\">FROM</span> user_jobs;</span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶\"><a class=\"markdownIt-Anchor\" href=\"#进阶\"></a> 进阶</h2>\n<ul>\n<li>异常处理</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_JOB.WHAT(</span><br><span class=\"line\">    job  <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"number\">123</span>,</span><br><span class=\"line\">    what <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN </span></span><br><span class=\"line\"><span class=\"string\">               DBMS_MVIEW.REFRESH(&#x27;&#x27;MV_NEW_TABLE&#x27;&#x27;, &#x27;&#x27;F&#x27;&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">               -- 添加日志记录</span></span><br><span class=\"line\"><span class=\"string\">               INSERT INTO job_log(job_id, run_date, mview_name) </span></span><br><span class=\"line\"><span class=\"string\">               VALUES(123, SYSDATE, &#x27;&#x27;MV_NEW_TABLE&#x27;&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            EXCEPTION</span></span><br><span class=\"line\"><span class=\"string\">               WHEN OTHERS THEN</span></span><br><span class=\"line\"><span class=\"string\">                 INSERT INTO job_errors(job_id, error_date, error_msg)</span></span><br><span class=\"line\"><span class=\"string\">                 VALUES(123, SYSDATE, SQLERRM);</span></span><br><span class=\"line\"><span class=\"string\">            END;&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">COMMIT</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;作业内容修改成功&#x27;</span>);</span><br><span class=\"line\">EXCEPTION</span><br><span class=\"line\">  <span class=\"keyword\">WHEN</span> OTHERS <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    DBMS_OUTPUT.PUT_LINE(<span class=\"string\">&#x27;修改失败: &#x27;</span> <span class=\"operator\">||</span> SQLERRM);</span><br><span class=\"line\">    <span class=\"keyword\">ROLLBACK</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-dbms_scheduler-相关命令-推荐方式\"><a class=\"markdownIt-Anchor\" href=\"#2-dbms_scheduler-相关命令-推荐方式\"></a> 2. DBMS_SCHEDULER 相关命令 (推荐方式)</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建定时任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.CREATE_JOB(</span><br><span class=\"line\">    job_name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MY_JOB&#x27;</span>,</span><br><span class=\"line\">    job_type <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;PLSQL_BLOCK&#x27;</span>,</span><br><span class=\"line\">    job_action <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN 您的PL/SQL代码; END;&#x27;</span>,</span><br><span class=\"line\">    start_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSTIMESTAMP,</span><br><span class=\"line\">    repeat_interval <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;FREQ=DAILY; BYHOUR=3&#x27;</span>,  <span class=\"comment\">-- 每天3点执行</span></span><br><span class=\"line\">    enabled <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">TRUE</span>,</span><br><span class=\"line\">    comments <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;每日3点执行的任务&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改执行计划</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.SET_ATTRIBUTE(</span><br><span class=\"line\">    name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MY_JOB&#x27;</span>,</span><br><span class=\"line\">    attribute <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;repeat_interval&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">value</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;FREQ=HOURLY; INTERVAL=2&#x27;</span>  <span class=\"comment\">-- 每2小时执行</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 立即执行任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.RUN_JOB(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 禁用/启用任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.DISABLE(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\">  DBMS_SCHEDULER.ENABLE(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.DROP_JOB(<span class=\"string\">&#x27;MY_JOB&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看所有任务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> job_name, enabled, state, next_run_date <span class=\"keyword\">FROM</span> user_scheduler_jobs;</span><br></pre></td></tr></table></figure>\n<p>repeat_interval参数说明：</p>\n<ul>\n<li>FREQ：频率，DAILY表示每天，HOURLY表示每小时，MONTHLY表示每月，WEEKLY表示每周。</li>\n<li>INTERVAL：间隔，表示频率的间隔时间，比如FREQ=DAILY，INTERVAL=2表示每2天执行一次。</li>\n<li>BYHOUR：指定执行任务的时间，比如FREQ=HOURLY，BYHOUR=3表示每天3点执行。</li>\n<li>BYDAY: 指定执行任务的日期，比如FREQ=WEEKLY，BYDAY=MON表示每周一执行。</li>\n</ul>\n<h1 id=\"二-物化视图管理命令\"><a class=\"markdownIt-Anchor\" href=\"#二-物化视图管理命令\"></a> 二、物化视图管理命令</h1>\n<h2 id=\"1-创建物化视图\"><a class=\"markdownIt-Anchor\" href=\"#1-创建物化视图\"></a> 1. 创建物化视图</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 基本创建语法</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data</span><br><span class=\"line\">REFRESH FAST <span class=\"keyword\">ON</span> DEMAND  <span class=\"comment\">-- 快速刷新/按需刷新</span></span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> sales <span class=\"keyword\">WHERE</span> sale_date <span class=\"operator\">&gt;</span> SYSDATE<span class=\"number\">-30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 带自动刷新的物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_daily_inventory</span><br><span class=\"line\">REFRESH COMPLETE  <span class=\"comment\">-- 完全刷新</span></span><br><span class=\"line\"><span class=\"keyword\">START</span> <span class=\"keyword\">WITH</span> SYSDATE NEXT SYSDATE<span class=\"operator\">+</span><span class=\"number\">1</span>  <span class=\"comment\">-- 每天刷新</span></span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> product_id, <span class=\"built_in\">SUM</span>(quantity) <span class=\"keyword\">FROM</span> inventory <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> product_id;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-物化视图刷新命令\"><a class=\"markdownIt-Anchor\" href=\"#2-物化视图刷新命令\"></a> 2. 物化视图刷新命令</h2>\n<ul>\n<li>使用<code>DBMS_MVIEW</code>对象的<code>REFRESH/REFRESH_LIST</code>方法，手动刷新单个或多个物化视图；</li>\n<li>使用<code>DBMS_REFRESH</code>对象刷新需创建刷新组，通过组名刷新。\n<ul>\n<li>未创建刷新组的物化视图不能使用此方法刷新。</li>\n<li>带自动刷新的物化视图创建时会自动创建刷新组，可在<code>user_refresh</code>查看，定时任务表<code>USER_JOBS</code>中使用<code>DBMS_REFRESH</code>刷新。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 手动刷新单个物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_MVIEW.REFRESH(<span class=\"string\">&#x27;MV_SALES_DATA&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 刷新多个物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_MVIEW.REFRESH_LIST(<span class=\"string\">&#x27;MV_SALES_DATA,MV_INVENTORY&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 带参数刷新</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_MVIEW.REFRESH(</span><br><span class=\"line\">    list <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MV_SALES_DATA&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">method</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;F&#x27;</span>,  <span class=\"comment\">-- F=完全刷新, C=快速刷新</span></span><br><span class=\"line\">    parallelism <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"number\">4</span>  <span class=\"comment\">-- 并行度</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用刷新组</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_REFRESH.MAKE(</span><br><span class=\"line\">    name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SALES_GROUP&#x27;</span>,</span><br><span class=\"line\">    list <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;MV_SALES,MV_ORDERS&#x27;</span>,</span><br><span class=\"line\">    next_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSDATE,</span><br><span class=\"line\">    <span class=\"type\">interval</span> <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;SYSDATE+1/24&#x27;</span>  <span class=\"comment\">-- 每小时刷新</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 刷新整个组</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_REFRESH.REFRESH(<span class=\"string\">&#x27;SALES_GROUP&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-物化视图维护命令\"><a class=\"markdownIt-Anchor\" href=\"#3-物化视图维护命令\"></a> 3. 物化视图维护命令</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 修改刷新方式</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data </span><br><span class=\"line\">REFRESH COMPLETE <span class=\"keyword\">ON</span> DEMAND;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重建物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data REBUILD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看物化视图信息</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> mview_name, refresh_mode, refresh_method, last_refresh_date </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> user_mviews;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看物化视图依赖关系</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> user_mview_dependencies;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-常用组合场景\"><a class=\"markdownIt-Anchor\" href=\"#三-常用组合场景\"></a> 三、常用组合场景</h1>\n<h2 id=\"1-定时刷新物化视图\"><a class=\"markdownIt-Anchor\" href=\"#1-定时刷新物化视图\"></a> 1. 定时刷新物化视图</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建每天凌晨2点刷新物化视图的任务</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  DBMS_SCHEDULER.CREATE_JOB(</span><br><span class=\"line\">    job_name <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;REFRESH_MV_JOB&#x27;</span>,</span><br><span class=\"line\">    job_type <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;PLSQL_BLOCK&#x27;</span>,</span><br><span class=\"line\">    job_action <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;BEGIN DBMS_MVIEW.REFRESH(&#x27;&#x27;MV_SALES_DATA&#x27;&#x27;); END;&#x27;</span>,</span><br><span class=\"line\">    start_date <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> SYSTIMESTAMP,</span><br><span class=\"line\">    repeat_interval <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;FREQ=DAILY; BYHOUR=2&#x27;</span>,</span><br><span class=\"line\">    enabled <span class=\"operator\">=</span><span class=\"operator\">&gt;</span> <span class=\"literal\">TRUE</span></span><br><span class=\"line\">  );</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"><span class=\"operator\">/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建带日志的快速刷新物化视图\"><a class=\"markdownIt-Anchor\" href=\"#2-创建带日志的快速刷新物化视图\"></a> 2. 创建带日志的快速刷新物化视图</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在基表上创建物化视图日志</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> LOG <span class=\"keyword\">ON</span> sales </span><br><span class=\"line\"><span class=\"keyword\">WITH</span> ROWID, SEQUENCE (product_id, sale_date, amount)</span><br><span class=\"line\">INCLUDING <span class=\"keyword\">NEW</span> <span class=\"keyword\">VALUES</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建快速刷新的物化视图</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> MATERIALIZED <span class=\"keyword\">VIEW</span> mv_sales_fast</span><br><span class=\"line\">REFRESH FAST <span class=\"keyword\">WITH</span> ROWID</span><br><span class=\"line\"><span class=\"keyword\">AS</span> <span class=\"keyword\">SELECT</span> product_id, sale_date, amount <span class=\"keyword\">FROM</span> sales;</span><br></pre></td></tr></table></figure>\n<p>以上命令涵盖了Oracle数据库定时任务和物化视图的主要操作，根据实际需求选择合适的命令组合使用。</p>\n"},{"title":"Java_Agent","date":"2025-04-10T05:01:39.000Z","_content":"# Java Agent 概述\n\nJava Agent 是一种特殊的 Java 程序，它能够在 JVM 启动时或运行时加载，用于监测、修改或增强其他 Java 应用程序的运行。\n与普通Java程序通过main方法启动不同，Java Agent并不是一个可以单独启动的程序，它必须依附在一个Java应用程序（JVM）上，与主程序运行在同一个JVM进程中，通过Instrumentation 接口与JVM进行交互。\n\n# 常见用途\n1. **性能监控**：收集方法执行时间、调用次数等,TProfiler就是一款优秀的性能分析工具\n2. **AOP 编程**：实现面向切面编程\n3. **热部署**：修改已加载类的行为,常见的热部署工具有IDEA的HotSwap和Jrebel。\n4. **日志增强**：自动添加日志记录\n5. **在线诊断**：收集运行时信息，修复问题。Arthas就是一款非常优秀的Java在线诊断工具。\n6. **调试代码**: 通过IDEA调试代码就是基于Java Agent技术实现的。\n\n# 实现方式\n在Java SE 5之前，要实现一个Agent只能通过编写Native代码来实现。\n从Java SE 5开始，可以使用Java的Instrumentation接口(java.lang.instrument)来编写Agent，在 JVM 启动时通过 -javaagent 参数加载 Agent。\n从Java SE 6开始，可以使用Java的Attach接口(java.lang.instrument)动态加载 Agent，允许在 JVM 启动后动态加载 Agent。\n无论是通过Native的方式还是通过Java Instrumentation接口的方式来编写Agent，它们的工作都是借助JVMTI来进行完成的。\n\n## 两种加载方式及其应用场景\n- 静态加载: 启动时加载,通过Instrumentation接口的premain()方法来实现\n- 动态加载: 运行时附加,通过Attach和agentmain()方法来实现\n  - 动态加载Agent(如BTrace)\n  - 运行时诊断工具(如jstack、jmap)\n  - 动态开启JMX远程监控 \n  - Jcmd、Jps\n    \n## 基本结构\n一个简单的 Java Agent 需要包含以下部分：\n```java\npublic class MyAgent {\n    // 静态加载入口\n    public static void premain(String agentArgs, Instrumentation inst) {\n        // 初始化代码\n    }\n    \n    // 动态加载入口（可选）\n    public static void agentmain(String agentArgs, Instrumentation inst) {\n        // 初始化代码\n    }\n}\n```\n\n## 基于 Instrumentation 接口和premain()方法实现Java Agent\n实现步骤如下:\n1. 定义Java Agent入口类,实现premain()方法\n2. 打包为JAR文件，再MANIFEST.MF文件中使用“Premain-Class”属性指定Agent入口类\n3. 运行Java程序，通过“-javaagent”参数指定Agent的jar包路径\npremain agent的模式有一个致命缺陷:一旦agent抛出异常，会导致主程序的启动失败。\n### 定义Java Agent入口类\n下面是一个简单的 Java Agent 实现，它通过 Instrumentation 接口的 addTransformer() 方法来实现对类的字节码修改，并在类加载时打印出类的名称。\n```java\nimport java.lang.instrument.Instrumentation;\nimport java.lang.instrument.ClassFileTransformer;\n\npublic class MonitoringAgent {\n    public static void premain(String agentArgs, Instrumentation inst) {\n        System.out.println(\"Monitoring Agent started\");\n        inst.addTransformer(new ClassTransformer());\n    }\n}\n\nclass ClassTransformer implements ClassFileTransformer {\n    @Override\n    public byte[] transform(ClassLoader loader, \n                            String className, \n                            Class<?> classBeingRedefined,\n                            ProtectionDomain protectionDomain, \n                            byte[] classfileBuffer) {\n        System.out.println(\"Loading class: \" + className);\n        return null; // 返回null表示不修改字节码\n    }\n}\n```\n\n### 打包\nAgent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”属性，指定 Agent 入口类。\n```\nManifest-Version: 1.0\nPremain-Class: MonitoringAgent\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n### 运行\n运行主程序时，通过“-javaagent”参数指定Agent的jar包路径,可指定多个Agent。\n```\njava -javaagent:myagent.jar -jar myapp.jar\n```\n\n## 基于 Attach 接口和agentmain()方法实现Java Agent\nAttach 接口其实是JVM进程之间的沟通桥梁，底层通过Socket进行通信，JVM A可以发送指令给JVM B，JVM B在收到指令之后执行相应的逻辑。\n需要创建三个项目:\n1. agent-demo项目：定义Java Agent入口类,实现agentmain()方法,并打包为JAR文件\n2. main项目: agent-demo项目需要代理的程序\n3. attach-demo项目：加载agent-demo JAR包，并通过Attach接口连接到main项目的JVM进程\n\n### agent-demo项目\n```java\npackage com.panda.agent;\n\nimport java.lang.instrument.Instrumentation;\n\npublic class AgentMain {\n    public static void agentmain(String agentArgs, Instrumentation inst) {\n        System.out.println(\"----------哈哈，我是agentmain\");\n        System.out.println(\"----------agentArgs = \" + agentArgs);\n    }\n}\n```\n### main项目\n```java\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        System.in.read();\n    }\n}\n```\n### attach-demo项目\nVirtualMachine的Attach方法就是用来将Agent挂载到目标JVM上去的\n```java\npackage com.panda.attach;\n\nimport com.sun.tools.attach.VirtualMachine;\n\npublic class AttachMain {\n    public static void main(String[] args) {\n        try {\n            VirtualMachine vm = VirtualMachine.attach(\"22640\");\n            vm.loadAgent(\"D:/agent-demo-1.0-SNAPSHOT.jar\", \"哈哈\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n# 源码解析\n\n# 总结\nJava Agent 是 Java 平台强大的工具，特别适合需要低侵入性监控和修改应用程序的场景。","source":"_posts/Java-Agent.md","raw":"---\ntitle: Java_Agent\ndate: 2025-04-10 13:01:39\ntags:\n  - Java\n  - Java高级\n  - JVM和性能调优\n  - Java Agent\ncategories:\n  - Java \n  - Java高级\n  - JVM和性能调优\n---\n# Java Agent 概述\n\nJava Agent 是一种特殊的 Java 程序，它能够在 JVM 启动时或运行时加载，用于监测、修改或增强其他 Java 应用程序的运行。\n与普通Java程序通过main方法启动不同，Java Agent并不是一个可以单独启动的程序，它必须依附在一个Java应用程序（JVM）上，与主程序运行在同一个JVM进程中，通过Instrumentation 接口与JVM进行交互。\n\n# 常见用途\n1. **性能监控**：收集方法执行时间、调用次数等,TProfiler就是一款优秀的性能分析工具\n2. **AOP 编程**：实现面向切面编程\n3. **热部署**：修改已加载类的行为,常见的热部署工具有IDEA的HotSwap和Jrebel。\n4. **日志增强**：自动添加日志记录\n5. **在线诊断**：收集运行时信息，修复问题。Arthas就是一款非常优秀的Java在线诊断工具。\n6. **调试代码**: 通过IDEA调试代码就是基于Java Agent技术实现的。\n\n# 实现方式\n在Java SE 5之前，要实现一个Agent只能通过编写Native代码来实现。\n从Java SE 5开始，可以使用Java的Instrumentation接口(java.lang.instrument)来编写Agent，在 JVM 启动时通过 -javaagent 参数加载 Agent。\n从Java SE 6开始，可以使用Java的Attach接口(java.lang.instrument)动态加载 Agent，允许在 JVM 启动后动态加载 Agent。\n无论是通过Native的方式还是通过Java Instrumentation接口的方式来编写Agent，它们的工作都是借助JVMTI来进行完成的。\n\n## 两种加载方式及其应用场景\n- 静态加载: 启动时加载,通过Instrumentation接口的premain()方法来实现\n- 动态加载: 运行时附加,通过Attach和agentmain()方法来实现\n  - 动态加载Agent(如BTrace)\n  - 运行时诊断工具(如jstack、jmap)\n  - 动态开启JMX远程监控 \n  - Jcmd、Jps\n    \n## 基本结构\n一个简单的 Java Agent 需要包含以下部分：\n```java\npublic class MyAgent {\n    // 静态加载入口\n    public static void premain(String agentArgs, Instrumentation inst) {\n        // 初始化代码\n    }\n    \n    // 动态加载入口（可选）\n    public static void agentmain(String agentArgs, Instrumentation inst) {\n        // 初始化代码\n    }\n}\n```\n\n## 基于 Instrumentation 接口和premain()方法实现Java Agent\n实现步骤如下:\n1. 定义Java Agent入口类,实现premain()方法\n2. 打包为JAR文件，再MANIFEST.MF文件中使用“Premain-Class”属性指定Agent入口类\n3. 运行Java程序，通过“-javaagent”参数指定Agent的jar包路径\npremain agent的模式有一个致命缺陷:一旦agent抛出异常，会导致主程序的启动失败。\n### 定义Java Agent入口类\n下面是一个简单的 Java Agent 实现，它通过 Instrumentation 接口的 addTransformer() 方法来实现对类的字节码修改，并在类加载时打印出类的名称。\n```java\nimport java.lang.instrument.Instrumentation;\nimport java.lang.instrument.ClassFileTransformer;\n\npublic class MonitoringAgent {\n    public static void premain(String agentArgs, Instrumentation inst) {\n        System.out.println(\"Monitoring Agent started\");\n        inst.addTransformer(new ClassTransformer());\n    }\n}\n\nclass ClassTransformer implements ClassFileTransformer {\n    @Override\n    public byte[] transform(ClassLoader loader, \n                            String className, \n                            Class<?> classBeingRedefined,\n                            ProtectionDomain protectionDomain, \n                            byte[] classfileBuffer) {\n        System.out.println(\"Loading class: \" + className);\n        return null; // 返回null表示不修改字节码\n    }\n}\n```\n\n### 打包\nAgent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”属性，指定 Agent 入口类。\n```\nManifest-Version: 1.0\nPremain-Class: MonitoringAgent\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n### 运行\n运行主程序时，通过“-javaagent”参数指定Agent的jar包路径,可指定多个Agent。\n```\njava -javaagent:myagent.jar -jar myapp.jar\n```\n\n## 基于 Attach 接口和agentmain()方法实现Java Agent\nAttach 接口其实是JVM进程之间的沟通桥梁，底层通过Socket进行通信，JVM A可以发送指令给JVM B，JVM B在收到指令之后执行相应的逻辑。\n需要创建三个项目:\n1. agent-demo项目：定义Java Agent入口类,实现agentmain()方法,并打包为JAR文件\n2. main项目: agent-demo项目需要代理的程序\n3. attach-demo项目：加载agent-demo JAR包，并通过Attach接口连接到main项目的JVM进程\n\n### agent-demo项目\n```java\npackage com.panda.agent;\n\nimport java.lang.instrument.Instrumentation;\n\npublic class AgentMain {\n    public static void agentmain(String agentArgs, Instrumentation inst) {\n        System.out.println(\"----------哈哈，我是agentmain\");\n        System.out.println(\"----------agentArgs = \" + agentArgs);\n    }\n}\n```\n### main项目\n```java\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        System.in.read();\n    }\n}\n```\n### attach-demo项目\nVirtualMachine的Attach方法就是用来将Agent挂载到目标JVM上去的\n```java\npackage com.panda.attach;\n\nimport com.sun.tools.attach.VirtualMachine;\n\npublic class AttachMain {\n    public static void main(String[] args) {\n        try {\n            VirtualMachine vm = VirtualMachine.attach(\"22640\");\n            vm.loadAgent(\"D:/agent-demo-1.0-SNAPSHOT.jar\", \"哈哈\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n# 源码解析\n\n# 总结\nJava Agent 是 Java 平台强大的工具，特别适合需要低侵入性监控和修改应用程序的场景。","slug":"Java-Agent","published":1,"updated":"2025-04-30T02:48:28.052Z","_id":"cm9cbtqr90000hov4htxs3bj8","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"java-agent-概述\"><a class=\"markdownIt-Anchor\" href=\"#java-agent-概述\"></a> Java Agent 概述</h1>\n<p>Java Agent 是一种特殊的 Java 程序，它能够在 JVM 启动时或运行时加载，用于监测、修改或增强其他 Java 应用程序的运行。<br />\n与普通Java程序通过main方法启动不同，Java Agent并不是一个可以单独启动的程序，它必须依附在一个Java应用程序（JVM）上，与主程序运行在同一个JVM进程中，通过Instrumentation 接口与JVM进行交互。</p>\n<h1 id=\"常见用途\"><a class=\"markdownIt-Anchor\" href=\"#常见用途\"></a> 常见用途</h1>\n<ol>\n<li><strong>性能监控</strong>：收集方法执行时间、调用次数等,TProfiler就是一款优秀的性能分析工具</li>\n<li><strong>AOP 编程</strong>：实现面向切面编程</li>\n<li><strong>热部署</strong>：修改已加载类的行为,常见的热部署工具有IDEA的HotSwap和Jrebel。</li>\n<li><strong>日志增强</strong>：自动添加日志记录</li>\n<li><strong>在线诊断</strong>：收集运行时信息，修复问题。Arthas就是一款非常优秀的Java在线诊断工具。</li>\n<li><strong>调试代码</strong>: 通过IDEA调试代码就是基于Java Agent技术实现的。</li>\n</ol>\n<h1 id=\"实现方式\"><a class=\"markdownIt-Anchor\" href=\"#实现方式\"></a> 实现方式</h1>\n<p>在Java SE 5之前，要实现一个Agent只能通过编写Native代码来实现。<br />\n从Java SE 5开始，可以使用Java的Instrumentation接口(java.lang.instrument)来编写Agent，在 JVM 启动时通过 -javaagent 参数加载 Agent。<br />\n从Java SE 6开始，可以使用Java的Attach接口(java.lang.instrument)动态加载 Agent，允许在 JVM 启动后动态加载 Agent。<br />\n无论是通过Native的方式还是通过Java Instrumentation接口的方式来编写Agent，它们的工作都是借助JVMTI来进行完成的。</p>\n<h2 id=\"两种加载方式及其应用场景\"><a class=\"markdownIt-Anchor\" href=\"#两种加载方式及其应用场景\"></a> 两种加载方式及其应用场景</h2>\n<ul>\n<li>静态加载: 启动时加载,通过Instrumentation接口的premain()方法来实现</li>\n<li>动态加载: 运行时附加,通过Attach和agentmain()方法来实现\n<ul>\n<li>动态加载Agent(如BTrace)</li>\n<li>运行时诊断工具(如jstack、jmap)</li>\n<li>动态开启JMX远程监控</li>\n<li>Jcmd、Jps</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\"></a> 基本结构</h2>\n<p>一个简单的 Java Agent 需要包含以下部分：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态加载入口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 动态加载入口（可选）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-instrumentation-接口和premain方法实现java-agent\"><a class=\"markdownIt-Anchor\" href=\"#基于-instrumentation-接口和premain方法实现java-agent\"></a> 基于 Instrumentation 接口和premain()方法实现Java Agent</h2>\n<p>实现步骤如下:</p>\n<ol>\n<li>定义Java Agent入口类,实现premain()方法</li>\n<li>打包为JAR文件，再MANIFEST.MF文件中使用“Premain-Class”属性指定Agent入口类</li>\n<li>运行Java程序，通过“-javaagent”参数指定Agent的jar包路径<br />\npremain agent的模式有一个致命缺陷:一旦agent抛出异常，会导致主程序的启动失败。</li>\n</ol>\n<h3 id=\"定义java-agent入口类\"><a class=\"markdownIt-Anchor\" href=\"#定义java-agent入口类\"></a> 定义Java Agent入口类</h3>\n<p>下面是一个简单的 Java Agent 实现，它通过 Instrumentation 接口的 addTransformer() 方法来实现对类的字节码修改，并在类加载时打印出类的名称。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MonitoringAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Monitoring Agent started&quot;</span>);</span><br><span class=\"line\">        inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">ClassTransformer</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, </span><br><span class=\"line\">                            String className, </span><br><span class=\"line\">                            Class&lt;?&gt; classBeingRedefined,</span><br><span class=\"line\">                            ProtectionDomain protectionDomain, </span><br><span class=\"line\">                            <span class=\"type\">byte</span>[] classfileBuffer) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Loading class: &quot;</span> + className);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 返回null表示不修改字节码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打包\"><a class=\"markdownIt-Anchor\" href=\"#打包\"></a> 打包</h3>\n<p>Agent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”属性，指定 Agent 入口类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: MonitoringAgent</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a class=\"markdownIt-Anchor\" href=\"#运行\"></a> 运行</h3>\n<p>运行主程序时，通过“-javaagent”参数指定Agent的jar包路径,可指定多个Agent。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:myagent.jar -jar myapp.jar</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-attach-接口和agentmain方法实现java-agent\"><a class=\"markdownIt-Anchor\" href=\"#基于-attach-接口和agentmain方法实现java-agent\"></a> 基于 Attach 接口和agentmain()方法实现Java Agent</h2>\n<p>Attach 接口其实是JVM进程之间的沟通桥梁，底层通过Socket进行通信，JVM A可以发送指令给JVM B，JVM B在收到指令之后执行相应的逻辑。<br />\n需要创建三个项目:</p>\n<ol>\n<li>agent-demo项目：定义Java Agent入口类,实现agentmain()方法,并打包为JAR文件</li>\n<li>main项目: agent-demo项目需要代理的程序</li>\n<li>attach-demo项目：加载agent-demo JAR包，并通过Attach接口连接到main项目的JVM进程</li>\n</ol>\n<h3 id=\"agent-demo项目\"><a class=\"markdownIt-Anchor\" href=\"#agent-demo项目\"></a> agent-demo项目</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.panda.agent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AgentMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------哈哈，我是agentmain&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------agentArgs = &quot;</span> + agentArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"main项目\"><a class=\"markdownIt-Anchor\" href=\"#main项目\"></a> main项目</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.in.read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"attach-demo项目\"><a class=\"markdownIt-Anchor\" href=\"#attach-demo项目\"></a> attach-demo项目</h3>\n<p>VirtualMachine的Attach方法就是用来将Agent挂载到目标JVM上去的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.panda.attach;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AttachMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">VirtualMachine</span> <span class=\"variable\">vm</span> <span class=\"operator\">=</span> VirtualMachine.attach(<span class=\"string\">&quot;22640&quot;</span>);</span><br><span class=\"line\">            vm.loadAgent(<span class=\"string\">&quot;D:/agent-demo-1.0-SNAPSHOT.jar&quot;</span>, <span class=\"string\">&quot;哈哈&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"源码解析\"><a class=\"markdownIt-Anchor\" href=\"#源码解析\"></a> 源码解析</h1>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>Java Agent 是 Java 平台强大的工具，特别适合需要低侵入性监控和修改应用程序的场景。</p>\n","excerpt":"","more":"<h1 id=\"java-agent-概述\"><a class=\"markdownIt-Anchor\" href=\"#java-agent-概述\"></a> Java Agent 概述</h1>\n<p>Java Agent 是一种特殊的 Java 程序，它能够在 JVM 启动时或运行时加载，用于监测、修改或增强其他 Java 应用程序的运行。<br />\n与普通Java程序通过main方法启动不同，Java Agent并不是一个可以单独启动的程序，它必须依附在一个Java应用程序（JVM）上，与主程序运行在同一个JVM进程中，通过Instrumentation 接口与JVM进行交互。</p>\n<h1 id=\"常见用途\"><a class=\"markdownIt-Anchor\" href=\"#常见用途\"></a> 常见用途</h1>\n<ol>\n<li><strong>性能监控</strong>：收集方法执行时间、调用次数等,TProfiler就是一款优秀的性能分析工具</li>\n<li><strong>AOP 编程</strong>：实现面向切面编程</li>\n<li><strong>热部署</strong>：修改已加载类的行为,常见的热部署工具有IDEA的HotSwap和Jrebel。</li>\n<li><strong>日志增强</strong>：自动添加日志记录</li>\n<li><strong>在线诊断</strong>：收集运行时信息，修复问题。Arthas就是一款非常优秀的Java在线诊断工具。</li>\n<li><strong>调试代码</strong>: 通过IDEA调试代码就是基于Java Agent技术实现的。</li>\n</ol>\n<h1 id=\"实现方式\"><a class=\"markdownIt-Anchor\" href=\"#实现方式\"></a> 实现方式</h1>\n<p>在Java SE 5之前，要实现一个Agent只能通过编写Native代码来实现。<br />\n从Java SE 5开始，可以使用Java的Instrumentation接口(java.lang.instrument)来编写Agent，在 JVM 启动时通过 -javaagent 参数加载 Agent。<br />\n从Java SE 6开始，可以使用Java的Attach接口(java.lang.instrument)动态加载 Agent，允许在 JVM 启动后动态加载 Agent。<br />\n无论是通过Native的方式还是通过Java Instrumentation接口的方式来编写Agent，它们的工作都是借助JVMTI来进行完成的。</p>\n<h2 id=\"两种加载方式及其应用场景\"><a class=\"markdownIt-Anchor\" href=\"#两种加载方式及其应用场景\"></a> 两种加载方式及其应用场景</h2>\n<ul>\n<li>静态加载: 启动时加载,通过Instrumentation接口的premain()方法来实现</li>\n<li>动态加载: 运行时附加,通过Attach和agentmain()方法来实现\n<ul>\n<li>动态加载Agent(如BTrace)</li>\n<li>运行时诊断工具(如jstack、jmap)</li>\n<li>动态开启JMX远程监控</li>\n<li>Jcmd、Jps</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本结构\"><a class=\"markdownIt-Anchor\" href=\"#基本结构\"></a> 基本结构</h2>\n<p>一个简单的 Java Agent 需要包含以下部分：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态加载入口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 动态加载入口（可选）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-instrumentation-接口和premain方法实现java-agent\"><a class=\"markdownIt-Anchor\" href=\"#基于-instrumentation-接口和premain方法实现java-agent\"></a> 基于 Instrumentation 接口和premain()方法实现Java Agent</h2>\n<p>实现步骤如下:</p>\n<ol>\n<li>定义Java Agent入口类,实现premain()方法</li>\n<li>打包为JAR文件，再MANIFEST.MF文件中使用“Premain-Class”属性指定Agent入口类</li>\n<li>运行Java程序，通过“-javaagent”参数指定Agent的jar包路径<br />\npremain agent的模式有一个致命缺陷:一旦agent抛出异常，会导致主程序的启动失败。</li>\n</ol>\n<h3 id=\"定义java-agent入口类\"><a class=\"markdownIt-Anchor\" href=\"#定义java-agent入口类\"></a> 定义Java Agent入口类</h3>\n<p>下面是一个简单的 Java Agent 实现，它通过 Instrumentation 接口的 addTransformer() 方法来实现对类的字节码修改，并在类加载时打印出类的名称。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MonitoringAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Monitoring Agent started&quot;</span>);</span><br><span class=\"line\">        inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">ClassTransformer</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ClassTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, </span><br><span class=\"line\">                            String className, </span><br><span class=\"line\">                            Class&lt;?&gt; classBeingRedefined,</span><br><span class=\"line\">                            ProtectionDomain protectionDomain, </span><br><span class=\"line\">                            <span class=\"type\">byte</span>[] classfileBuffer) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Loading class: &quot;</span> + className);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 返回null表示不修改字节码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打包\"><a class=\"markdownIt-Anchor\" href=\"#打包\"></a> 打包</h3>\n<p>Agent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”属性，指定 Agent 入口类。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: MonitoringAgent</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a class=\"markdownIt-Anchor\" href=\"#运行\"></a> 运行</h3>\n<p>运行主程序时，通过“-javaagent”参数指定Agent的jar包路径,可指定多个Agent。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:myagent.jar -jar myapp.jar</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-attach-接口和agentmain方法实现java-agent\"><a class=\"markdownIt-Anchor\" href=\"#基于-attach-接口和agentmain方法实现java-agent\"></a> 基于 Attach 接口和agentmain()方法实现Java Agent</h2>\n<p>Attach 接口其实是JVM进程之间的沟通桥梁，底层通过Socket进行通信，JVM A可以发送指令给JVM B，JVM B在收到指令之后执行相应的逻辑。<br />\n需要创建三个项目:</p>\n<ol>\n<li>agent-demo项目：定义Java Agent入口类,实现agentmain()方法,并打包为JAR文件</li>\n<li>main项目: agent-demo项目需要代理的程序</li>\n<li>attach-demo项目：加载agent-demo JAR包，并通过Attach接口连接到main项目的JVM进程</li>\n</ol>\n<h3 id=\"agent-demo项目\"><a class=\"markdownIt-Anchor\" href=\"#agent-demo项目\"></a> agent-demo项目</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.panda.agent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AgentMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------哈哈，我是agentmain&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------agentArgs = &quot;</span> + agentArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"main项目\"><a class=\"markdownIt-Anchor\" href=\"#main项目\"></a> main项目</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.in.read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"attach-demo项目\"><a class=\"markdownIt-Anchor\" href=\"#attach-demo项目\"></a> attach-demo项目</h3>\n<p>VirtualMachine的Attach方法就是用来将Agent挂载到目标JVM上去的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.panda.attach;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AttachMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">VirtualMachine</span> <span class=\"variable\">vm</span> <span class=\"operator\">=</span> VirtualMachine.attach(<span class=\"string\">&quot;22640&quot;</span>);</span><br><span class=\"line\">            vm.loadAgent(<span class=\"string\">&quot;D:/agent-demo-1.0-SNAPSHOT.jar&quot;</span>, <span class=\"string\">&quot;哈哈&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"源码解析\"><a class=\"markdownIt-Anchor\" href=\"#源码解析\"></a> 源码解析</h1>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h1>\n<p>Java Agent 是 Java 平台强大的工具，特别适合需要低侵入性监控和修改应用程序的场景。</p>\n"},{"title":"Oracle和MySQL中将多行数据合并为一行","date":"2025-04-11T04:06:48.000Z","_content":"\nOracle中将多行数据合并为一行通常使用LISTAGG和XMLAGG函数：\n  - LISTAGG 有 4000 字节的限制，大数据量使用XMLAGG\n  - XMLAGG返回的数据是一个 XML 片段，并且末尾包含分隔符，需搭配GETCLOBVAL/XMLCAST和RTRIM函数使用\n\nMySQL中将多行数据合并为一行通常使用GROUP_CONCAT函数：\n  - GROUP_CONCAT最大长度限制由group_concat_max_len控制\n# Oracle\n## LISTAGG\nLISTAGG(合并字段，分隔符) WITHIN GROUP(ORDER BY 排序字段)\n- 在 Oracle 12c R2 及以上版本，LISTAGG 支持 DISTINCT 关键字\n## XMLAGG\n```sql\nXMLAGG(XMLELEMENT(元素名, 列值或表达式) [ORDER BY 子句])\nXMLAGG(XMLPARSE(列值或表达式) [ORDER BY 子句])\n```\n- XMLPARSE或XMLELEMENT将列值转换为XML片段\n- XMLAGG 将多行数据聚合成一个 XML 片段\n- GETCLOBVAL或XMLCAST函数提取文本内容\n- RTRIM函数删除末尾分隔符\n### XMLAGG + XMLPARSE\n```sql\nSELECT RTRIM(\n    XMLAGG(XMLPARSE(CONTENT COLUMN_NAME || ',' WELLFORMED) ORDER BY COLUMN_NAME).GETCLOBVAL(),\n    ',')\nFROM ALL_TAB_COLUMNS\nWHERE TABLE_NAME = 'MV_PFCOMPY_TYPE_TODAY'\nGROUP BY TABLE_NAME;\n```\n### XMLAGG + XMLELEMENT\n```sql\nSELECT\n    deptno,\n    RTRIM(\n        XMLCAST(\n            XMLAGG(XMLELEMENT(e, ename||', ') ORDER BY ename)\n            AS VARCHAR2(4000)),\n        ', ')\nFROM\n    emp\nGROUP BY\n    deptno;\n```\n# MySQL\n## GROUP_CONCAT\n```sql\nGROUP_CONCAT(列值 ORDER BY 子句 SEPARATOR '分隔符')\n```\n```sql\nSELECT\n    department_id,\n    GROUP_CONCAT(employee_name ORDER BY employee_name SEPARATOR ', ') AS employees\nFROM\n    employees\nGROUP BY\n    department_id;\n```","source":"_posts/Oracle和MySQL中将多行数据合并为一行.md","raw":"---\ntitle: Oracle和MySQL中将多行数据合并为一行\ndate: 2025-04-11 12:06:48\ntags:\n  - 数据库\n  - Oracle\n  - MySQL\n  - 聚合函数\ncategories:\n  - 数据库\n  - 聚合函数\n---\n\nOracle中将多行数据合并为一行通常使用LISTAGG和XMLAGG函数：\n  - LISTAGG 有 4000 字节的限制，大数据量使用XMLAGG\n  - XMLAGG返回的数据是一个 XML 片段，并且末尾包含分隔符，需搭配GETCLOBVAL/XMLCAST和RTRIM函数使用\n\nMySQL中将多行数据合并为一行通常使用GROUP_CONCAT函数：\n  - GROUP_CONCAT最大长度限制由group_concat_max_len控制\n# Oracle\n## LISTAGG\nLISTAGG(合并字段，分隔符) WITHIN GROUP(ORDER BY 排序字段)\n- 在 Oracle 12c R2 及以上版本，LISTAGG 支持 DISTINCT 关键字\n## XMLAGG\n```sql\nXMLAGG(XMLELEMENT(元素名, 列值或表达式) [ORDER BY 子句])\nXMLAGG(XMLPARSE(列值或表达式) [ORDER BY 子句])\n```\n- XMLPARSE或XMLELEMENT将列值转换为XML片段\n- XMLAGG 将多行数据聚合成一个 XML 片段\n- GETCLOBVAL或XMLCAST函数提取文本内容\n- RTRIM函数删除末尾分隔符\n### XMLAGG + XMLPARSE\n```sql\nSELECT RTRIM(\n    XMLAGG(XMLPARSE(CONTENT COLUMN_NAME || ',' WELLFORMED) ORDER BY COLUMN_NAME).GETCLOBVAL(),\n    ',')\nFROM ALL_TAB_COLUMNS\nWHERE TABLE_NAME = 'MV_PFCOMPY_TYPE_TODAY'\nGROUP BY TABLE_NAME;\n```\n### XMLAGG + XMLELEMENT\n```sql\nSELECT\n    deptno,\n    RTRIM(\n        XMLCAST(\n            XMLAGG(XMLELEMENT(e, ename||', ') ORDER BY ename)\n            AS VARCHAR2(4000)),\n        ', ')\nFROM\n    emp\nGROUP BY\n    deptno;\n```\n# MySQL\n## GROUP_CONCAT\n```sql\nGROUP_CONCAT(列值 ORDER BY 子句 SEPARATOR '分隔符')\n```\n```sql\nSELECT\n    department_id,\n    GROUP_CONCAT(employee_name ORDER BY employee_name SEPARATOR ', ') AS employees\nFROM\n    employees\nGROUP BY\n    department_id;\n```","slug":"Oracle和MySQL中将多行数据合并为一行","published":1,"updated":"2025-04-22T01:19:27.589Z","_id":"cm9cbtqrd0001hov4dey30olf","comments":1,"layout":"post","photos":[],"content":"<p>Oracle中将多行数据合并为一行通常使用LISTAGG和XMLAGG函数：</p>\n<ul>\n<li>LISTAGG 有 4000 字节的限制，大数据量使用XMLAGG</li>\n<li>XMLAGG返回的数据是一个 XML 片段，并且末尾包含分隔符，需搭配GETCLOBVAL/XMLCAST和RTRIM函数使用</li>\n</ul>\n<p>MySQL中将多行数据合并为一行通常使用GROUP_CONCAT函数：</p>\n<ul>\n<li>GROUP_CONCAT最大长度限制由group_concat_max_len控制</li>\n</ul>\n<h1 id=\"oracle\"><a class=\"markdownIt-Anchor\" href=\"#oracle\"></a> Oracle</h1>\n<h2 id=\"listagg\"><a class=\"markdownIt-Anchor\" href=\"#listagg\"></a> LISTAGG</h2>\n<p>LISTAGG(合并字段，分隔符) WITHIN GROUP(ORDER BY 排序字段)</p>\n<ul>\n<li>在 Oracle 12c R2 及以上版本，LISTAGG 支持 DISTINCT 关键字</li>\n</ul>\n<h2 id=\"xmlagg\"><a class=\"markdownIt-Anchor\" href=\"#xmlagg\"></a> XMLAGG</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLAGG(XMLELEMENT(元素名, 列值或表达式) [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> 子句])</span><br><span class=\"line\">XMLAGG(XMLPARSE(列值或表达式) [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> 子句])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>XMLPARSE或XMLELEMENT将列值转换为XML片段</li>\n<li>XMLAGG 将多行数据聚合成一个 XML 片段</li>\n<li>GETCLOBVAL或XMLCAST函数提取文本内容</li>\n<li>RTRIM函数删除末尾分隔符</li>\n</ul>\n<h3 id=\"xmlagg-xmlparse\"><a class=\"markdownIt-Anchor\" href=\"#xmlagg-xmlparse\"></a> XMLAGG + XMLPARSE</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> RTRIM(</span><br><span class=\"line\">    XMLAGG(XMLPARSE(CONTENT COLUMN_NAME <span class=\"operator\">||</span> <span class=\"string\">&#x27;,&#x27;</span> WELLFORMED) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> COLUMN_NAME).GETCLOBVAL(),</span><br><span class=\"line\">    <span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ALL_TAB_COLUMNS</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_NAME <span class=\"operator\">=</span> <span class=\"string\">&#x27;MV_PFCOMPY_TYPE_TODAY&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> TABLE_NAME;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xmlagg-xmlelement\"><a class=\"markdownIt-Anchor\" href=\"#xmlagg-xmlelement\"></a> XMLAGG + XMLELEMENT</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    deptno,</span><br><span class=\"line\">    RTRIM(</span><br><span class=\"line\">        XMLCAST(</span><br><span class=\"line\">            XMLAGG(XMLELEMENT(e, ename<span class=\"operator\">||</span><span class=\"string\">&#x27;, &#x27;</span>) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> ename)</span><br><span class=\"line\">            <span class=\"keyword\">AS</span> VARCHAR2(<span class=\"number\">4000</span>)),</span><br><span class=\"line\">        <span class=\"string\">&#x27;, &#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    emp</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">    deptno;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mysql\"><a class=\"markdownIt-Anchor\" href=\"#mysql\"></a> MySQL</h1>\n<h2 id=\"group_concat\"><a class=\"markdownIt-Anchor\" href=\"#group_concat\"></a> GROUP_CONCAT</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GROUP_CONCAT(列值 <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> 子句 SEPARATOR <span class=\"string\">&#x27;分隔符&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    department_id,</span><br><span class=\"line\">    GROUP_CONCAT(employee_name <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> employee_name SEPARATOR <span class=\"string\">&#x27;, &#x27;</span>) <span class=\"keyword\">AS</span> employees</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    employees</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">    department_id;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>Oracle中将多行数据合并为一行通常使用LISTAGG和XMLAGG函数：</p>\n<ul>\n<li>LISTAGG 有 4000 字节的限制，大数据量使用XMLAGG</li>\n<li>XMLAGG返回的数据是一个 XML 片段，并且末尾包含分隔符，需搭配GETCLOBVAL/XMLCAST和RTRIM函数使用</li>\n</ul>\n<p>MySQL中将多行数据合并为一行通常使用GROUP_CONCAT函数：</p>\n<ul>\n<li>GROUP_CONCAT最大长度限制由group_concat_max_len控制</li>\n</ul>\n<h1 id=\"oracle\"><a class=\"markdownIt-Anchor\" href=\"#oracle\"></a> Oracle</h1>\n<h2 id=\"listagg\"><a class=\"markdownIt-Anchor\" href=\"#listagg\"></a> LISTAGG</h2>\n<p>LISTAGG(合并字段，分隔符) WITHIN GROUP(ORDER BY 排序字段)</p>\n<ul>\n<li>在 Oracle 12c R2 及以上版本，LISTAGG 支持 DISTINCT 关键字</li>\n</ul>\n<h2 id=\"xmlagg\"><a class=\"markdownIt-Anchor\" href=\"#xmlagg\"></a> XMLAGG</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLAGG(XMLELEMENT(元素名, 列值或表达式) [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> 子句])</span><br><span class=\"line\">XMLAGG(XMLPARSE(列值或表达式) [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> 子句])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>XMLPARSE或XMLELEMENT将列值转换为XML片段</li>\n<li>XMLAGG 将多行数据聚合成一个 XML 片段</li>\n<li>GETCLOBVAL或XMLCAST函数提取文本内容</li>\n<li>RTRIM函数删除末尾分隔符</li>\n</ul>\n<h3 id=\"xmlagg-xmlparse\"><a class=\"markdownIt-Anchor\" href=\"#xmlagg-xmlparse\"></a> XMLAGG + XMLPARSE</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> RTRIM(</span><br><span class=\"line\">    XMLAGG(XMLPARSE(CONTENT COLUMN_NAME <span class=\"operator\">||</span> <span class=\"string\">&#x27;,&#x27;</span> WELLFORMED) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> COLUMN_NAME).GETCLOBVAL(),</span><br><span class=\"line\">    <span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ALL_TAB_COLUMNS</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_NAME <span class=\"operator\">=</span> <span class=\"string\">&#x27;MV_PFCOMPY_TYPE_TODAY&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> TABLE_NAME;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xmlagg-xmlelement\"><a class=\"markdownIt-Anchor\" href=\"#xmlagg-xmlelement\"></a> XMLAGG + XMLELEMENT</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    deptno,</span><br><span class=\"line\">    RTRIM(</span><br><span class=\"line\">        XMLCAST(</span><br><span class=\"line\">            XMLAGG(XMLELEMENT(e, ename<span class=\"operator\">||</span><span class=\"string\">&#x27;, &#x27;</span>) <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> ename)</span><br><span class=\"line\">            <span class=\"keyword\">AS</span> VARCHAR2(<span class=\"number\">4000</span>)),</span><br><span class=\"line\">        <span class=\"string\">&#x27;, &#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    emp</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">    deptno;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mysql\"><a class=\"markdownIt-Anchor\" href=\"#mysql\"></a> MySQL</h1>\n<h2 id=\"group_concat\"><a class=\"markdownIt-Anchor\" href=\"#group_concat\"></a> GROUP_CONCAT</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GROUP_CONCAT(列值 <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> 子句 SEPARATOR <span class=\"string\">&#x27;分隔符&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    department_id,</span><br><span class=\"line\">    GROUP_CONCAT(employee_name <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> employee_name SEPARATOR <span class=\"string\">&#x27;, &#x27;</span>) <span class=\"keyword\">AS</span> employees</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    employees</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">    department_id;</span><br></pre></td></tr></table></figure>"},{"title":"Java动态调试技术原理","date":"2025-04-10T05:08:38.000Z","_content":"","source":"_posts/Java动态调试技术原理.md","raw":"---\ntitle: Java动态调试技术原理\ndate: 2025-04-10 13:08:38\ntags:\n  - Java\n  - Java高级\n  - JVM和性能调优\n  - Java动态调试\n  - debug\ncategories:\n  - Java\n  - Java高级\n  - JVM和性能调优\n---\n","slug":"Java动态调试技术原理","published":1,"updated":"2025-04-10T05:10:05.440Z","comments":1,"layout":"post","photos":[],"_id":"cm9cbtqrj0003hov4du6m2rgh","content":"","excerpt":"","more":""},{"title":"VuePress","date":"2025-04-30T01:01:45.000Z","_content":"# 简介\nVuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 Markdown 来书写内容（如文档、博客等），然后 VuePress 会帮助你生成一个静态网站来展示它们。\n## 为什么不是Hexo？\n从Hexo转向VuePress最主要的原因就是没有找到Hexo顶部导航栏配置，只能配置侧边栏，而侧边栏又是默认隐藏的，需要多点击一次才能展开，使用起来很不方便；多级导航栏也没有找到。虽然可以通过修改主题模板的方式实现定制化配置，但因为创建项目时选择了依赖导入的方式引入主题，所以没法做到复杂的定制化配置。用久了Spring，已经习惯了配置中心化思想，实在不喜欢这种修改源代码的方式，所以转向VuePress。VuePress内置了更直观的导航栏配置系统，通过主题配置文件即可快速设置多级导航，还可以提供更灵活的组件系统来处理复杂的布局和交互。\n此外 Hexo 对非标准的Markdown语法支持不够好。比如不支持高亮块，从语雀导过来的文件不能直接渲染，需要手动修改。VuePress增强了Markdown处理：支持自定义容器（如高亮块、提示框等）、可以在Markdown中直接使用Vue组件、提供更多扩展语法（如自定义代码块）等。  \n之前选择Hexo的最主要原因就是想快速搭建一个博客，Hexo搭建简单，适合新手，而VuePress需要有Vue基础。但转向VuePress之后发现其实VuePress的配置也不难，都是通过脚手架搭建项目，两个框架的搭建难度其实差不多，主题和插件反而是觉得VuePress的配置更简单，至于Vue组件、扩展语法等，属于锦上添花的功能，不用这些功能也一样可以搭建出一个博客，可以等用到的时候再去研究。\n# 使用\n## 安装\n依赖环境：Node.js v18.19.0+、npm\n## 创建项目\n```bash\nnpm init vuepress vuepress\n```\n注意：\n1. 这里的`vuepress`是项目名称，可以自定义。\n2. 按回车键后根据提示选择配置，一般选择默认即可。 \n3. **如果需要自动部署到 GitHub Pages，`是否需要一个自动部署文档到 GitHub Pages 的工作流？`这个选项一定要选择Yes，否则需要手动创建`.github/workflows/XXX.yml` 文件来配置工作流。**(手动创建工作流容易出错，选择npm方式初始化，但官方给定的配置文件是pnpm，先是报错没有设置pnpm版本，然后有提示没有依赖锁文件，最后重新建了一个npm项目，把工作流文件复制过去才成功)。\n4. 当前最新版本是2.x，以下命令都是基于2.x版本的。\n## 上传到GitHub\n1. 初始化Git仓库\n```bash\ncd vuepress\ngit init\n```\n2. 新建`.gitignore`文件，添加以下内容\n```gitignore\n# VuePress 默认临时文件目录\n.vuepress/.temp\n# VuePress 默认缓存目录\n.vuepress/.cache\n# VuePress 默认构建生成的静态文件目录\n.vuepress/dist\n```\n3. 提交代码到GitHub\n```bash\ngit add.\ngit commit -m \"first commit\"\ngit checkout -b main # 创建 main 分支\ngit remote add origin https://github.com/zhaomy2025/vuepress.git\ngit push -u origin main # 首次推送 main 分支并设置上游\n```\n\n## 开始使用VuePress\n### 启动开发环境\n```bash\nnpm run docs:dev\n```\nVuePress 会在 http://localhost:8080 启动一个热重载的开发服务器。\n\n### 构建静态网站\n```bash\nnpm run docs:build\n```\n\n# 配置\n## 基本配置\nVuePress 站点的基本配置文件是 .vuepress/config.js ，但也同样支持 TypeScript 配置文件。你可以使用 .vuepress/config.ts 来得到更好的类型提示。\n在`.vuepress/config.js`文件中，我们可以配置 VuePress 的基本信息、主题、插件、markdown渲染器等。\n```javascript\nimport { blogPlugin } from '@vuepress/plugin-blog'\nimport { defaultTheme } from '@vuepress/theme-default'\nimport { defineUserConfig } from 'vuepress'\nimport { viteBundler } from '@vuepress/bundler-vite'\n\nexport default defineUserConfig({\n    lang: 'zh-CN',\n    title: 'VuePress',\n    description: '这是我的第一个 VuePress 站点',\n    base: '/vuepress/', // 部署到 GitHub Pages 时，如果仓库名不是username.github.io,则需要设置 base为仓库名\n    theme: defaultTheme({}),\n})\n```\n### 主题\nVuePress 提供了多个官方主题，包括默认主题、简约主题、星空主题等。主题可设置logo、导航栏、侧边栏等。\n#### navbar\nnavbar用来配置导航栏，可以设置文本和链接。link 可以链接到布局文件，如`link: '/article/'`，则会渲染`.vuepress/layout/Article.vue`文件；也可以链接到其他页面，如`link: '/posts/resource/'`，则会渲染`posts/resource/index.md`文件。\n\n#### sidebar\nsidebar用来配置侧边栏的导航，可以根据文件结构自动生成侧边栏，也可以手动配置侧边栏。手动配置包括全局配置和按路径配置，两种配置方式都支持字符串、`NavbarLink`对象和`NavbarGroup`对象数组配置。\n    - 自动生成侧边栏：`sidebar: \"auto\"`\n    - 全局配置侧边栏：\n        - 字符串数组：`sidebar: ['/posts/resource/','/posts/spring/']`\n        - `NavbarLink`对象数组：`sidebar: [{text: '资源', link: '/posts/resource/'}]`\n        - `NavbarGroup`对象数组：`sidebar: [{text: 'Spring', children: ['/posts/spring/','/posts/spring/spring-framework/']}]`\n    - 按路径配置侧边栏，同样支持字符串、`NavbarLink`对象和`NavbarGroup`对象数组配置：\n        ```javascript\n        sidebar: {\n            '/posts/resource/': ['/posts/resource/'],   // 字符串数组配置\n            '/posts/spring/': [ // 对象数组配置\n                {text: 'Spring', link: '/posts/spring/'},\n                {\n                    text: 'Spring Framework',\n                    children: ['/posts/spring/spring-framework', '/posts/spring/spring-framework-ioc']\n                }\n            ]\n        }\n        ```\n简单配置使用字符串数组方式即可，侧边栏会根据文件结构自动生成，侧边栏显示文章的h1标题（如果未设置则显示路径），默认标题层级是2，显示到h3标题。\n如需使用更复杂的侧边栏配置，比如分组、折叠、自定义标题层级等，可以使用对象数组方式配置，对象数组支持以下属性：\n    - text：分组标题\n    - collapsable：是否可折叠\n    - children：子菜单\n    - sidebarDepth：控制显示的标题层级，默认是2，显示到h3标题\n    - link：链接到页面，可以是绝对路径或相对路径。\n          \n注意：一篇文章中仅第一个h1标题会显示在侧边栏，所以文章标题使用h1标题，而其余标题使用h2标题。\n\n```javascript\ntheme: defaultTheme({\n    logo: 'https://vuejs.press/images/hero.png',\n    navbar: [\n        '/',\n        {\n            text: '资源',\n            link: '/posts/resource/',// 链接到 posts/resource/index.md 文件\n        },\n        {\n            text: 'Article',\n            link: '/article/',//链接到.vuepress/layout/Article.vue 文件\n        },\n    ],\n    sidebar: {\n        '/posts/resource/': ['/posts/resource/']\n    }\n})\n```\n\n## 客户端配置文件\n有些时候用户们可能希望直接添加一些客户端代码。 VuePress 通过客户端配置文件`client.js`来支持这种需求。\nlayouts用于注册自定义布局组件，每个布局是一个 Vue 组件（.vue 文件），自定义布局文件放在.vuepress/layouts/目录下。\n```javascript\nimport { defineClientConfig } from 'vuepress/client'\n\nexport default defineClientConfig({\n  enhance({ app, router, siteData }) {},\n  setup() {},\n  rootComponents: [],\n  layouts: {Article,Category,Tag,Timeline,},// 用于注册自定义布局组件，自定义布局文件放在.vuepress/layouts/目录下\n})\n```\n\n# 页面\n## 路由\n默认情况下，页面的路由路径是根据你的 Markdown 文件的相对路径决定的。\n默认配置下，README.md 和 index.md 都会被转换成 index.html ，并且其对应的路由路径都是由斜杠结尾的。如果同时保留这两个文件，就可能会造成冲突。\n设置`pagePatterns`可以避免某个文件被`VuePress`处理，例如使用 ['**/*.md', '!**/README.md', '!.vuepress', '!node_modules'] 来排除所有的 README.md 文件。\n\n## Frontmatter\n在Markdown文件中，我们可以添加YAML Frontmatter来配置页面的元数据。\n```yaml\n---\nlang: zh-CN\ntitle: 页面的标题\ndescription: 页面的描述\n---\n```\n\n## 内容\nVuePress首先会将Markdown转换为HTML，然后将HTML作为Vue单文件组件的`<template>`。\n借助`markdown-it`和Vue模板语法的能力，基础的Markdown可以得到很多的扩展功能。\n\n## 新建页面\n新建页面只需要在`docs/posts`或其子目录下新建一个Markdown文件，相对路径名即为页面的路由路径。\nVuePress没有提供命令行工具来创建页面，如需使用命令行创建页面，可以通过 Node.js 脚本自动化创建文件，例如：\n```javascript\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst tmpFilePath = process.argv[2].replace(/\\s+/g, '-').toLowerCase();\nconst filePath = tmpFilePath.endsWith('/') ? `${tmpFilePath}index.md` : `${tmpFilePath}.md`;\nconst title = process.argv[3];\nconst content = `---\ntitle: ${title}\ndate: ${new Date().toISOString()}\n---\n\n# ${title}\n[[toc]]\n`;\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nfs.writeFileSync(path.join(__dirname, 'docs/posts/',filePath), content);\nconsole.log(`Created: ${filePath}`);\n```\n在 package.json 中添加命令：\n```json\n{\n  \"scripts\": {\n    \"n\": \"node create-post.js\"\n  }\n}\n```\n然后运行 `npm run n hello-world “Hello World”` 来创建`Hello World`页面。\n\n# Markdown\n## 语法扩展\nVuePress 内置支持的 Markdown 语法扩展：\n- 基本语法：粗体、斜体、删除线、下划线、脚注、标题、引用、列表、图片、链接、代码块、高亮、分割线\n- 表格\n- 标题描点  markdown-it-anchor\n- 链接扩展  markdown.links\n- Emoji `:EMOJICODE:`\n- 目录：`[[toc]]`\n- 行高亮：`{1,7-9}`\n- 行号：取消行号`no-line-numbers`\n- 导入代码块\n### 基本语法\n```markdown\n**粗体**\n*斜体*\n***加粗斜体***\n~~删除线~~\n<u>下划线</u>\n[^footnote]: 脚注内容\n# 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n\n> 引用\n\n- 列表1\n* 列表2\n+ 列表3\n\n1. 列表1\n2. 列表2\n3. 列表3\n\n- [x] 任务1\n- [ ] 任务2\n\n![图片描述](https://vuejs.press/images/hero.png)\n\n[链接描述](https://vuejs.press/)\n高亮\n分割线\n```\n\n### 表格\n```markdown\n| 列1 | 列2 | 列3 |\n| --- | --- | --- |\n| 左对齐 | 居中 | 右对齐 |\n```\n\n### 标题描点\n```markdown\n# 标题1 {#custom-id}\n```\n\n### 链接扩展\n```markdown\n[链接描述](https://vuejs.press/ \"可选的标题\")\n```\n\n### Emoji\n```markdown\n:smile: :100: :fire:\n```\n\n### 目录\n```markdown\n[[toc]]\n```\n\n### 行高亮\n````ts{1,7-9}\n```ts{1,7-9}\nimport { defaultTheme } from '@vuepress/theme-default'\nimport { defineUserConfig } from 'vuepress'\nexport default defineUserConfig({\n  title: '你好， VuePress',\n\n  theme: defaultTheme({\n    logo: 'https://vuejs.org/images/logo.png',\n  }),\n})\n```\n````\n### 行号\n````ts:no-line-numbers\n```ts:no-line-numbers\n// 行号被禁用\nconst line2 = 'This is line 2'\nconst line3 = 'This is line 3'\n```\n````\n## ~~plantuml~~\n配置无效\n1. 安装 markdown-it-plantuml\n```bash\nnpm install markdown-it-plantuml --save-dev\n```\n2. 修改 `.vuepress/config.js` 文件，添加以下内容：\n```javascript\nmarkdown: {\n    extendsMarkdown: (md) => {md.use(markdownItPlantuml);}\n}\n```\n注意：以上为vuepress 2.x版本的配置，与vuepress 1.x版本的配置不同。\n## 在Markdown中使用Vue\n## Markdown组件\n# 静态资源\n## 相对路径\n## Public文件\n## Base Helper\n## 依赖包和路径别名\n# 多语言支持\n## 站点多语言配置\n## 主题多语言配置\n# 部署\n## GitHub Pages\nGitHub Pages 可以通过路径区分来托管多个项目，需要为每个项目单独创建一个仓库。\n1. 设置正确的 base 路径: `base: '/vuepress/',`。\n2. 检查`.github/workflows`目录下是否存在工作流文件，项目初始化时会提示`是否需要一个自动部署文档到 GitHub Pages 的工作流？`，若选择Yes会自动生成一个工作流文件，否则需要手动创建`.github/workflows/XXX.yml` 文件来配置工作流（不推荐）。 \n3. 在远程仓库中前往 `Settings > Pages > Build and deployment`，设置`Source`为 `Deploy from a brach`，分支设置为`gh-pages`。\n   \n`Source`的设置有两种方式：`Deploy from a brach`和`GitHub Actions`。\n   - 本项目自带的部署工作流组件是`JamesIves/github-pages-deploy-action@v4`，它会自动将文档部署到的分支`gh-pages`，所以需要将 `Source` 设置为 `Deploy from a brach`，分支设置为`gh-pages`。 \n   -主页项目使用的部署组件是`actions/upload-pages-artifact@v3`，没有新建分支，设置`Source`为`GitHub Actions`方式即可访问网站。\n\n```yaml\n# 本项目的部署组件\n- name: 部署文档\n  uses: JamesIves/github-pages-deploy-action@v4\n  with:\n    branch: gh-pages\n    folder: docs/.vuepress/dist\n# 主页项目的部署组件\n- name: Upload Pages artifact\n  uses: actions/upload-pages-artifact@v3\n  with:\n    path: ./public\n```","source":"_posts/VuePress.md","raw":"---\ntitle: VuePress\ndate: 2025-04-30 09:01:45\ntags: \n- VuePress\ncategories:\n- 静态网站生成器\n---\n# 简介\nVuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 Markdown 来书写内容（如文档、博客等），然后 VuePress 会帮助你生成一个静态网站来展示它们。\n## 为什么不是Hexo？\n从Hexo转向VuePress最主要的原因就是没有找到Hexo顶部导航栏配置，只能配置侧边栏，而侧边栏又是默认隐藏的，需要多点击一次才能展开，使用起来很不方便；多级导航栏也没有找到。虽然可以通过修改主题模板的方式实现定制化配置，但因为创建项目时选择了依赖导入的方式引入主题，所以没法做到复杂的定制化配置。用久了Spring，已经习惯了配置中心化思想，实在不喜欢这种修改源代码的方式，所以转向VuePress。VuePress内置了更直观的导航栏配置系统，通过主题配置文件即可快速设置多级导航，还可以提供更灵活的组件系统来处理复杂的布局和交互。\n此外 Hexo 对非标准的Markdown语法支持不够好。比如不支持高亮块，从语雀导过来的文件不能直接渲染，需要手动修改。VuePress增强了Markdown处理：支持自定义容器（如高亮块、提示框等）、可以在Markdown中直接使用Vue组件、提供更多扩展语法（如自定义代码块）等。  \n之前选择Hexo的最主要原因就是想快速搭建一个博客，Hexo搭建简单，适合新手，而VuePress需要有Vue基础。但转向VuePress之后发现其实VuePress的配置也不难，都是通过脚手架搭建项目，两个框架的搭建难度其实差不多，主题和插件反而是觉得VuePress的配置更简单，至于Vue组件、扩展语法等，属于锦上添花的功能，不用这些功能也一样可以搭建出一个博客，可以等用到的时候再去研究。\n# 使用\n## 安装\n依赖环境：Node.js v18.19.0+、npm\n## 创建项目\n```bash\nnpm init vuepress vuepress\n```\n注意：\n1. 这里的`vuepress`是项目名称，可以自定义。\n2. 按回车键后根据提示选择配置，一般选择默认即可。 \n3. **如果需要自动部署到 GitHub Pages，`是否需要一个自动部署文档到 GitHub Pages 的工作流？`这个选项一定要选择Yes，否则需要手动创建`.github/workflows/XXX.yml` 文件来配置工作流。**(手动创建工作流容易出错，选择npm方式初始化，但官方给定的配置文件是pnpm，先是报错没有设置pnpm版本，然后有提示没有依赖锁文件，最后重新建了一个npm项目，把工作流文件复制过去才成功)。\n4. 当前最新版本是2.x，以下命令都是基于2.x版本的。\n## 上传到GitHub\n1. 初始化Git仓库\n```bash\ncd vuepress\ngit init\n```\n2. 新建`.gitignore`文件，添加以下内容\n```gitignore\n# VuePress 默认临时文件目录\n.vuepress/.temp\n# VuePress 默认缓存目录\n.vuepress/.cache\n# VuePress 默认构建生成的静态文件目录\n.vuepress/dist\n```\n3. 提交代码到GitHub\n```bash\ngit add.\ngit commit -m \"first commit\"\ngit checkout -b main # 创建 main 分支\ngit remote add origin https://github.com/zhaomy2025/vuepress.git\ngit push -u origin main # 首次推送 main 分支并设置上游\n```\n\n## 开始使用VuePress\n### 启动开发环境\n```bash\nnpm run docs:dev\n```\nVuePress 会在 http://localhost:8080 启动一个热重载的开发服务器。\n\n### 构建静态网站\n```bash\nnpm run docs:build\n```\n\n# 配置\n## 基本配置\nVuePress 站点的基本配置文件是 .vuepress/config.js ，但也同样支持 TypeScript 配置文件。你可以使用 .vuepress/config.ts 来得到更好的类型提示。\n在`.vuepress/config.js`文件中，我们可以配置 VuePress 的基本信息、主题、插件、markdown渲染器等。\n```javascript\nimport { blogPlugin } from '@vuepress/plugin-blog'\nimport { defaultTheme } from '@vuepress/theme-default'\nimport { defineUserConfig } from 'vuepress'\nimport { viteBundler } from '@vuepress/bundler-vite'\n\nexport default defineUserConfig({\n    lang: 'zh-CN',\n    title: 'VuePress',\n    description: '这是我的第一个 VuePress 站点',\n    base: '/vuepress/', // 部署到 GitHub Pages 时，如果仓库名不是username.github.io,则需要设置 base为仓库名\n    theme: defaultTheme({}),\n})\n```\n### 主题\nVuePress 提供了多个官方主题，包括默认主题、简约主题、星空主题等。主题可设置logo、导航栏、侧边栏等。\n#### navbar\nnavbar用来配置导航栏，可以设置文本和链接。link 可以链接到布局文件，如`link: '/article/'`，则会渲染`.vuepress/layout/Article.vue`文件；也可以链接到其他页面，如`link: '/posts/resource/'`，则会渲染`posts/resource/index.md`文件。\n\n#### sidebar\nsidebar用来配置侧边栏的导航，可以根据文件结构自动生成侧边栏，也可以手动配置侧边栏。手动配置包括全局配置和按路径配置，两种配置方式都支持字符串、`NavbarLink`对象和`NavbarGroup`对象数组配置。\n    - 自动生成侧边栏：`sidebar: \"auto\"`\n    - 全局配置侧边栏：\n        - 字符串数组：`sidebar: ['/posts/resource/','/posts/spring/']`\n        - `NavbarLink`对象数组：`sidebar: [{text: '资源', link: '/posts/resource/'}]`\n        - `NavbarGroup`对象数组：`sidebar: [{text: 'Spring', children: ['/posts/spring/','/posts/spring/spring-framework/']}]`\n    - 按路径配置侧边栏，同样支持字符串、`NavbarLink`对象和`NavbarGroup`对象数组配置：\n        ```javascript\n        sidebar: {\n            '/posts/resource/': ['/posts/resource/'],   // 字符串数组配置\n            '/posts/spring/': [ // 对象数组配置\n                {text: 'Spring', link: '/posts/spring/'},\n                {\n                    text: 'Spring Framework',\n                    children: ['/posts/spring/spring-framework', '/posts/spring/spring-framework-ioc']\n                }\n            ]\n        }\n        ```\n简单配置使用字符串数组方式即可，侧边栏会根据文件结构自动生成，侧边栏显示文章的h1标题（如果未设置则显示路径），默认标题层级是2，显示到h3标题。\n如需使用更复杂的侧边栏配置，比如分组、折叠、自定义标题层级等，可以使用对象数组方式配置，对象数组支持以下属性：\n    - text：分组标题\n    - collapsable：是否可折叠\n    - children：子菜单\n    - sidebarDepth：控制显示的标题层级，默认是2，显示到h3标题\n    - link：链接到页面，可以是绝对路径或相对路径。\n          \n注意：一篇文章中仅第一个h1标题会显示在侧边栏，所以文章标题使用h1标题，而其余标题使用h2标题。\n\n```javascript\ntheme: defaultTheme({\n    logo: 'https://vuejs.press/images/hero.png',\n    navbar: [\n        '/',\n        {\n            text: '资源',\n            link: '/posts/resource/',// 链接到 posts/resource/index.md 文件\n        },\n        {\n            text: 'Article',\n            link: '/article/',//链接到.vuepress/layout/Article.vue 文件\n        },\n    ],\n    sidebar: {\n        '/posts/resource/': ['/posts/resource/']\n    }\n})\n```\n\n## 客户端配置文件\n有些时候用户们可能希望直接添加一些客户端代码。 VuePress 通过客户端配置文件`client.js`来支持这种需求。\nlayouts用于注册自定义布局组件，每个布局是一个 Vue 组件（.vue 文件），自定义布局文件放在.vuepress/layouts/目录下。\n```javascript\nimport { defineClientConfig } from 'vuepress/client'\n\nexport default defineClientConfig({\n  enhance({ app, router, siteData }) {},\n  setup() {},\n  rootComponents: [],\n  layouts: {Article,Category,Tag,Timeline,},// 用于注册自定义布局组件，自定义布局文件放在.vuepress/layouts/目录下\n})\n```\n\n# 页面\n## 路由\n默认情况下，页面的路由路径是根据你的 Markdown 文件的相对路径决定的。\n默认配置下，README.md 和 index.md 都会被转换成 index.html ，并且其对应的路由路径都是由斜杠结尾的。如果同时保留这两个文件，就可能会造成冲突。\n设置`pagePatterns`可以避免某个文件被`VuePress`处理，例如使用 ['**/*.md', '!**/README.md', '!.vuepress', '!node_modules'] 来排除所有的 README.md 文件。\n\n## Frontmatter\n在Markdown文件中，我们可以添加YAML Frontmatter来配置页面的元数据。\n```yaml\n---\nlang: zh-CN\ntitle: 页面的标题\ndescription: 页面的描述\n---\n```\n\n## 内容\nVuePress首先会将Markdown转换为HTML，然后将HTML作为Vue单文件组件的`<template>`。\n借助`markdown-it`和Vue模板语法的能力，基础的Markdown可以得到很多的扩展功能。\n\n## 新建页面\n新建页面只需要在`docs/posts`或其子目录下新建一个Markdown文件，相对路径名即为页面的路由路径。\nVuePress没有提供命令行工具来创建页面，如需使用命令行创建页面，可以通过 Node.js 脚本自动化创建文件，例如：\n```javascript\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst tmpFilePath = process.argv[2].replace(/\\s+/g, '-').toLowerCase();\nconst filePath = tmpFilePath.endsWith('/') ? `${tmpFilePath}index.md` : `${tmpFilePath}.md`;\nconst title = process.argv[3];\nconst content = `---\ntitle: ${title}\ndate: ${new Date().toISOString()}\n---\n\n# ${title}\n[[toc]]\n`;\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nfs.writeFileSync(path.join(__dirname, 'docs/posts/',filePath), content);\nconsole.log(`Created: ${filePath}`);\n```\n在 package.json 中添加命令：\n```json\n{\n  \"scripts\": {\n    \"n\": \"node create-post.js\"\n  }\n}\n```\n然后运行 `npm run n hello-world “Hello World”` 来创建`Hello World`页面。\n\n# Markdown\n## 语法扩展\nVuePress 内置支持的 Markdown 语法扩展：\n- 基本语法：粗体、斜体、删除线、下划线、脚注、标题、引用、列表、图片、链接、代码块、高亮、分割线\n- 表格\n- 标题描点  markdown-it-anchor\n- 链接扩展  markdown.links\n- Emoji `:EMOJICODE:`\n- 目录：`[[toc]]`\n- 行高亮：`{1,7-9}`\n- 行号：取消行号`no-line-numbers`\n- 导入代码块\n### 基本语法\n```markdown\n**粗体**\n*斜体*\n***加粗斜体***\n~~删除线~~\n<u>下划线</u>\n[^footnote]: 脚注内容\n# 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n\n> 引用\n\n- 列表1\n* 列表2\n+ 列表3\n\n1. 列表1\n2. 列表2\n3. 列表3\n\n- [x] 任务1\n- [ ] 任务2\n\n![图片描述](https://vuejs.press/images/hero.png)\n\n[链接描述](https://vuejs.press/)\n高亮\n分割线\n```\n\n### 表格\n```markdown\n| 列1 | 列2 | 列3 |\n| --- | --- | --- |\n| 左对齐 | 居中 | 右对齐 |\n```\n\n### 标题描点\n```markdown\n# 标题1 {#custom-id}\n```\n\n### 链接扩展\n```markdown\n[链接描述](https://vuejs.press/ \"可选的标题\")\n```\n\n### Emoji\n```markdown\n:smile: :100: :fire:\n```\n\n### 目录\n```markdown\n[[toc]]\n```\n\n### 行高亮\n````ts{1,7-9}\n```ts{1,7-9}\nimport { defaultTheme } from '@vuepress/theme-default'\nimport { defineUserConfig } from 'vuepress'\nexport default defineUserConfig({\n  title: '你好， VuePress',\n\n  theme: defaultTheme({\n    logo: 'https://vuejs.org/images/logo.png',\n  }),\n})\n```\n````\n### 行号\n````ts:no-line-numbers\n```ts:no-line-numbers\n// 行号被禁用\nconst line2 = 'This is line 2'\nconst line3 = 'This is line 3'\n```\n````\n## ~~plantuml~~\n配置无效\n1. 安装 markdown-it-plantuml\n```bash\nnpm install markdown-it-plantuml --save-dev\n```\n2. 修改 `.vuepress/config.js` 文件，添加以下内容：\n```javascript\nmarkdown: {\n    extendsMarkdown: (md) => {md.use(markdownItPlantuml);}\n}\n```\n注意：以上为vuepress 2.x版本的配置，与vuepress 1.x版本的配置不同。\n## 在Markdown中使用Vue\n## Markdown组件\n# 静态资源\n## 相对路径\n## Public文件\n## Base Helper\n## 依赖包和路径别名\n# 多语言支持\n## 站点多语言配置\n## 主题多语言配置\n# 部署\n## GitHub Pages\nGitHub Pages 可以通过路径区分来托管多个项目，需要为每个项目单独创建一个仓库。\n1. 设置正确的 base 路径: `base: '/vuepress/',`。\n2. 检查`.github/workflows`目录下是否存在工作流文件，项目初始化时会提示`是否需要一个自动部署文档到 GitHub Pages 的工作流？`，若选择Yes会自动生成一个工作流文件，否则需要手动创建`.github/workflows/XXX.yml` 文件来配置工作流（不推荐）。 \n3. 在远程仓库中前往 `Settings > Pages > Build and deployment`，设置`Source`为 `Deploy from a brach`，分支设置为`gh-pages`。\n   \n`Source`的设置有两种方式：`Deploy from a brach`和`GitHub Actions`。\n   - 本项目自带的部署工作流组件是`JamesIves/github-pages-deploy-action@v4`，它会自动将文档部署到的分支`gh-pages`，所以需要将 `Source` 设置为 `Deploy from a brach`，分支设置为`gh-pages`。 \n   -主页项目使用的部署组件是`actions/upload-pages-artifact@v3`，没有新建分支，设置`Source`为`GitHub Actions`方式即可访问网站。\n\n```yaml\n# 本项目的部署组件\n- name: 部署文档\n  uses: JamesIves/github-pages-deploy-action@v4\n  with:\n    branch: gh-pages\n    folder: docs/.vuepress/dist\n# 主页项目的部署组件\n- name: Upload Pages artifact\n  uses: actions/upload-pages-artifact@v3\n  with:\n    path: ./public\n```","slug":"VuePress","published":1,"updated":"2025-05-13T07:50:50.928Z","_id":"cmaeyu3io000044v47hfmby20","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>VuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 Markdown 来书写内容（如文档、博客等），然后 VuePress 会帮助你生成一个静态网站来展示它们。</p>\n<h2 id=\"为什么不是hexo\"><a class=\"markdownIt-Anchor\" href=\"#为什么不是hexo\"></a> 为什么不是Hexo？</h2>\n<p>从Hexo转向VuePress最主要的原因就是没有找到Hexo顶部导航栏配置，只能配置侧边栏，而侧边栏又是默认隐藏的，需要多点击一次才能展开，使用起来很不方便；多级导航栏也没有找到。虽然可以通过修改主题模板的方式实现定制化配置，但因为创建项目时选择了依赖导入的方式引入主题，所以没法做到复杂的定制化配置。用久了Spring，已经习惯了配置中心化思想，实在不喜欢这种修改源代码的方式，所以转向VuePress。VuePress内置了更直观的导航栏配置系统，通过主题配置文件即可快速设置多级导航，还可以提供更灵活的组件系统来处理复杂的布局和交互。<br />\n此外 Hexo 对非标准的Markdown语法支持不够好。比如不支持高亮块，从语雀导过来的文件不能直接渲染，需要手动修改。VuePress增强了Markdown处理：支持自定义容器（如高亮块、提示框等）、可以在Markdown中直接使用Vue组件、提供更多扩展语法（如自定义代码块）等。<br />\n之前选择Hexo的最主要原因就是想快速搭建一个博客，Hexo搭建简单，适合新手，而VuePress需要有Vue基础。但转向VuePress之后发现其实VuePress的配置也不难，都是通过脚手架搭建项目，两个框架的搭建难度其实差不多，主题和插件反而是觉得VuePress的配置更简单，至于Vue组件、扩展语法等，属于锦上添花的功能，不用这些功能也一样可以搭建出一个博客，可以等用到的时候再去研究。</p>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h1>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>依赖环境：Node.js v18.19.0+、npm</p>\n<h2 id=\"创建项目\"><a class=\"markdownIt-Anchor\" href=\"#创建项目\"></a> 创建项目</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vuepress vuepress</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>这里的<code>vuepress</code>是项目名称，可以自定义。</li>\n<li>按回车键后根据提示选择配置，一般选择默认即可。</li>\n<li><strong>如果需要自动部署到 GitHub Pages，<code>是否需要一个自动部署文档到 GitHub Pages 的工作流？</code>这个选项一定要选择Yes，否则需要手动创建<code>.github/workflows/XXX.yml</code> 文件来配置工作流。</strong>(手动创建工作流容易出错，选择npm方式初始化，但官方给定的配置文件是pnpm，先是报错没有设置pnpm版本，然后有提示没有依赖锁文件，最后重新建了一个npm项目，把工作流文件复制过去才成功)。</li>\n<li>当前最新版本是2.x，以下命令都是基于2.x版本的。</li>\n</ol>\n<h2 id=\"上传到github\"><a class=\"markdownIt-Anchor\" href=\"#上传到github\"></a> 上传到GitHub</h2>\n<ol>\n<li>初始化Git仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vuepress</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新建<code>.gitignore</code>文件，添加以下内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># VuePress 默认临时文件目录</span><br><span class=\"line\">.vuepress/.temp</span><br><span class=\"line\"># VuePress 默认缓存目录</span><br><span class=\"line\">.vuepress/.cache</span><br><span class=\"line\"># VuePress 默认构建生成的静态文件目录</span><br><span class=\"line\">.vuepress/dist</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>提交代码到GitHub</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add.</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\">git checkout -b main <span class=\"comment\"># 创建 main 分支</span></span><br><span class=\"line\">git remote add origin https://github.com/zhaomy2025/vuepress.git</span><br><span class=\"line\">git push -u origin main <span class=\"comment\"># 首次推送 main 分支并设置上游</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始使用vuepress\"><a class=\"markdownIt-Anchor\" href=\"#开始使用vuepress\"></a> 开始使用VuePress</h2>\n<h3 id=\"启动开发环境\"><a class=\"markdownIt-Anchor\" href=\"#启动开发环境\"></a> 启动开发环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run docs:dev</span><br></pre></td></tr></table></figure>\n<p>VuePress 会在 <a href=\"http://localhost:8080\">http://localhost:8080</a> 启动一个热重载的开发服务器。</p>\n<h3 id=\"构建静态网站\"><a class=\"markdownIt-Anchor\" href=\"#构建静态网站\"></a> 构建静态网站</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run docs:build</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\"></a> 配置</h1>\n<h2 id=\"基本配置\"><a class=\"markdownIt-Anchor\" href=\"#基本配置\"></a> 基本配置</h2>\n<p>VuePress 站点的基本配置文件是 .vuepress/config.js ，但也同样支持 TypeScript 配置文件。你可以使用 .vuepress/config.ts 来得到更好的类型提示。<br />\n在<code>.vuepress/config.js</code>文件中，我们可以配置 VuePress 的基本信息、主题、插件、markdown渲染器等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; blogPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vuepress/plugin-blog&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defaultTheme &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vuepress/theme-default&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineUserConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuepress&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; viteBundler &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vuepress/bundler-vite&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineUserConfig</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">lang</span>: <span class=\"string\">&#x27;zh-CN&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;VuePress&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">description</span>: <span class=\"string\">&#x27;这是我的第一个 VuePress 站点&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">base</span>: <span class=\"string\">&#x27;/vuepress/&#x27;</span>, <span class=\"comment\">// 部署到 GitHub Pages 时，如果仓库名不是username.github.io,则需要设置 base为仓库名</span></span><br><span class=\"line\">    <span class=\"attr\">theme</span>: <span class=\"title function_\">defaultTheme</span>(&#123;&#125;),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题\"><a class=\"markdownIt-Anchor\" href=\"#主题\"></a> 主题</h3>\n<p>VuePress 提供了多个官方主题，包括默认主题、简约主题、星空主题等。主题可设置logo、导航栏、侧边栏等。</p>\n<h4 id=\"navbar\"><a class=\"markdownIt-Anchor\" href=\"#navbar\"></a> navbar</h4>\n<p>navbar用来配置导航栏，可以设置文本和链接。link 可以链接到布局文件，如<code>link: '/article/'</code>，则会渲染<code>.vuepress/layout/Article.vue</code>文件；也可以链接到其他页面，如<code>link: '/posts/resource/'</code>，则会渲染<code>posts/resource/index.md</code>文件。</p>\n<h4 id=\"sidebar\"><a class=\"markdownIt-Anchor\" href=\"#sidebar\"></a> sidebar</h4>\n<p>sidebar用来配置侧边栏的导航，可以根据文件结构自动生成侧边栏，也可以手动配置侧边栏。手动配置包括全局配置和按路径配置，两种配置方式都支持字符串、<code>NavbarLink</code>对象和<code>NavbarGroup</code>对象数组配置。<br />\n- 自动生成侧边栏：<code>sidebar: &quot;auto&quot;</code><br />\n- 全局配置侧边栏：<br />\n- 字符串数组：<code>sidebar: ['/posts/resource/','/posts/spring/']</code><br />\n- <code>NavbarLink</code>对象数组：<code>sidebar: [&#123;text: '资源', link: '/posts/resource/'&#125;]</code><br />\n- <code>NavbarGroup</code>对象数组：<code>sidebar: [&#123;text: 'Spring', children: ['/posts/spring/','/posts/spring/spring-framework/']&#125;]</code><br />\n- 按路径配置侧边栏，同样支持字符串、<code>NavbarLink</code>对象和<code>NavbarGroup</code>对象数组配置：<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;/posts/resource/&#x27;</span>: [<span class=\"string\">&#x27;/posts/resource/&#x27;</span>],   <span class=\"comment\">// 字符串数组配置</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;/posts/spring/&#x27;</span>: [ <span class=\"comment\">// 对象数组配置</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">text</span>: <span class=\"string\">&#x27;Spring&#x27;</span>, <span class=\"attr\">link</span>: <span class=\"string\">&#x27;/posts/spring/&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Spring Framework&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [<span class=\"string\">&#x27;/posts/spring/spring-framework&#x27;</span>, <span class=\"string\">&#x27;/posts/spring/spring-framework-ioc&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n简单配置使用字符串数组方式即可，侧边栏会根据文件结构自动生成，侧边栏显示文章的h1标题（如果未设置则显示路径），默认标题层级是2，显示到h3标题。<br />\n如需使用更复杂的侧边栏配置，比如分组、折叠、自定义标题层级等，可以使用对象数组方式配置，对象数组支持以下属性：<br />\n- text：分组标题<br />\n- collapsable：是否可折叠<br />\n- children：子菜单<br />\n- sidebarDepth：控制显示的标题层级，默认是2，显示到h3标题<br />\n- link：链接到页面，可以是绝对路径或相对路径。</p>\n<p>注意：一篇文章中仅第一个h1标题会显示在侧边栏，所以文章标题使用h1标题，而其余标题使用h2标题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme</span>: <span class=\"title function_\">defaultTheme</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">logo</span>: <span class=\"string\">&#x27;https://vuejs.press/images/hero.png&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">navbar</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;资源&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">link</span>: <span class=\"string\">&#x27;/posts/resource/&#x27;</span>,<span class=\"comment\">// 链接到 posts/resource/index.md 文件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Article&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">link</span>: <span class=\"string\">&#x27;/article/&#x27;</span>,<span class=\"comment\">//链接到.vuepress/layout/Article.vue 文件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">sidebar</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;/posts/resource/&#x27;</span>: [<span class=\"string\">&#x27;/posts/resource/&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端配置文件\"><a class=\"markdownIt-Anchor\" href=\"#客户端配置文件\"></a> 客户端配置文件</h2>\n<p>有些时候用户们可能希望直接添加一些客户端代码。 VuePress 通过客户端配置文件<code>client.js</code>来支持这种需求。<br />\nlayouts用于注册自定义布局组件，每个布局是一个 Vue 组件（.vue 文件），自定义布局文件放在.vuepress/layouts/目录下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineClientConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuepress/client&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineClientConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">enhance</span>(<span class=\"params\">&#123; app, router, siteData &#125;</span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">rootComponents</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">layouts</span>: &#123;<span class=\"title class_\">Article</span>,<span class=\"title class_\">Category</span>,<span class=\"title class_\">Tag</span>,<span class=\"title class_\">Timeline</span>,&#125;,<span class=\"comment\">// 用于注册自定义布局组件，自定义布局文件放在.vuepress/layouts/目录下</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"页面\"><a class=\"markdownIt-Anchor\" href=\"#页面\"></a> 页面</h1>\n<h2 id=\"路由\"><a class=\"markdownIt-Anchor\" href=\"#路由\"></a> 路由</h2>\n<p>默认情况下，页面的路由路径是根据你的 Markdown 文件的相对路径决定的。<br />\n默认配置下，<a href=\"http://README.md\">README.md</a> 和 <a href=\"http://index.md\">index.md</a> 都会被转换成 index.html ，并且其对应的路由路径都是由斜杠结尾的。如果同时保留这两个文件，就可能会造成冲突。<br />\n设置<code>pagePatterns</code>可以避免某个文件被<code>VuePress</code>处理，例如使用 [‘<strong>/*.md’, '!</strong>/README.md’, ‘!.vuepress’, ‘!node_modules’] 来排除所有的 <a href=\"http://README.md\">README.md</a> 文件。</p>\n<h2 id=\"frontmatter\"><a class=\"markdownIt-Anchor\" href=\"#frontmatter\"></a> Frontmatter</h2>\n<p>在Markdown文件中，我们可以添加YAML Frontmatter来配置页面的元数据。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">lang:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">页面的标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">页面的描述</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"内容\"><a class=\"markdownIt-Anchor\" href=\"#内容\"></a> 内容</h2>\n<p>VuePress首先会将Markdown转换为HTML，然后将HTML作为Vue单文件组件的<code>&lt;template&gt;</code>。<br />\n借助<code>markdown-it</code>和Vue模板语法的能力，基础的Markdown可以得到很多的扩展功能。</p>\n<h2 id=\"新建页面\"><a class=\"markdownIt-Anchor\" href=\"#新建页面\"></a> 新建页面</h2>\n<p>新建页面只需要在<code>docs/posts</code>或其子目录下新建一个Markdown文件，相对路径名即为页面的路由路径。<br />\nVuePress没有提供命令行工具来创建页面，如需使用命令行创建页面，可以通过 Node.js 脚本自动化创建文件，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fileURLToPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;url&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tmpFilePath = process.<span class=\"property\">argv</span>[<span class=\"number\">2</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27;-&#x27;</span>).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> filePath = tmpFilePath.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;/&#x27;</span>) ? <span class=\"string\">`<span class=\"subst\">$&#123;tmpFilePath&#125;</span>index.md`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;tmpFilePath&#125;</span>.md`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> title = process.<span class=\"property\">argv</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> content = <span class=\"string\">`---</span></span><br><span class=\"line\"><span class=\"string\">title: <span class=\"subst\">$&#123;title&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">date: <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString()&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># <span class=\"subst\">$&#123;title&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">[[toc]]</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> __dirname = path.<span class=\"title function_\">dirname</span>(<span class=\"title function_\">fileURLToPath</span>(<span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"property\">url</span>));</span><br><span class=\"line\">fs.<span class=\"title function_\">writeFileSync</span>(path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;docs/posts/&#x27;</span>,filePath), content);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Created: <span class=\"subst\">$&#123;filePath&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n<p>在 package.json 中添加命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;n&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node create-post.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>然后运行 <code>npm run n hello-world “Hello World”</code> 来创建<code>Hello World</code>页面。</p>\n<h1 id=\"markdown\"><a class=\"markdownIt-Anchor\" href=\"#markdown\"></a> Markdown</h1>\n<h2 id=\"语法扩展\"><a class=\"markdownIt-Anchor\" href=\"#语法扩展\"></a> 语法扩展</h2>\n<p>VuePress 内置支持的 Markdown 语法扩展：</p>\n<ul>\n<li>基本语法：粗体、斜体、删除线、下划线、脚注、标题、引用、列表、图片、链接、代码块、高亮、分割线</li>\n<li>表格</li>\n<li>标题描点  markdown-it-anchor</li>\n<li>链接扩展  markdown.links</li>\n<li>Emoji <code>:EMOJICODE:</code></li>\n<li>目录：<code>[[toc]]</code></li>\n<li>行高亮：<code>&#123;1,7-9&#125;</code></li>\n<li>行号：取消行号<code>no-line-numbers</code></li>\n<li>导入代码块</li>\n</ul>\n<h3 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\"></a> 基本语法</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*加粗斜体*</span>**</span></span><br><span class=\"line\">~~删除线~~</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>下划线<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span></span><br><span class=\"line\">[<span class=\"symbol\">^footnote</span>]: <span class=\"link\">脚注内容</span></span><br><span class=\"line\"><span class=\"section\"># 标题1</span></span><br><span class=\"line\"><span class=\"section\">## 标题2</span></span><br><span class=\"line\"><span class=\"section\">### 标题3</span></span><br><span class=\"line\"><span class=\"section\">#### 标题4</span></span><br><span class=\"line\"><span class=\"section\">##### 标题5</span></span><br><span class=\"line\"><span class=\"section\">###### 标题6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; 引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 列表1</span><br><span class=\"line\"><span class=\"bullet\">*</span> 列表2</span><br><span class=\"line\"><span class=\"bullet\">+</span> 列表3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 列表1</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 列表2</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 列表3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> [x] 任务1</span><br><span class=\"line\"><span class=\"bullet\">-</span> [ ] 任务2</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">图片描述</span>](<span class=\"link\">https://vuejs.press/images/hero.png</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">链接描述</span>](<span class=\"link\">https://vuejs.press/</span>)</span><br><span class=\"line\">高亮</span><br><span class=\"line\">分割线</span><br></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a class=\"markdownIt-Anchor\" href=\"#表格\"></a> 表格</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 列1 | 列2 | 列3 |</span><br><span class=\"line\">| --- | --- | --- |</span><br><span class=\"line\">| 左对齐 | 居中 | 右对齐 |</span><br></pre></td></tr></table></figure>\n<h3 id=\"标题描点\"><a class=\"markdownIt-Anchor\" href=\"#标题描点\"></a> 标题描点</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 标题1 &#123;#custom-id&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"链接扩展\"><a class=\"markdownIt-Anchor\" href=\"#链接扩展\"></a> 链接扩展</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接描述</span>](<span class=\"link\">https://vuejs.press/ &quot;可选的标题&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"emoji\"><a class=\"markdownIt-Anchor\" href=\"#emoji\"></a> Emoji</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:smile: :100: :fire:</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\"></a> 目录</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[toc]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"行高亮\"><a class=\"markdownIt-Anchor\" href=\"#行高亮\"></a> 行高亮</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```ts&#123;1,7-9&#125;</span><br><span class=\"line\">import &#123; defaultTheme &#125; from &#x27;@vuepress/theme-default&#x27;</span><br><span class=\"line\">import &#123; defineUserConfig &#125; from &#x27;vuepress&#x27;</span><br><span class=\"line\">export default defineUserConfig(&#123;</span><br><span class=\"line\">  title: &#x27;你好， VuePress&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">  theme: defaultTheme(&#123;</span><br><span class=\"line\">    logo: &#x27;https://vuejs.org/images/logo.png&#x27;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<h3 id=\"行号\"><a class=\"markdownIt-Anchor\" href=\"#行号\"></a> 行号</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```ts:no-line-numbers</span><br><span class=\"line\">// 行号被禁用</span><br><span class=\"line\">const line2 = &#x27;This is line 2&#x27;</span><br><span class=\"line\">const line3 = &#x27;This is line 3&#x27;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<h2 id=\"plantuml\"><a class=\"markdownIt-Anchor\" href=\"#plantuml\"></a> <s>plantuml</s></h2>\n<p>配置无效</p>\n<ol>\n<li>安装 markdown-it-plantuml</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install markdown-it-plantuml --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 <code>.vuepress/config.js</code> 文件，添加以下内容：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">markdown</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extendsMarkdown</span>: <span class=\"function\">(<span class=\"params\">md</span>) =&gt;</span> &#123;md.<span class=\"title function_\">use</span>(markdownItPlantuml);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：以上为vuepress 2.x版本的配置，与vuepress 1.x版本的配置不同。</p>\n<h2 id=\"在markdown中使用vue\"><a class=\"markdownIt-Anchor\" href=\"#在markdown中使用vue\"></a> 在Markdown中使用Vue</h2>\n<h2 id=\"markdown组件\"><a class=\"markdownIt-Anchor\" href=\"#markdown组件\"></a> Markdown组件</h2>\n<h1 id=\"静态资源\"><a class=\"markdownIt-Anchor\" href=\"#静态资源\"></a> 静态资源</h1>\n<h2 id=\"相对路径\"><a class=\"markdownIt-Anchor\" href=\"#相对路径\"></a> 相对路径</h2>\n<h2 id=\"public文件\"><a class=\"markdownIt-Anchor\" href=\"#public文件\"></a> Public文件</h2>\n<h2 id=\"base-helper\"><a class=\"markdownIt-Anchor\" href=\"#base-helper\"></a> Base Helper</h2>\n<h2 id=\"依赖包和路径别名\"><a class=\"markdownIt-Anchor\" href=\"#依赖包和路径别名\"></a> 依赖包和路径别名</h2>\n<h1 id=\"多语言支持\"><a class=\"markdownIt-Anchor\" href=\"#多语言支持\"></a> 多语言支持</h1>\n<h2 id=\"站点多语言配置\"><a class=\"markdownIt-Anchor\" href=\"#站点多语言配置\"></a> 站点多语言配置</h2>\n<h2 id=\"主题多语言配置\"><a class=\"markdownIt-Anchor\" href=\"#主题多语言配置\"></a> 主题多语言配置</h2>\n<h1 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\"></a> 部署</h1>\n<h2 id=\"github-pages\"><a class=\"markdownIt-Anchor\" href=\"#github-pages\"></a> GitHub Pages</h2>\n<p>GitHub Pages 可以通过路径区分来托管多个项目，需要为每个项目单独创建一个仓库。</p>\n<ol>\n<li>设置正确的 base 路径: <code>base: '/vuepress/',</code>。</li>\n<li>检查<code>.github/workflows</code>目录下是否存在工作流文件，项目初始化时会提示<code>是否需要一个自动部署文档到 GitHub Pages 的工作流？</code>，若选择Yes会自动生成一个工作流文件，否则需要手动创建<code>.github/workflows/XXX.yml</code> 文件来配置工作流（不推荐）。</li>\n<li>在远程仓库中前往 <code>Settings &gt; Pages &gt; Build and deployment</code>，设置<code>Source</code>为 <code>Deploy from a brach</code>，分支设置为<code>gh-pages</code>。</li>\n</ol>\n<p><code>Source</code>的设置有两种方式：<code>Deploy from a brach</code>和<code>GitHub Actions</code>。</p>\n<ul>\n<li>本项目自带的部署工作流组件是<code>JamesIves/github-pages-deploy-action@v4</code>，它会自动将文档部署到的分支<code>gh-pages</code>，所以需要将 <code>Source</code> 设置为 <code>Deploy from a brach</code>，分支设置为<code>gh-pages</code>。<br />\n-主页项目使用的部署组件是<code>actions/upload-pages-artifact@v3</code>，没有新建分支，设置<code>Source</code>为<code>GitHub Actions</code>方式即可访问网站。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本项目的部署组件</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">部署文档</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">JamesIves/github-pages-deploy-action@v4</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span></span><br><span class=\"line\">    <span class=\"attr\">folder:</span> <span class=\"string\">docs/.vuepress/dist</span></span><br><span class=\"line\"><span class=\"comment\"># 主页项目的部署组件</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Upload</span> <span class=\"string\">Pages</span> <span class=\"string\">artifact</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-pages-artifact@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h1>\n<p>VuePress 是一个以 Markdown 为中心的静态网站生成器。你可以使用 Markdown 来书写内容（如文档、博客等），然后 VuePress 会帮助你生成一个静态网站来展示它们。</p>\n<h2 id=\"为什么不是hexo\"><a class=\"markdownIt-Anchor\" href=\"#为什么不是hexo\"></a> 为什么不是Hexo？</h2>\n<p>从Hexo转向VuePress最主要的原因就是没有找到Hexo顶部导航栏配置，只能配置侧边栏，而侧边栏又是默认隐藏的，需要多点击一次才能展开，使用起来很不方便；多级导航栏也没有找到。虽然可以通过修改主题模板的方式实现定制化配置，但因为创建项目时选择了依赖导入的方式引入主题，所以没法做到复杂的定制化配置。用久了Spring，已经习惯了配置中心化思想，实在不喜欢这种修改源代码的方式，所以转向VuePress。VuePress内置了更直观的导航栏配置系统，通过主题配置文件即可快速设置多级导航，还可以提供更灵活的组件系统来处理复杂的布局和交互。<br />\n此外 Hexo 对非标准的Markdown语法支持不够好。比如不支持高亮块，从语雀导过来的文件不能直接渲染，需要手动修改。VuePress增强了Markdown处理：支持自定义容器（如高亮块、提示框等）、可以在Markdown中直接使用Vue组件、提供更多扩展语法（如自定义代码块）等。<br />\n之前选择Hexo的最主要原因就是想快速搭建一个博客，Hexo搭建简单，适合新手，而VuePress需要有Vue基础。但转向VuePress之后发现其实VuePress的配置也不难，都是通过脚手架搭建项目，两个框架的搭建难度其实差不多，主题和插件反而是觉得VuePress的配置更简单，至于Vue组件、扩展语法等，属于锦上添花的功能，不用这些功能也一样可以搭建出一个博客，可以等用到的时候再去研究。</p>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h1>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<p>依赖环境：Node.js v18.19.0+、npm</p>\n<h2 id=\"创建项目\"><a class=\"markdownIt-Anchor\" href=\"#创建项目\"></a> 创建项目</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init vuepress vuepress</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>这里的<code>vuepress</code>是项目名称，可以自定义。</li>\n<li>按回车键后根据提示选择配置，一般选择默认即可。</li>\n<li><strong>如果需要自动部署到 GitHub Pages，<code>是否需要一个自动部署文档到 GitHub Pages 的工作流？</code>这个选项一定要选择Yes，否则需要手动创建<code>.github/workflows/XXX.yml</code> 文件来配置工作流。</strong>(手动创建工作流容易出错，选择npm方式初始化，但官方给定的配置文件是pnpm，先是报错没有设置pnpm版本，然后有提示没有依赖锁文件，最后重新建了一个npm项目，把工作流文件复制过去才成功)。</li>\n<li>当前最新版本是2.x，以下命令都是基于2.x版本的。</li>\n</ol>\n<h2 id=\"上传到github\"><a class=\"markdownIt-Anchor\" href=\"#上传到github\"></a> 上传到GitHub</h2>\n<ol>\n<li>初始化Git仓库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vuepress</span><br><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新建<code>.gitignore</code>文件，添加以下内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># VuePress 默认临时文件目录</span><br><span class=\"line\">.vuepress/.temp</span><br><span class=\"line\"># VuePress 默认缓存目录</span><br><span class=\"line\">.vuepress/.cache</span><br><span class=\"line\"># VuePress 默认构建生成的静态文件目录</span><br><span class=\"line\">.vuepress/dist</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>提交代码到GitHub</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add.</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\">git checkout -b main <span class=\"comment\"># 创建 main 分支</span></span><br><span class=\"line\">git remote add origin https://github.com/zhaomy2025/vuepress.git</span><br><span class=\"line\">git push -u origin main <span class=\"comment\"># 首次推送 main 分支并设置上游</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始使用vuepress\"><a class=\"markdownIt-Anchor\" href=\"#开始使用vuepress\"></a> 开始使用VuePress</h2>\n<h3 id=\"启动开发环境\"><a class=\"markdownIt-Anchor\" href=\"#启动开发环境\"></a> 启动开发环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run docs:dev</span><br></pre></td></tr></table></figure>\n<p>VuePress 会在 <a href=\"http://localhost:8080\">http://localhost:8080</a> 启动一个热重载的开发服务器。</p>\n<h3 id=\"构建静态网站\"><a class=\"markdownIt-Anchor\" href=\"#构建静态网站\"></a> 构建静态网站</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run docs:build</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\"></a> 配置</h1>\n<h2 id=\"基本配置\"><a class=\"markdownIt-Anchor\" href=\"#基本配置\"></a> 基本配置</h2>\n<p>VuePress 站点的基本配置文件是 .vuepress/config.js ，但也同样支持 TypeScript 配置文件。你可以使用 .vuepress/config.ts 来得到更好的类型提示。<br />\n在<code>.vuepress/config.js</code>文件中，我们可以配置 VuePress 的基本信息、主题、插件、markdown渲染器等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; blogPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vuepress/plugin-blog&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defaultTheme &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vuepress/theme-default&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineUserConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuepress&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; viteBundler &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vuepress/bundler-vite&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineUserConfig</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">lang</span>: <span class=\"string\">&#x27;zh-CN&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&#x27;VuePress&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">description</span>: <span class=\"string\">&#x27;这是我的第一个 VuePress 站点&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">base</span>: <span class=\"string\">&#x27;/vuepress/&#x27;</span>, <span class=\"comment\">// 部署到 GitHub Pages 时，如果仓库名不是username.github.io,则需要设置 base为仓库名</span></span><br><span class=\"line\">    <span class=\"attr\">theme</span>: <span class=\"title function_\">defaultTheme</span>(&#123;&#125;),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题\"><a class=\"markdownIt-Anchor\" href=\"#主题\"></a> 主题</h3>\n<p>VuePress 提供了多个官方主题，包括默认主题、简约主题、星空主题等。主题可设置logo、导航栏、侧边栏等。</p>\n<h4 id=\"navbar\"><a class=\"markdownIt-Anchor\" href=\"#navbar\"></a> navbar</h4>\n<p>navbar用来配置导航栏，可以设置文本和链接。link 可以链接到布局文件，如<code>link: '/article/'</code>，则会渲染<code>.vuepress/layout/Article.vue</code>文件；也可以链接到其他页面，如<code>link: '/posts/resource/'</code>，则会渲染<code>posts/resource/index.md</code>文件。</p>\n<h4 id=\"sidebar\"><a class=\"markdownIt-Anchor\" href=\"#sidebar\"></a> sidebar</h4>\n<p>sidebar用来配置侧边栏的导航，可以根据文件结构自动生成侧边栏，也可以手动配置侧边栏。手动配置包括全局配置和按路径配置，两种配置方式都支持字符串、<code>NavbarLink</code>对象和<code>NavbarGroup</code>对象数组配置。<br />\n- 自动生成侧边栏：<code>sidebar: &quot;auto&quot;</code><br />\n- 全局配置侧边栏：<br />\n- 字符串数组：<code>sidebar: ['/posts/resource/','/posts/spring/']</code><br />\n- <code>NavbarLink</code>对象数组：<code>sidebar: [&#123;text: '资源', link: '/posts/resource/'&#125;]</code><br />\n- <code>NavbarGroup</code>对象数组：<code>sidebar: [&#123;text: 'Spring', children: ['/posts/spring/','/posts/spring/spring-framework/']&#125;]</code><br />\n- 按路径配置侧边栏，同样支持字符串、<code>NavbarLink</code>对象和<code>NavbarGroup</code>对象数组配置：<br />\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;/posts/resource/&#x27;</span>: [<span class=\"string\">&#x27;/posts/resource/&#x27;</span>],   <span class=\"comment\">// 字符串数组配置</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;/posts/spring/&#x27;</span>: [ <span class=\"comment\">// 对象数组配置</span></span><br><span class=\"line\">        &#123;<span class=\"attr\">text</span>: <span class=\"string\">&#x27;Spring&#x27;</span>, <span class=\"attr\">link</span>: <span class=\"string\">&#x27;/posts/spring/&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Spring Framework&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [<span class=\"string\">&#x27;/posts/spring/spring-framework&#x27;</span>, <span class=\"string\">&#x27;/posts/spring/spring-framework-ioc&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n简单配置使用字符串数组方式即可，侧边栏会根据文件结构自动生成，侧边栏显示文章的h1标题（如果未设置则显示路径），默认标题层级是2，显示到h3标题。<br />\n如需使用更复杂的侧边栏配置，比如分组、折叠、自定义标题层级等，可以使用对象数组方式配置，对象数组支持以下属性：<br />\n- text：分组标题<br />\n- collapsable：是否可折叠<br />\n- children：子菜单<br />\n- sidebarDepth：控制显示的标题层级，默认是2，显示到h3标题<br />\n- link：链接到页面，可以是绝对路径或相对路径。</p>\n<p>注意：一篇文章中仅第一个h1标题会显示在侧边栏，所以文章标题使用h1标题，而其余标题使用h2标题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme</span>: <span class=\"title function_\">defaultTheme</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">logo</span>: <span class=\"string\">&#x27;https://vuejs.press/images/hero.png&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">navbar</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;资源&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">link</span>: <span class=\"string\">&#x27;/posts/resource/&#x27;</span>,<span class=\"comment\">// 链接到 posts/resource/index.md 文件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Article&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">link</span>: <span class=\"string\">&#x27;/article/&#x27;</span>,<span class=\"comment\">//链接到.vuepress/layout/Article.vue 文件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">sidebar</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;/posts/resource/&#x27;</span>: [<span class=\"string\">&#x27;/posts/resource/&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端配置文件\"><a class=\"markdownIt-Anchor\" href=\"#客户端配置文件\"></a> 客户端配置文件</h2>\n<p>有些时候用户们可能希望直接添加一些客户端代码。 VuePress 通过客户端配置文件<code>client.js</code>来支持这种需求。<br />\nlayouts用于注册自定义布局组件，每个布局是一个 Vue 组件（.vue 文件），自定义布局文件放在.vuepress/layouts/目录下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineClientConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuepress/client&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineClientConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">enhance</span>(<span class=\"params\">&#123; app, router, siteData &#125;</span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">rootComponents</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">layouts</span>: &#123;<span class=\"title class_\">Article</span>,<span class=\"title class_\">Category</span>,<span class=\"title class_\">Tag</span>,<span class=\"title class_\">Timeline</span>,&#125;,<span class=\"comment\">// 用于注册自定义布局组件，自定义布局文件放在.vuepress/layouts/目录下</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"页面\"><a class=\"markdownIt-Anchor\" href=\"#页面\"></a> 页面</h1>\n<h2 id=\"路由\"><a class=\"markdownIt-Anchor\" href=\"#路由\"></a> 路由</h2>\n<p>默认情况下，页面的路由路径是根据你的 Markdown 文件的相对路径决定的。<br />\n默认配置下，<a href=\"http://README.md\">README.md</a> 和 <a href=\"http://index.md\">index.md</a> 都会被转换成 index.html ，并且其对应的路由路径都是由斜杠结尾的。如果同时保留这两个文件，就可能会造成冲突。<br />\n设置<code>pagePatterns</code>可以避免某个文件被<code>VuePress</code>处理，例如使用 [‘<strong>/*.md’, '!</strong>/README.md’, ‘!.vuepress’, ‘!node_modules’] 来排除所有的 <a href=\"http://README.md\">README.md</a> 文件。</p>\n<h2 id=\"frontmatter\"><a class=\"markdownIt-Anchor\" href=\"#frontmatter\"></a> Frontmatter</h2>\n<p>在Markdown文件中，我们可以添加YAML Frontmatter来配置页面的元数据。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">lang:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">页面的标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">页面的描述</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"内容\"><a class=\"markdownIt-Anchor\" href=\"#内容\"></a> 内容</h2>\n<p>VuePress首先会将Markdown转换为HTML，然后将HTML作为Vue单文件组件的<code>&lt;template&gt;</code>。<br />\n借助<code>markdown-it</code>和Vue模板语法的能力，基础的Markdown可以得到很多的扩展功能。</p>\n<h2 id=\"新建页面\"><a class=\"markdownIt-Anchor\" href=\"#新建页面\"></a> 新建页面</h2>\n<p>新建页面只需要在<code>docs/posts</code>或其子目录下新建一个Markdown文件，相对路径名即为页面的路由路径。<br />\nVuePress没有提供命令行工具来创建页面，如需使用命令行创建页面，可以通过 Node.js 脚本自动化创建文件，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> path <span class=\"keyword\">from</span> <span class=\"string\">&#x27;path&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fileURLToPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;url&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tmpFilePath = process.<span class=\"property\">argv</span>[<span class=\"number\">2</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27;-&#x27;</span>).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> filePath = tmpFilePath.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;/&#x27;</span>) ? <span class=\"string\">`<span class=\"subst\">$&#123;tmpFilePath&#125;</span>index.md`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;tmpFilePath&#125;</span>.md`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> title = process.<span class=\"property\">argv</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> content = <span class=\"string\">`---</span></span><br><span class=\"line\"><span class=\"string\">title: <span class=\"subst\">$&#123;title&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">date: <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString()&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># <span class=\"subst\">$&#123;title&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">[[toc]]</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> __dirname = path.<span class=\"title function_\">dirname</span>(<span class=\"title function_\">fileURLToPath</span>(<span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"property\">url</span>));</span><br><span class=\"line\">fs.<span class=\"title function_\">writeFileSync</span>(path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;docs/posts/&#x27;</span>,filePath), content);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Created: <span class=\"subst\">$&#123;filePath&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n<p>在 package.json 中添加命令：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;n&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node create-post.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>然后运行 <code>npm run n hello-world “Hello World”</code> 来创建<code>Hello World</code>页面。</p>\n<h1 id=\"markdown\"><a class=\"markdownIt-Anchor\" href=\"#markdown\"></a> Markdown</h1>\n<h2 id=\"语法扩展\"><a class=\"markdownIt-Anchor\" href=\"#语法扩展\"></a> 语法扩展</h2>\n<p>VuePress 内置支持的 Markdown 语法扩展：</p>\n<ul>\n<li>基本语法：粗体、斜体、删除线、下划线、脚注、标题、引用、列表、图片、链接、代码块、高亮、分割线</li>\n<li>表格</li>\n<li>标题描点  markdown-it-anchor</li>\n<li>链接扩展  markdown.links</li>\n<li>Emoji <code>:EMOJICODE:</code></li>\n<li>目录：<code>[[toc]]</code></li>\n<li>行高亮：<code>&#123;1,7-9&#125;</code></li>\n<li>行号：取消行号<code>no-line-numbers</code></li>\n<li>导入代码块</li>\n</ul>\n<h3 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\"></a> 基本语法</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"emphasis\">*斜体*</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*加粗斜体*</span>**</span></span><br><span class=\"line\">~~删除线~~</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>下划线<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span></span><br><span class=\"line\">[<span class=\"symbol\">^footnote</span>]: <span class=\"link\">脚注内容</span></span><br><span class=\"line\"><span class=\"section\"># 标题1</span></span><br><span class=\"line\"><span class=\"section\">## 标题2</span></span><br><span class=\"line\"><span class=\"section\">### 标题3</span></span><br><span class=\"line\"><span class=\"section\">#### 标题4</span></span><br><span class=\"line\"><span class=\"section\">##### 标题5</span></span><br><span class=\"line\"><span class=\"section\">###### 标题6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; 引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 列表1</span><br><span class=\"line\"><span class=\"bullet\">*</span> 列表2</span><br><span class=\"line\"><span class=\"bullet\">+</span> 列表3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> 列表1</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 列表2</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 列表3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> [x] 任务1</span><br><span class=\"line\"><span class=\"bullet\">-</span> [ ] 任务2</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">图片描述</span>](<span class=\"link\">https://vuejs.press/images/hero.png</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">链接描述</span>](<span class=\"link\">https://vuejs.press/</span>)</span><br><span class=\"line\">高亮</span><br><span class=\"line\">分割线</span><br></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a class=\"markdownIt-Anchor\" href=\"#表格\"></a> 表格</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 列1 | 列2 | 列3 |</span><br><span class=\"line\">| --- | --- | --- |</span><br><span class=\"line\">| 左对齐 | 居中 | 右对齐 |</span><br></pre></td></tr></table></figure>\n<h3 id=\"标题描点\"><a class=\"markdownIt-Anchor\" href=\"#标题描点\"></a> 标题描点</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 标题1 &#123;#custom-id&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"链接扩展\"><a class=\"markdownIt-Anchor\" href=\"#链接扩展\"></a> 链接扩展</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">链接描述</span>](<span class=\"link\">https://vuejs.press/ &quot;可选的标题&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"emoji\"><a class=\"markdownIt-Anchor\" href=\"#emoji\"></a> Emoji</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:smile: :100: :fire:</span><br></pre></td></tr></table></figure>\n<h3 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\"></a> 目录</h3>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[toc]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"行高亮\"><a class=\"markdownIt-Anchor\" href=\"#行高亮\"></a> 行高亮</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```ts&#123;1,7-9&#125;</span><br><span class=\"line\">import &#123; defaultTheme &#125; from &#x27;@vuepress/theme-default&#x27;</span><br><span class=\"line\">import &#123; defineUserConfig &#125; from &#x27;vuepress&#x27;</span><br><span class=\"line\">export default defineUserConfig(&#123;</span><br><span class=\"line\">  title: &#x27;你好， VuePress&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">  theme: defaultTheme(&#123;</span><br><span class=\"line\">    logo: &#x27;https://vuejs.org/images/logo.png&#x27;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<h3 id=\"行号\"><a class=\"markdownIt-Anchor\" href=\"#行号\"></a> 行号</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```ts:no-line-numbers</span><br><span class=\"line\">// 行号被禁用</span><br><span class=\"line\">const line2 = &#x27;This is line 2&#x27;</span><br><span class=\"line\">const line3 = &#x27;This is line 3&#x27;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<h2 id=\"plantuml\"><a class=\"markdownIt-Anchor\" href=\"#plantuml\"></a> <s>plantuml</s></h2>\n<p>配置无效</p>\n<ol>\n<li>安装 markdown-it-plantuml</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install markdown-it-plantuml --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改 <code>.vuepress/config.js</code> 文件，添加以下内容：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">markdown</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extendsMarkdown</span>: <span class=\"function\">(<span class=\"params\">md</span>) =&gt;</span> &#123;md.<span class=\"title function_\">use</span>(markdownItPlantuml);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：以上为vuepress 2.x版本的配置，与vuepress 1.x版本的配置不同。</p>\n<h2 id=\"在markdown中使用vue\"><a class=\"markdownIt-Anchor\" href=\"#在markdown中使用vue\"></a> 在Markdown中使用Vue</h2>\n<h2 id=\"markdown组件\"><a class=\"markdownIt-Anchor\" href=\"#markdown组件\"></a> Markdown组件</h2>\n<h1 id=\"静态资源\"><a class=\"markdownIt-Anchor\" href=\"#静态资源\"></a> 静态资源</h1>\n<h2 id=\"相对路径\"><a class=\"markdownIt-Anchor\" href=\"#相对路径\"></a> 相对路径</h2>\n<h2 id=\"public文件\"><a class=\"markdownIt-Anchor\" href=\"#public文件\"></a> Public文件</h2>\n<h2 id=\"base-helper\"><a class=\"markdownIt-Anchor\" href=\"#base-helper\"></a> Base Helper</h2>\n<h2 id=\"依赖包和路径别名\"><a class=\"markdownIt-Anchor\" href=\"#依赖包和路径别名\"></a> 依赖包和路径别名</h2>\n<h1 id=\"多语言支持\"><a class=\"markdownIt-Anchor\" href=\"#多语言支持\"></a> 多语言支持</h1>\n<h2 id=\"站点多语言配置\"><a class=\"markdownIt-Anchor\" href=\"#站点多语言配置\"></a> 站点多语言配置</h2>\n<h2 id=\"主题多语言配置\"><a class=\"markdownIt-Anchor\" href=\"#主题多语言配置\"></a> 主题多语言配置</h2>\n<h1 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\"></a> 部署</h1>\n<h2 id=\"github-pages\"><a class=\"markdownIt-Anchor\" href=\"#github-pages\"></a> GitHub Pages</h2>\n<p>GitHub Pages 可以通过路径区分来托管多个项目，需要为每个项目单独创建一个仓库。</p>\n<ol>\n<li>设置正确的 base 路径: <code>base: '/vuepress/',</code>。</li>\n<li>检查<code>.github/workflows</code>目录下是否存在工作流文件，项目初始化时会提示<code>是否需要一个自动部署文档到 GitHub Pages 的工作流？</code>，若选择Yes会自动生成一个工作流文件，否则需要手动创建<code>.github/workflows/XXX.yml</code> 文件来配置工作流（不推荐）。</li>\n<li>在远程仓库中前往 <code>Settings &gt; Pages &gt; Build and deployment</code>，设置<code>Source</code>为 <code>Deploy from a brach</code>，分支设置为<code>gh-pages</code>。</li>\n</ol>\n<p><code>Source</code>的设置有两种方式：<code>Deploy from a brach</code>和<code>GitHub Actions</code>。</p>\n<ul>\n<li>本项目自带的部署工作流组件是<code>JamesIves/github-pages-deploy-action@v4</code>，它会自动将文档部署到的分支<code>gh-pages</code>，所以需要将 <code>Source</code> 设置为 <code>Deploy from a brach</code>，分支设置为<code>gh-pages</code>。<br />\n-主页项目使用的部署组件是<code>actions/upload-pages-artifact@v3</code>，没有新建分支，设置<code>Source</code>为<code>GitHub Actions</code>方式即可访问网站。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本项目的部署组件</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">部署文档</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">JamesIves/github-pages-deploy-action@v4</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span></span><br><span class=\"line\">    <span class=\"attr\">folder:</span> <span class=\"string\">docs/.vuepress/dist</span></span><br><span class=\"line\"><span class=\"comment\"># 主页项目的部署组件</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Upload</span> <span class=\"string\">Pages</span> <span class=\"string\">artifact</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-pages-artifact@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">./public</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cm8o1f160000164v4dlfh5a2l","category_id":"cm8o1f167000464v4763bey4h","_id":"cm8o1f16f000f64v44nsmgyb2"},{"post_id":"cm8o1f169000764v42w4bhppu","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16k000p64v4a3iocln4"},{"post_id":"cm8o1f16d000d64v42ppy2uyf","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16o001164v4gr0y36sn"},{"post_id":"cm8o1f16d000d64v42ppy2uyf","category_id":"cm8o1f16m000t64v4hsej3y0w","_id":"cm8o1f16o001564v4fr3ofzzh"},{"post_id":"cm8o1f164000364v45vhb07gj","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16p001864v4gpuigxf3"},{"post_id":"cm8o1f164000364v45vhb07gj","category_id":"cm8o1f16n000x64v4f7a9cknl","_id":"cm8o1f16p001b64v4d5eb4jhk"},{"post_id":"cm8o1f16e000e64v4b8yy4eoi","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16p001c64v4fho106ga"},{"post_id":"cm8o1f16e000e64v4b8yy4eoi","category_id":"cm8o1f16m000t64v4hsej3y0w","_id":"cm8o1f16q001f64v4b2owgqx6"},{"post_id":"cm8o1f16g000i64v486i62qd1","category_id":"cm8o1f16p001764v43cyn7a2m","_id":"cm8o1f16q001h64v4cftce6cg"},{"post_id":"cm8o1f16h000j64v45cqr303f","category_id":"cm8o1f167000464v4763bey4h","_id":"cm8o1f16r001m64v4g1yfcsla"},{"post_id":"cm8o1f16h000j64v45cqr303f","category_id":"cm8o1f16p001d64v4hbj21ln7","_id":"cm8o1f16r001o64v40rvt35mc"},{"post_id":"cm8o1f16j000m64v4e3vzaj9m","category_id":"cm8o1f16p001764v43cyn7a2m","_id":"cm8o1f16s001q64v4fya78o2d"},{"post_id":"cm8o1f16a000864v4an9zh7sz","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16s001t64v4bhh2h283"},{"post_id":"cm8o1f16a000864v4an9zh7sz","category_id":"cm8o1f16n000x64v4f7a9cknl","_id":"cm8o1f16s001x64v4bp9fciva"},{"post_id":"cm8o1f16k000n64v43k7uaadx","category_id":"cm8o1f167000464v4763bey4h","_id":"cm8o1f16t001z64v4fwwy86ix"},{"post_id":"cm8o1f16k000n64v43k7uaadx","category_id":"cm8o1f16r001p64v4bm5l6syw","_id":"cm8o1f16t002264v421js7xxr"},{"post_id":"cm8o1f16l000r64v44b87ftmd","category_id":"cm8o1f16s001v64v4ci6s5fkx","_id":"cm8o1f16t002564v4dz938laq"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","category_id":"cm8o1f16s001v64v4ci6s5fkx","_id":"cm8o1f16v002c64v4ck5of86e"},{"post_id":"cm8o1f16b000964v49oozdk6i","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm8o1f16w002g64v41i8u0f2p"},{"post_id":"cm8o1f16b000964v49oozdk6i","category_id":"cm8o1f16n000x64v4f7a9cknl","_id":"cm8o1f16w002j64v42ib040bt"},{"post_id":"cm8o1f16b000964v49oozdk6i","category_id":"cm8o1f16u002964v49b8k7z74","_id":"cm8o1f16w002l64v46rk4cwyp"},{"post_id":"cm99lvlfe0000bov4c2fh1d1q","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm99lvlfs0008bov4fv1hd7eg"},{"post_id":"cm99lvlfe0000bov4c2fh1d1q","category_id":"cm99lvlfp0003bov4ctos3u7a","_id":"cm99lvlft000bbov44e9z9wbb"},{"post_id":"cm99lvlfi0001bov4bhykd69v","category_id":"cm99lvlfr0005bov47c0tcb2z","_id":"cm99lvlfw000obov4ce6c53c4"},{"post_id":"cm99lvlfi0001bov4bhykd69v","category_id":"cm99lvlft000cbov4clpdfe0g","_id":"cm99lvlfx000qbov46vj6gz0r"},{"post_id":"cm99lvlfi0001bov4bhykd69v","category_id":"cm99lvlfv000gbov4hdtzg4x1","_id":"cm99lvlfx000rbov4fsi7bx82"},{"post_id":"cm8wgjx9s0001u0v44084bmun","category_id":"cm99lvlfr0005bov47c0tcb2z","_id":"cm99lvlfx000tbov42mm39ldb"},{"post_id":"cm8wgjx9s0001u0v44084bmun","category_id":"cm99lvlft000cbov4clpdfe0g","_id":"cm99lvlfx000vbov46inw2sep"},{"post_id":"cm8wgjx9s0001u0v44084bmun","category_id":"cm99lvlfw000kbov4gq0jhf69","_id":"cm99lvlfx000xbov4ekse4myz"},{"post_id":"cm9cbtqrd0001hov4dey30olf","category_id":"cm99lvlfr0005bov47c0tcb2z","_id":"cm9cbtqrs000ahov4bggd5mjx"},{"post_id":"cm9cbtqrd0001hov4dey30olf","category_id":"cm9cbtqrp0006hov47tuqcq3v","_id":"cm9cbtqrt000dhov4frc05j9k"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm9cbtqru000jhov48gup0xx6"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","category_id":"cm9cbtqrk0004hov4b8o9edu1","_id":"cm9cbtqru000lhov4bgyf28vw"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","category_id":"cm9cbtqrs0009hov493fvb4g0","_id":"cm9cbtqru000nhov43rokd5qx"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","category_id":"cm8o1f16c000a64v4hyr7043h","_id":"cm9cbtqrv000qhov4cfmqft9l"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","category_id":"cm9cbtqrk0004hov4b8o9edu1","_id":"cm9cbtqrv000shov4bhxh6nha"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","category_id":"cm9cbtqrs0009hov493fvb4g0","_id":"cm9cbtqrv000vhov4ff976vac"},{"post_id":"cmaeyu3io000044v47hfmby20","category_id":"cmaeyu3iq000144v4czyu37b5","_id":"cmaeyu3ix000444v40nm6hpq4"}],"PostTag":[{"post_id":"cm8o1f160000164v4dlfh5a2l","tag_id":"cm8o1f169000564v42l3h8k6l","_id":"cm8o1f16d000c64v4cqjqgmu2"},{"post_id":"cm8o1f164000364v45vhb07gj","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16n000w64v416889w6o"},{"post_id":"cm8o1f164000364v45vhb07gj","tag_id":"cm8o1f16g000h64v4746pfegj","_id":"cm8o1f16o000y64v4erltbvnv"},{"post_id":"cm8o1f164000364v45vhb07gj","tag_id":"cm8o1f16j000l64v45six7xf6","_id":"cm8o1f16o001064v48wpcb2dw"},{"post_id":"cm8o1f164000364v45vhb07gj","tag_id":"cm8o1f16k000q64v4bep4fc6x","_id":"cm8o1f16o001364v43qci37my"},{"post_id":"cm8o1f169000764v42w4bhppu","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16o001664v43aa67mxb"},{"post_id":"cm8o1f169000764v42w4bhppu","tag_id":"cm8o1f16o000z64v42j2s13u9","_id":"cm8o1f16p001964v4034r1v9v"},{"post_id":"cm8o1f16a000864v4an9zh7sz","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16q001g64v47mbohxcs"},{"post_id":"cm8o1f16a000864v4an9zh7sz","tag_id":"cm8o1f16g000h64v4746pfegj","_id":"cm8o1f16q001i64v4cc650hti"},{"post_id":"cm8o1f16b000964v49oozdk6i","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16s001s64v48n1g34jj"},{"post_id":"cm8o1f16b000964v49oozdk6i","tag_id":"cm8o1f16g000h64v4746pfegj","_id":"cm8o1f16s001u64v4eayh9obn"},{"post_id":"cm8o1f16b000964v49oozdk6i","tag_id":"cm8o1f16r001n64v48k2rbmlp","_id":"cm8o1f16s001y64v40uif0uxt"},{"post_id":"cm8o1f16d000d64v42ppy2uyf","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16t002364v44b6d6l3b"},{"post_id":"cm8o1f16d000d64v42ppy2uyf","tag_id":"cm8o1f16s001r64v4dnsnehok","_id":"cm8o1f16t002664v4dmglc9ye"},{"post_id":"cm8o1f16d000d64v42ppy2uyf","tag_id":"cm8o1f16s001w64v4fpnh796l","_id":"cm8o1f16u002864v47ex00upi"},{"post_id":"cm8o1f16e000e64v4b8yy4eoi","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16v002b64v4bb3225n2"},{"post_id":"cm8o1f16e000e64v4b8yy4eoi","tag_id":"cm8o1f16s001r64v4dnsnehok","_id":"cm8o1f16v002d64v41hbu7suv"},{"post_id":"cm8o1f16e000e64v4b8yy4eoi","tag_id":"cm8o1f16u002764v444io294p","_id":"cm8o1f16w002f64v4f4eh93c5"},{"post_id":"cm8o1f16h000j64v45cqr303f","tag_id":"cm8o1f169000564v42l3h8k6l","_id":"cm8o1f16w002h64v4g5306ixc"},{"post_id":"cm8o1f16h000j64v45cqr303f","tag_id":"cm8o1f16v002a64v4h9vw28kd","_id":"cm8o1f16w002k64v4248wes3q"},{"post_id":"cm8o1f16k000n64v43k7uaadx","tag_id":"cm8o1f169000564v42l3h8k6l","_id":"cm8o1f16w002m64v4cy60ful1"},{"post_id":"cm8o1f16k000n64v43k7uaadx","tag_id":"cm8o1f16v002e64v481y51bdm","_id":"cm8o1f16x002o64v4g1vt7o1v"},{"post_id":"cm8o1f16l000r64v44b87ftmd","tag_id":"cm8o1f16w002i64v4bo2yfn75","_id":"cm8o1f16y002s64v49cwwchnp"},{"post_id":"cm8o1f16l000r64v44b87ftmd","tag_id":"cm8o1f16x002n64v45ubfhp2z","_id":"cm8o1f16y002t64v41buocnqp"},{"post_id":"cm8o1f16l000r64v44b87ftmd","tag_id":"cm8o1f16x002p64v4h6bgg2hb","_id":"cm8o1f16y002v64v49x7zbigv"},{"post_id":"cm8o1f16l000r64v44b87ftmd","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f16y002w64v441kh6tfj"},{"post_id":"cm8o1f16l000r64v44b87ftmd","tag_id":"cm8o1f16x002q64v42coh038k","_id":"cm8o1f16y002y64v48vkw2hus"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16w002i64v4bo2yfn75","_id":"cm8o1f16z003264v4g2jp0r7z"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16y002u64v49l54dd1s","_id":"cm8o1f16z003364v453bx50ry"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16y002x64v43y3i7kfv","_id":"cm8o1f16z003464v4h3sidzdb"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm8o1f170003564v44gobe4bw"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16x002q64v42coh038k","_id":"cm8o1f170003664v4g72n3ezi"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16z003064v4gvabeiql","_id":"cm8o1f170003764v4d0n95jyp"},{"post_id":"cm8o1f16m000u64v4h8r1gwmd","tag_id":"cm8o1f16x002p64v4h6bgg2hb","_id":"cm8o1f170003864v4fazogqa4"},{"post_id":"cm99lvlfe0000bov4c2fh1d1q","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm99lvlfr0006bov4dx2ndqdb"},{"post_id":"cm99lvlfe0000bov4c2fh1d1q","tag_id":"cm99lvlfk0002bov43bdp9hsz","_id":"cm99lvlfs0007bov49xf7db69"},{"post_id":"cm99lvlfi0001bov4bhykd69v","tag_id":"cm99lvlfq0004bov48771dlle","_id":"cm99lvlfw000ibov42d66bza9"},{"post_id":"cm99lvlfi0001bov4bhykd69v","tag_id":"cm99lvlfs0009bov4grtthi9q","_id":"cm99lvlfw000jbov493h0f4ln"},{"post_id":"cm99lvlfi0001bov4bhykd69v","tag_id":"cm99lvlfu000dbov48lzod8ss","_id":"cm99lvlfw000mbov462yt1xyp"},{"post_id":"cm99lvlfi0001bov4bhykd69v","tag_id":"cm99lvlfv000fbov40qfb8r3x","_id":"cm99lvlfw000nbov4109g3ifb"},{"post_id":"cm8wgjx9s0001u0v44084bmun","tag_id":"cm99lvlfq0004bov48771dlle","_id":"cm99lvlfx000sbov494ou173a"},{"post_id":"cm8wgjx9s0001u0v44084bmun","tag_id":"cm99lvlfs0009bov4grtthi9q","_id":"cm99lvlfx000ubov4gsnhgyma"},{"post_id":"cm8wgjx9s0001u0v44084bmun","tag_id":"cm99lvlfv000fbov40qfb8r3x","_id":"cm99lvlfx000wbov444yr5885"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm9cbtqrt000chov46znzafts"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","tag_id":"cm9cbtqrf0002hov49l4y71f9","_id":"cm9cbtqrt000ehov427rjakq4"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","tag_id":"cm9cbtqro0005hov40nhiamy8","_id":"cm9cbtqru000hhov4esjz7d9b"},{"post_id":"cm9cbtqr90000hov4htxs3bj8","tag_id":"cm9cbtqrq0007hov414788nib","_id":"cm9cbtqru000ihov41ck07h5j"},{"post_id":"cm9cbtqrd0001hov4dey30olf","tag_id":"cm99lvlfq0004bov48771dlle","_id":"cm9cbtqru000mhov4agc1eld4"},{"post_id":"cm9cbtqrd0001hov4dey30olf","tag_id":"cm99lvlfs0009bov4grtthi9q","_id":"cm9cbtqrv000ohov41q7ne9to"},{"post_id":"cm9cbtqrd0001hov4dey30olf","tag_id":"cm9cbtqrs000bhov4e1ai6b6a","_id":"cm9cbtqrv000rhov4gen5cwcw"},{"post_id":"cm9cbtqrd0001hov4dey30olf","tag_id":"cm9cbtqrt000ghov49ndi5dw7","_id":"cm9cbtqrv000thov47j6f34pn"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","tag_id":"cm8o1f16c000b64v4el0v1xox","_id":"cm9cbtqrw000xhov4dnnlg8ef"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","tag_id":"cm9cbtqrf0002hov49l4y71f9","_id":"cm9cbtqrw000yhov421g8d8eo"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","tag_id":"cm9cbtqro0005hov40nhiamy8","_id":"cm9cbtqrw000zhov45hbvcayk"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","tag_id":"cm9cbtqrv000uhov43rjo1i9k","_id":"cm9cbtqrw0010hov49krseupg"},{"post_id":"cm9cbtqrj0003hov4du6m2rgh","tag_id":"cm9cbtqrw000whov495ap3vvs","_id":"cm9cbtqrw0011hov461ct5bm5"},{"post_id":"cmaeyu3io000044v47hfmby20","tag_id":"cmaeyu3iv000244v4182nfm8f","_id":"cmaeyu3iw000344v43u9xhx1z"}],"Tag":[{"name":"Hexo教程","_id":"cm8o1f169000564v42l3h8k6l"},{"name":"Java","_id":"cm8o1f16c000b64v4el0v1xox"},{"name":"Java基础","_id":"cm8o1f16g000h64v4746pfegj"},{"name":"Java异常处理","_id":"cm8o1f16j000l64v45six7xf6"},{"name":"异常","_id":"cm8o1f16k000q64v4bep4fc6x"},{"name":"学习路线","_id":"cm8o1f16o000z64v42j2s13u9"},{"name":"常用类库","_id":"cm8o1f16r001n64v48k2rbmlp"},{"name":"Java中级","_id":"cm8o1f16s001r64v4dnsnehok"},{"name":"Java注解","_id":"cm8o1f16s001w64v4fpnh796l"},{"name":"Java泛型","_id":"cm8o1f16u002764v444io294p"},{"name":"Next主题","_id":"cm8o1f16v002a64v4h9vw28kd"},{"name":"Markdown","_id":"cm8o1f16v002e64v481y51bdm"},{"name":"语言对比","_id":"cm8o1f16w002i64v4bo2yfn75"},{"name":"集合","_id":"cm8o1f16x002n64v45ubfhp2z"},{"name":"Python","_id":"cm8o1f16x002p64v4h6bgg2hb"},{"name":"JavaScript","_id":"cm8o1f16x002q64v42coh038k"},{"name":"正则表达式","_id":"cm8o1f16y002u64v49l54dd1s"},{"name":"egrep","_id":"cm8o1f16y002x64v43y3i7kfv"},{"name":"Perl","_id":"cm8o1f16z003064v4gvabeiql"},{"name":"bug","_id":"cm99lvlfk0002bov43bdp9hsz"},{"name":"数据库","_id":"cm99lvlfq0004bov48771dlle"},{"name":"Oracle","_id":"cm99lvlfs0009bov4grtthi9q"},{"name":"定时任务","_id":"cm99lvlfu000dbov48lzod8ss"},{"name":"物化视图","_id":"cm99lvlfv000fbov40qfb8r3x"},{"name":"Java高级","_id":"cm9cbtqrf0002hov49l4y71f9"},{"name":"JVM和性能调优","_id":"cm9cbtqro0005hov40nhiamy8"},{"name":"Java Agent","_id":"cm9cbtqrq0007hov414788nib"},{"name":"MySQL","_id":"cm9cbtqrs000bhov4e1ai6b6a"},{"name":"聚合函数","_id":"cm9cbtqrt000ghov49ndi5dw7"},{"name":"Java动态调试","_id":"cm9cbtqrv000uhov43rjo1i9k"},{"name":"debug","_id":"cm9cbtqrw000whov495ap3vvs"},{"name":"VuePress","_id":"cmaeyu3iv000244v4182nfm8f"}]}}